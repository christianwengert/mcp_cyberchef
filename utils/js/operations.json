{
  "A1Z26 Cipher Decode": {
    "module": "Ciphers",
    "description": "Converts alphabet order numbers into their corresponding  alphabet character.<br><br>e.g. <code>1</code> becomes <code>a</code> and <code>2</code> becomes <code>b</code>.",
    "infoUrl": "",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Space",
          "Comma",
          "Semi-colon",
          "Colon",
          "Line feed",
          "CRLF"
        ],
        "required": false
      }
    ],
    "checks": [
      {
        "pattern": "^\\s*([12]?[0-9] )+[12]?[0-9]\\s*$",
        "flags": "",
        "args": [
          "Space"
        ]
      },
      {
        "pattern": "^\\s*([12]?[0-9],)+[12]?[0-9]\\s*$",
        "flags": "",
        "args": [
          "Comma"
        ]
      },
      {
        "pattern": "^\\s*([12]?[0-9];)+[12]?[0-9]\\s*$",
        "flags": "",
        "args": [
          "Semi-colon"
        ]
      },
      {
        "pattern": "^\\s*([12]?[0-9]:)+[12]?[0-9]\\s*$",
        "flags": "",
        "args": [
          "Colon"
        ]
      },
      {
        "pattern": "^\\s*([12]?[0-9]\\n)+[12]?[0-9]\\s*$",
        "flags": "",
        "args": [
          "Line feed"
        ]
      },
      {
        "pattern": "^\\s*([12]?[0-9]\\r\\n)+[12]?[0-9]\\s*$",
        "flags": "",
        "args": [
          "CRLF"
        ]
      }
    ]
  },
  "A1Z26 Cipher Encode": {
    "module": "Ciphers",
    "description": "Converts alphabet characters into their corresponding alphabet order number.<br><br>e.g. <code>a</code> becomes <code>1</code> and <code>b</code> becomes <code>2</code>.<br><br>Non-alphabet characters are dropped.",
    "infoUrl": "",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Space",
          "Comma",
          "Semi-colon",
          "Colon",
          "Line feed",
          "CRLF"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "ADD": {
    "module": "Default",
    "description": "ADD the input with the given key (e.g. <code>fe023da5</code>), MOD 255",
    "infoUrl": "https://wikipedia.org/wiki/Bitwise_operation#Bitwise_operators",
    "inputType": "byteArray",
    "outputType": "byteArray",
    "args": [
      {
        "name": "Key",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "AES Decrypt": {
    "module": "Ciphers",
    "description": "Advanced Encryption Standard (AES) is a U.S. Federal Information Processing Standard (FIPS). It was selected after a 5-year process where 15 competing designs were evaluated.<br><br><b>Key:</b> The following algorithms will be used based on the size of the key:<ul><li>16 bytes = AES-128</li><li>24 bytes = AES-192</li><li>32 bytes = AES-256</li></ul><br><br><b>IV:</b> The Initialization Vector should be 16 bytes long. If not entered, it will default to 16 null bytes.<br><br><b>Padding:</b> In CBC and ECB mode, PKCS#7 padding will be used as a default.<br><br><b>GCM Tag:</b> This field is ignored unless 'GCM' mode is used.",
    "infoUrl": "https://wikipedia.org/wiki/Advanced_Encryption_Standard",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Key",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "IV",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Mode",
        "type": "enum",
        "options": [
          "CBC",
          "CFB",
          "OFB",
          "CTR",
          "GCM",
          "ECB",
          "CBC/NoPadding",
          "ECB/NoPadding"
        ],
        "required": false
      },
      {
        "name": "Input",
        "type": "enum",
        "options": [
          "Hex",
          "Raw"
        ],
        "required": false
      },
      {
        "name": "Output",
        "type": "enum",
        "options": [
          "Raw",
          "Hex"
        ],
        "required": false
      },
      {
        "name": "GCM Tag",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Additional Authenticated Data",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "AES Encrypt": {
    "module": "Ciphers",
    "description": "Advanced Encryption Standard (AES) is a U.S. Federal Information Processing Standard (FIPS). It was selected after a 5-year process where 15 competing designs were evaluated.<br><br><b>Key:</b> The following algorithms will be used based on the size of the key:<ul><li>16 bytes = AES-128</li><li>24 bytes = AES-192</li><li>32 bytes = AES-256</li></ul>You can generate a password-based key using one of the KDF operations.<br><br><b>IV:</b> The Initialization Vector should be 16 bytes long. If not entered, it will default to 16 null bytes.<br><br><b>Padding:</b> In CBC and ECB mode, PKCS#7 padding will be used.",
    "infoUrl": "https://wikipedia.org/wiki/Advanced_Encryption_Standard",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Key",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "IV",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Mode",
        "type": "enum",
        "options": [
          "CBC",
          "CFB",
          "OFB",
          "CTR",
          "GCM",
          "ECB",
          "CBC/NoPadding",
          "ECB/NoPadding"
        ],
        "required": false
      },
      {
        "name": "Input",
        "type": "enum",
        "options": [
          "Raw",
          "Hex"
        ],
        "required": false
      },
      {
        "name": "Output",
        "type": "enum",
        "options": [
          "Hex",
          "Raw"
        ],
        "required": false
      },
      {
        "name": "Additional Authenticated Data",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "AES Key Unwrap": {
    "module": "Ciphers",
    "description": "Decryptor for a key wrapping algorithm defined in RFC3394, which is used to protect keys in untrusted storage or communications, using AES.<br><br>This algorithm uses an AES key (KEK: key-encryption key) and a 64-bit IV to decrypt 64-bit blocks.",
    "infoUrl": "https://wikipedia.org/wiki/Key_wrap",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Key (KEK)",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "IV",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Input",
        "type": "enum",
        "options": [
          "Hex",
          "Raw"
        ],
        "required": false
      },
      {
        "name": "Output",
        "type": "enum",
        "options": [
          "Hex",
          "Raw"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "AES Key Wrap": {
    "module": "Ciphers",
    "description": "A key wrapping algorithm defined in RFC3394, which is used to protect keys in untrusted storage or communications, using AES.<br><br>This algorithm uses an AES key (KEK: key-encryption key) and a 64-bit IV to encrypt 64-bit blocks.",
    "infoUrl": "https://wikipedia.org/wiki/Key_wrap",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Key (KEK)",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "IV",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Input",
        "type": "enum",
        "options": [
          "Hex",
          "Raw"
        ],
        "required": false
      },
      {
        "name": "Output",
        "type": "enum",
        "options": [
          "Hex",
          "Raw"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "AMF Decode": {
    "module": "Encodings",
    "description": "Action Message Format (AMF) is a binary format used to serialize object graphs such as ActionScript objects and XML, or send messages between an Adobe Flash client and a remote service, usually a Flash Media Server or third party alternatives.",
    "infoUrl": "https://wikipedia.org/wiki/Action_Message_Format",
    "inputType": "ArrayBuffer",
    "outputType": "JSON",
    "args": [],
    "checks": []
  },
  "AMF Encode": {
    "module": "Encodings",
    "description": "Action Message Format (AMF) is a binary format used to serialize object graphs such as ActionScript objects and XML, or send messages between an Adobe Flash client and a remote service, usually a Flash Media Server or third party alternatives.",
    "infoUrl": "https://wikipedia.org/wiki/Action_Message_Format",
    "inputType": "JSON",
    "outputType": "ArrayBuffer",
    "args": [],
    "checks": []
  },
  "AND": {
    "module": "Default",
    "description": "AND the input with the given key.<br>e.g. <code>fe023da5</code>",
    "infoUrl": "https://wikipedia.org/wiki/Bitwise_operation#AND",
    "inputType": "byteArray",
    "outputType": "byteArray",
    "args": [
      {
        "name": "Key",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Add line numbers": {
    "module": "Default",
    "description": "Adds line numbers to the output.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Offset",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "Add Text To Image": {
    "module": "Image",
    "description": "Adds text onto an image.<br><br>Text can be horizontally or vertically aligned, or the position can be manually specified.<br>Variants of the Roboto font face are available in any size or colour.",
    "infoUrl": "",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Text",
        "type": "string",
        "required": false
      },
      {
        "name": "Horizontal align",
        "type": "enum",
        "options": [
          "None",
          "Left",
          "Center",
          "Right"
        ],
        "required": false
      },
      {
        "name": "Vertical align",
        "type": "enum",
        "options": [
          "None",
          "Top",
          "Middle",
          "Bottom"
        ],
        "required": false
      },
      {
        "name": "X position",
        "type": "number",
        "required": false
      },
      {
        "name": "Y position",
        "type": "number",
        "required": false
      },
      {
        "name": "Size",
        "type": "number",
        "min": 8,
        "required": false
      },
      {
        "name": "Font face",
        "type": "enum",
        "options": [
          "Roboto",
          "Roboto Black",
          "Roboto Mono",
          "Roboto Slab"
        ],
        "required": false
      },
      {
        "name": "Red",
        "type": "number",
        "min": 0,
        "max": 255,
        "required": false
      },
      {
        "name": "Green",
        "type": "number",
        "min": 0,
        "max": 255,
        "required": false
      },
      {
        "name": "Blue",
        "type": "number",
        "min": 0,
        "max": 255,
        "required": false
      },
      {
        "name": "Alpha",
        "type": "number",
        "min": 0,
        "max": 255,
        "required": false
      }
    ],
    "checks": []
  },
  "Adler-32 Checksum": {
    "module": "Crypto",
    "description": "Adler-32 is a checksum algorithm which was invented by Mark Adler in 1995, and is a modification of the Fletcher checksum. Compared to a cyclic redundancy check of the same length, it trades reliability for speed (preferring the latter).<br><br>Adler-32 is more reliable than Fletcher-16, and slightly less reliable than Fletcher-32.",
    "infoUrl": "https://wikipedia.org/wiki/Adler-32",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Affine Cipher Decode": {
    "module": "Ciphers",
    "description": "The Affine cipher is a type of monoalphabetic substitution cipher. To decrypt, each letter in an alphabet is mapped to its numeric equivalent, decrypted by a mathematical function, and converted back to a letter.",
    "infoUrl": "https://wikipedia.org/wiki/Affine_cipher",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "a",
        "type": "number",
        "required": false
      },
      {
        "name": "b",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "Affine Cipher Encode": {
    "module": "Ciphers",
    "description": "The Affine cipher is a type of monoalphabetic substitution cipher, wherein each letter in an alphabet is mapped to its numeric equivalent, encrypted using simple mathematical function, <code>(ax + b) % 26</code>, and converted back to a letter.",
    "infoUrl": "https://wikipedia.org/wiki/Affine_cipher",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "a",
        "type": "number",
        "required": false
      },
      {
        "name": "b",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "Alternating Caps": {
    "module": "Default",
    "description": "Alternating caps, also known as studly caps, sticky caps, or spongecase is a form of text notation in which the capitalization of letters varies by some pattern, or arbitrarily. An example of this would be spelling 'alternative caps' as 'aLtErNaTiNg CaPs'.",
    "infoUrl": "https://en.wikipedia.org/wiki/Alternating_caps",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Analyse hash": {
    "module": "Crypto",
    "description": "Tries to determine information about a given hash and suggests which algorithm may have been used to generate it based on its length.",
    "infoUrl": "https://wikipedia.org/wiki/Comparison_of_cryptographic_hash_functions",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Analyse UUID": {
    "module": "Crypto",
    "description": "Tries to determine information about a given UUID and suggests which version may have been used to generate it",
    "infoUrl": "https://wikipedia.org/wiki/Universally_unique_identifier",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Argon2": {
    "module": "Crypto",
    "description": "Argon2 is a key derivation function that was selected as the winner of the Password Hashing Competition in July 2015. It was designed by Alex Biryukov, Daniel Dinu, and Dmitry Khovratovich from the University of Luxembourg.<br><br>Enter the password in the input to generate its hash.",
    "infoUrl": "https://wikipedia.org/wiki/Argon2",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Salt",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Iterations",
        "type": "number",
        "required": false
      },
      {
        "name": "Memory (KiB)",
        "type": "number",
        "required": false
      },
      {
        "name": "Parallelism",
        "type": "number",
        "required": false
      },
      {
        "name": "Hash length (bytes)",
        "type": "number",
        "required": false
      },
      {
        "name": "Type",
        "type": "enum",
        "options": [
          "Argon2i",
          "Argon2d",
          "Argon2id"
        ],
        "required": false
      },
      {
        "name": "Output format",
        "type": "enum",
        "options": [
          "Encoded hash",
          "Hex hash",
          "Raw hash"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Argon2 compare": {
    "module": "Crypto",
    "description": "Tests whether the input matches the given Argon2 hash. To test multiple possible passwords, use the 'Fork' operation.",
    "infoUrl": "https://wikipedia.org/wiki/Argon2",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Encoded hash",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "Atbash Cipher": {
    "module": "Ciphers",
    "description": "Atbash is a mono-alphabetic substitution cipher originally used to encode the Hebrew alphabet. It has been modified here for use with the Latin alphabet.",
    "infoUrl": "https://wikipedia.org/wiki/Atbash",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Avro to JSON": {
    "module": "Serialise",
    "description": "Converts Avro encoded data into JSON.",
    "infoUrl": "https://wikipedia.org/wiki/Apache_Avro",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Force Valid JSON",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "BLAKE2b": {
    "module": "Hashing",
    "description": null,
    "infoUrl": "https://wikipedia.org/wiki/BLAKE_(hash_function)#BLAKE2b_algorithm",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Size",
        "type": "enum",
        "options": [
          "512",
          "384",
          "256",
          "160",
          "128"
        ],
        "required": false
      },
      {
        "name": "Output Encoding",
        "type": "enum",
        "options": [
          "Hex",
          "Base64",
          "Raw"
        ],
        "required": false
      },
      {
        "name": "Key",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "BLAKE2s": {
    "module": "Hashing",
    "description": null,
    "infoUrl": "https://wikipedia.org/wiki/BLAKE_(hash_function)#BLAKE2",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Size",
        "type": "enum",
        "options": [
          "256",
          "160",
          "128"
        ],
        "required": false
      },
      {
        "name": "Output Encoding",
        "type": "enum",
        "options": [
          "Hex",
          "Base64",
          "Raw"
        ],
        "required": false
      },
      {
        "name": "Key",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "BLAKE3": {
    "module": "Hashing",
    "description": "Hashes the input using BLAKE3 (UTF-8 encoded), with an optional key (also UTF-8), and outputs the result in hexadecimal format.",
    "infoUrl": "https://en.wikipedia.org/wiki/BLAKE_(hash_function)#BLAKE3",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Size (bytes)",
        "type": "number",
        "required": false
      },
      {
        "name": "Key",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "BSON deserialise": {
    "module": "Serialise",
    "description": "BSON is a computer data interchange format used mainly as a data storage and network transfer format in the MongoDB database. It is a binary form for representing simple data structures, associative arrays (called objects or documents in MongoDB), and various data types of specific interest to MongoDB. The name 'BSON' is based on the term JSON and stands for 'Binary JSON'.<br><br>Input data should be in a raw bytes format.",
    "infoUrl": "https://wikipedia.org/wiki/BSON",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "BSON serialise": {
    "module": "Serialise",
    "description": "BSON is a computer data interchange format used mainly as a data storage and network transfer format in the MongoDB database. It is a binary form for representing simple data structures, associative arrays (called objects or documents in MongoDB), and various data types of specific interest to MongoDB. The name 'BSON' is based on the term JSON and stands for 'Binary JSON'.<br><br>Input data should be valid JSON.",
    "infoUrl": "https://wikipedia.org/wiki/BSON",
    "inputType": "string",
    "outputType": "ArrayBuffer",
    "args": [],
    "checks": []
  },
  "Bacon Cipher Decode": {
    "module": "Default",
    "description": "Bacon's cipher or the Baconian cipher is a method of steganography devised by Francis Bacon in 1605. A message is concealed in the presentation of text, rather than its content.",
    "infoUrl": "https://wikipedia.org/wiki/Bacon%27s_cipher",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": [
      {
        "pattern": "^\\s*([01]{5}\\s?)+$",
        "flags": "",
        "args": [
          "Standard (I=J and U=V)",
          "0/1",
          false
        ]
      },
      {
        "pattern": "^\\s*([01]{5}\\s?)+$",
        "flags": "",
        "args": [
          "Standard (I=J and U=V)",
          "0/1",
          true
        ]
      },
      {
        "pattern": "^\\s*([AB]{5}\\s?)+$",
        "flags": "",
        "args": [
          "Standard (I=J and U=V)",
          "A/B",
          false
        ]
      },
      {
        "pattern": "^\\s*([AB]{5}\\s?)+$",
        "flags": "",
        "args": [
          "Standard (I=J and U=V)",
          "A/B",
          true
        ]
      },
      {
        "pattern": "^\\s*([01]{5}\\s?)+$",
        "flags": "",
        "args": [
          "Complete",
          "0/1",
          false
        ]
      },
      {
        "pattern": "^\\s*([01]{5}\\s?)+$",
        "flags": "",
        "args": [
          "Complete",
          "0/1",
          true
        ]
      },
      {
        "pattern": "^\\s*([AB]{5}\\s?)+$",
        "flags": "",
        "args": [
          "Complete",
          "A/B",
          false
        ]
      },
      {
        "pattern": "^\\s*([AB]{5}\\s?)+$",
        "flags": "",
        "args": [
          "Complete",
          "A/B",
          true
        ]
      }
    ]
  },
  "Bacon Cipher Encode": {
    "module": "Default",
    "description": "Bacon's cipher or the Baconian cipher is a method of steganography devised by Francis Bacon in 1605. A message is concealed in the presentation of text, rather than its content.",
    "infoUrl": "https://wikipedia.org/wiki/Bacon%27s_cipher",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Bcrypt": {
    "module": "Crypto",
    "description": "bcrypt is a password hashing function designed by Niels Provos and David Mazi\\xe8res, based on the Blowfish cipher, and presented at USENIX in 1999. Besides incorporating a salt to protect against rainbow table attacks, bcrypt is an adaptive function: over time, the iteration count (rounds) can be increased to make it slower, so it remains resistant to brute-force search attacks even with increasing computation power.<br><br>Enter the password in the input to generate its hash.",
    "infoUrl": "https://wikipedia.org/wiki/Bcrypt",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Rounds",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "Bcrypt compare": {
    "module": "Crypto",
    "description": "Tests whether the input matches the given bcrypt hash. To test multiple possible passwords, use the 'Fork' operation.",
    "infoUrl": "https://wikipedia.org/wiki/Bcrypt",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Hash",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "Bcrypt parse": {
    "module": "Crypto",
    "description": "Parses a bcrypt hash to determine the number of rounds used, the salt, and the password hash.",
    "infoUrl": "https://wikipedia.org/wiki/Bcrypt",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Bifid Cipher Decode": {
    "module": "Ciphers",
    "description": "The Bifid cipher is a cipher which uses a Polybius square in conjunction with transposition, which can be fairly difficult to decipher without knowing the alphabet keyword.",
    "infoUrl": "https://wikipedia.org/wiki/Bifid_cipher",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Keyword",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "Bifid Cipher Encode": {
    "module": "Ciphers",
    "description": "The Bifid cipher is a cipher which uses a Polybius square in conjunction with transposition, which can be fairly difficult to decipher without knowing the alphabet keyword.",
    "infoUrl": "https://wikipedia.org/wiki/Bifid_cipher",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Keyword",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "Bit shift left": {
    "module": "Default",
    "description": "Shifts the bits in each byte towards the left by the specified amount.",
    "infoUrl": "https://wikipedia.org/wiki/Bitwise_operation#Bit_shifts",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Amount",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "Bit shift right": {
    "module": "Default",
    "description": "Shifts the bits in each byte towards the right by the specified amount.<br><br><i>Logical shifts</i> replace the leftmost bits with zeros.<br><i>Arithmetic shifts</i> preserve the most significant bit (MSB) of the original byte keeping the sign the same (positive or negative).",
    "infoUrl": "https://wikipedia.org/wiki/Bitwise_operation#Bit_shifts",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Amount",
        "type": "number",
        "required": false
      },
      {
        "name": "Type",
        "type": "enum",
        "options": [
          "Logical shift",
          "Arithmetic shift"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Blowfish Decrypt": {
    "module": "Ciphers",
    "description": "Blowfish is a symmetric-key block cipher designed in 1993 by Bruce Schneier and included in a large number of cipher suites and encryption products. AES now receives more attention.<br><br><b>IV:</b> The Initialization Vector should be 8 bytes long. If not entered, it will default to 8 null bytes.",
    "infoUrl": "https://wikipedia.org/wiki/Blowfish_(cipher)",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Key",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "IV",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Mode",
        "type": "enum",
        "options": [
          "CBC",
          "CFB",
          "OFB",
          "CTR",
          "ECB"
        ],
        "required": false
      },
      {
        "name": "Input",
        "type": "enum",
        "options": [
          "Hex",
          "Raw"
        ],
        "required": false
      },
      {
        "name": "Output",
        "type": "enum",
        "options": [
          "Raw",
          "Hex"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Blowfish Encrypt": {
    "module": "Ciphers",
    "description": "Blowfish is a symmetric-key block cipher designed in 1993 by Bruce Schneier and included in a large number of cipher suites and encryption products. AES now receives more attention.<br><br><b>IV:</b> The Initialization Vector should be 8 bytes long. If not entered, it will default to 8 null bytes.",
    "infoUrl": "https://wikipedia.org/wiki/Blowfish_(cipher)",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Key",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "IV",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Mode",
        "type": "enum",
        "options": [
          "CBC",
          "CFB",
          "OFB",
          "CTR",
          "ECB"
        ],
        "required": false
      },
      {
        "name": "Input",
        "type": "enum",
        "options": [
          "Raw",
          "Hex"
        ],
        "required": false
      },
      {
        "name": "Output",
        "type": "enum",
        "options": [
          "Hex",
          "Raw"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Blur Image": {
    "module": "Image",
    "description": "Applies a blur effect to the image.<br><br>Gaussian blur is much slower than fast blur, but produces better results.",
    "infoUrl": "https://wikipedia.org/wiki/Gaussian_blur",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Amount",
        "type": "number",
        "min": 1,
        "required": false
      },
      {
        "name": "Type",
        "type": "enum",
        "options": [
          "Fast",
          "Gaussian"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Bombe": {
    "module": "Bletchley",
    "description": "Emulation of the Bombe machine used at Bletchley Park to attack Enigma, based on work by Polish and British cryptanalysts.<br><br>To run this you need to have a 'crib', which is some known plaintext for a chunk of the target ciphertext, and know the rotors used. (See the 'Bombe (multiple runs)' operation if you don't know the rotors.) The machine will suggest possible configurations of the Enigma. Each suggestion has the rotor start positions (left to right) and known plugboard pairs.<br><br>Choosing a crib: First, note that Enigma cannot encrypt a letter to itself, which allows you to rule out some positions for possible cribs. Secondly, the Bombe does not simulate the Enigma's middle rotor stepping. The longer your crib, the more likely a step happened within it, which will prevent the attack working. However, other than that, longer cribs are generally better. The attack produces a 'menu' which maps ciphertext letters to plaintext, and the goal is to produce 'loops': for example, with ciphertext ABC and crib CAB, we have the mappings A&lt;-&gt;C, B&lt;-&gt;A, and C&lt;-&gt;B, which produces a loop A-B-C-A. The more loops, the better the crib. The operation will output this: if your menu has too few loops or is too short, a large number of incorrect outputs will usually be produced. Try a different crib. If the menu seems good but the right answer isn't produced, your crib may be wrong, or you may have overlapped the middle rotor stepping - try a different crib.<br><br>Output is not sufficient to fully decrypt the data. You will have to recover the rest of the plugboard settings by inspection. And the ring position is not taken into account: this affects when the middle rotor steps. If your output is correct for a bit, and then goes wrong, adjust the ring and start position on the right-hand rotor together until the output improves. If necessary, repeat for the middle rotor.<br><br>By default this operation runs the checking machine, a manual process to verify the quality of Bombe stops, on each stop, discarding stops which fail. If you want to see how many times the hardware actually stops for a given input, disable the checking machine.<br><br>More detailed descriptions of the Enigma, Typex and Bombe operations <a href='https://github.com/gchq/CyberChef/wiki/Enigma,-the-Bombe,-and-Typex'>can be found here</a>.",
    "infoUrl": "https://wikipedia.org/wiki/Bombe",
    "inputType": "string",
    "outputType": "JSON",
    "args": [],
    "checks": []
  },
  "Bzip2 Compress": {
    "module": "Compression",
    "description": "Bzip2 is a compression library developed by Julian Seward (of GHC fame) that uses the Burrows-Wheeler algorithm. It only supports compressing single files and its compression is slow, however is more effective than Deflate (.gz & .zip).",
    "infoUrl": "https://wikipedia.org/wiki/Bzip2",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Block size (100s of kb)",
        "type": "number",
        "min": 1,
        "max": 9,
        "required": false
      },
      {
        "name": "Work factor",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "Bzip2 Decompress": {
    "module": "Compression",
    "description": "Decompresses data using the Bzip2 algorithm.",
    "infoUrl": "https://wikipedia.org/wiki/Bzip2",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Use low-memory, slower decompression algorithm",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": [
      {
        "pattern": "^\\x42\\x5a\\x68",
        "flags": "",
        "args": []
      }
    ]
  },
  "CBOR Decode": {
    "module": "Serialise",
    "description": "Concise Binary Object Representation (CBOR) is a binary data serialization format loosely based on JSON. Like JSON it allows the transmission of data objects that contain name–value pairs, but in a more concise manner. This increases processing and transfer speeds at the cost of human readability. It is defined in IETF RFC 8949.",
    "infoUrl": "https://wikipedia.org/wiki/CBOR",
    "inputType": "ArrayBuffer",
    "outputType": "JSON",
    "args": [],
    "checks": []
  },
  "CBOR Encode": {
    "module": "Serialise",
    "description": "Concise Binary Object Representation (CBOR) is a binary data serialization format loosely based on JSON. Like JSON it allows the transmission of data objects that contain name–value pairs, but in a more concise manner. This increases processing and transfer speeds at the cost of human readability. It is defined in IETF RFC 8949.",
    "infoUrl": "https://wikipedia.org/wiki/CBOR",
    "inputType": "JSON",
    "outputType": "ArrayBuffer",
    "args": [],
    "checks": []
  },
  "CMAC": {
    "module": "Crypto",
    "description": "CMAC is a block-cipher based message authentication code algorithm.<br><br>RFC4493 defines AES-CMAC that uses AES encryption with a 128-bit key.<br>NIST SP 800-38B suggests usages of AES with other key lengths and Triple DES.",
    "infoUrl": "https://wikipedia.org/wiki/CMAC",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Key",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Encryption algorithm",
        "type": "enum",
        "options": [
          "AES",
          "Triple DES"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "CRC Checksum": {
    "module": "Default",
    "description": "A Cyclic Redundancy Check (<b>CRC</b>) is an error-detecting code commonly used in digital networks and storage devices to detect accidental changes to raw data.",
    "infoUrl": "https://wikipedia.org/wiki/Cyclic_redundancy_check",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "CSS Beautify": {
    "module": "Code",
    "description": "Indents and prettifies Cascading Style Sheets (CSS) code.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Indent string",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "CSS Minify": {
    "module": "Code",
    "description": "Compresses Cascading Style Sheets (CSS) code.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Preserve comments",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "CSS selector": {
    "module": "Code",
    "description": "Extract information from an HTML document with a CSS selector",
    "infoUrl": "https://wikipedia.org/wiki/Cascading_Style_Sheets#Selector",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "CSS selector",
        "type": "string",
        "required": false
      },
      {
        "name": "Delimiter",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "CSV to JSON": {
    "module": "Default",
    "description": "Converts a CSV file to JSON format.",
    "infoUrl": "https://wikipedia.org/wiki/Comma-separated_values",
    "inputType": "string",
    "outputType": "JSON",
    "args": [
      {
        "name": "Cell delimiters",
        "type": "string",
        "required": false
      },
      {
        "name": "Row delimiters",
        "type": "string",
        "required": false
      },
      {
        "name": "Format",
        "type": "enum",
        "options": [
          "Array of dictionaries",
          "Array of arrays"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "CTPH": {
    "module": "Crypto",
    "description": "Context Triggered Piecewise Hashing, also called Fuzzy Hashing, can match inputs that have homologies. Such inputs have sequences of identical bytes in the same order, although bytes in between these sequences may be different in both content and length.<br><br>CTPH was originally based on the work of Dr. Andrew Tridgell and a spam email detector called SpamSum. This method was adapted by Jesse Kornblum and published at the DFRWS conference in 2006 in a paper 'Identifying Almost Identical Files Using Context Triggered Piecewise Hashing'.",
    "infoUrl": "https://forensics.wiki/context_triggered_piecewise_hashing/",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Caesar Box Cipher": {
    "module": "Ciphers",
    "description": "Caesar Box is a transposition cipher used in the Roman Empire, in which letters of the message are written in rows in a square (or a rectangle) and then, read by column.",
    "infoUrl": "https://www.dcode.fr/caesar-box-cipher",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Box Height",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "Caret/M-decode": {
    "module": "Default",
    "description": "Decodes caret or M-encoded strings, i.e. ^M turns into a newline, M-^] turns into 0x9d. Sources such as `cat -v`.\\n\\nPlease be aware that when using `cat -v` ^_ (caret-underscore) will not be encoded, but represents a valid encoding (namely that of 0x1f).",
    "infoUrl": "https://en.wikipedia.org/wiki/Caret_notation",
    "inputType": "string",
    "outputType": "byteArray",
    "args": [],
    "checks": []
  },
  "Cartesian Product": {
    "module": "Default",
    "description": "Calculates the cartesian product of multiple sets of data, returning all possible combinations.",
    "infoUrl": "https://wikipedia.org/wiki/Cartesian_product",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Sample delimiter",
        "type": "string",
        "required": false
      },
      {
        "name": "Item delimiter",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "Cetacean Cipher Decode": {
    "module": "Ciphers",
    "description": "Decode Cetacean Cipher input. <br/><br/>e.g. <code>EEEEEEEEEeeEeEEEEEEEEEEEEeeEeEEe</code> becomes <code>hi</code>",
    "infoUrl": "https://hitchhikers.fandom.com/wiki/Dolphins",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": [
      {
        "pattern": "^(?:[eE]{16})(?: [eE]{16})*$",
        "flags": "",
        "args": []
      }
    ]
  },
  "Cetacean Cipher Encode": {
    "module": "Ciphers",
    "description": "Converts any input into Cetacean Cipher. <br/><br/>e.g. <code>hi</code> becomes <code>EEEEEEEEEeeEeEEEEEEEEEEEEeeEeEEe</code>",
    "infoUrl": "https://hitchhikers.fandom.com/wiki/Dolphins",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "ChaCha": {
    "module": "Ciphers",
    "description": "ChaCha is a stream cipher designed by Daniel J. Bernstein. It is a variant of the Salsa stream cipher. Several parameterizations exist; 'ChaCha' may refer to the original construction, or to the variant as described in RFC-8439. ChaCha is often used with Poly1305, in the ChaCha20-Poly1305 AEAD construction.<br><br><b>Key:</b> ChaCha uses a key of 16 or 32 bytes (128 or 256 bits).<br><br><b>Nonce:</b> ChaCha uses a nonce of 8 or 12 bytes (64 or 96 bits).<br><br><b>Counter:</b> ChaCha uses a counter of 4 or 8 bytes (32 or 64 bits); together, the nonce and counter must add up to 16 bytes. The counter starts at zero at the start of the keystream, and is incremented at every 64 bytes.",
    "infoUrl": "https://wikipedia.org/wiki/Salsa20#ChaCha_variant",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Key",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Nonce",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Counter",
        "type": "number",
        "min": 0,
        "required": false
      },
      {
        "name": "Rounds",
        "type": "enum",
        "options": [
          "20",
          "12",
          "8"
        ],
        "required": false
      },
      {
        "name": "Input",
        "type": "enum",
        "options": [
          "Hex",
          "Raw"
        ],
        "required": false
      },
      {
        "name": "Output",
        "type": "enum",
        "options": [
          "Raw",
          "Hex"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Change IP format": {
    "module": "Default",
    "description": "Convert an IP address from one format to another, e.g. <code>172.20.23.54</code> to <code>ac141736</code>",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Input format",
        "type": "enum",
        "options": [
          "Dotted Decimal",
          "Decimal",
          "Octal",
          "Hex"
        ],
        "required": false
      },
      {
        "name": "Output format",
        "type": "enum",
        "options": [
          "Dotted Decimal",
          "Decimal",
          "Octal",
          "Hex"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Chi Square": {
    "module": "Default",
    "description": "Calculates the Chi Square distribution of values.",
    "infoUrl": "https://wikipedia.org/wiki/Chi-squared_distribution",
    "inputType": "ArrayBuffer",
    "outputType": "number",
    "args": [],
    "checks": []
  },
  "CipherSaber2 Decrypt": {
    "module": "Crypto",
    "description": "CipherSaber is a simple symmetric encryption protocol based on the RC4 stream cipher. It gives reasonably strong protection of message confidentiality, yet it's designed to be simple enough that even novice programmers can memorize the algorithm and implement it from scratch.",
    "infoUrl": "https://wikipedia.org/wiki/CipherSaber",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [],
    "checks": []
  },
  "CipherSaber2 Encrypt": {
    "module": "Crypto",
    "description": "CipherSaber is a simple symmetric encryption protocol based on the RC4 stream cipher. It gives reasonably strong protection of message confidentiality, yet it's designed to be simple enough that even novice programmers can memorize the algorithm and implement it from scratch.",
    "infoUrl": "https://wikipedia.org/wiki/CipherSaber",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [],
    "checks": []
  },
  "Citrix CTX1 Decode": {
    "module": "Encodings",
    "description": "Decodes strings in a Citrix CTX1 password format to plaintext.",
    "infoUrl": "https://www.reddit.com/r/AskNetsec/comments/1s3r6y/citrix_ctx1_hash_decoding/",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Citrix CTX1 Encode": {
    "module": "Encodings",
    "description": "Encodes strings to Citrix CTX1 password format.",
    "infoUrl": "https://www.reddit.com/r/AskNetsec/comments/1s3r6y/citrix_ctx1_hash_decoding/",
    "inputType": "string",
    "outputType": "byteArray",
    "args": [],
    "checks": []
  },
  "Colossus": {
    "module": "Bletchley",
    "description": "Colossus is the name of the world's first electronic computer. Ten Colossi were designed by Tommy Flowers and built at the Post Office Research Labs at Dollis Hill in 1943 during World War 2. They assisted with the breaking of the German Lorenz cipher attachment, a machine created to encipher communications between Hitler and his generals on the front lines.<br><br>To learn more, Virtual Colossus, an online, browser based simulation of a Colossus computer is available at <a href='https://virtualcolossus.co.uk' target='_blank'>virtualcolossus.co.uk</a>.<br><br>A more detailed description of this operation can be found <a href='https://github.com/gchq/CyberChef/wiki/Colossus' target='_blank'>here</a>.",
    "infoUrl": "https://wikipedia.org/wiki/Colossus_computer",
    "inputType": "string",
    "outputType": "JSON",
    "args": [],
    "checks": []
  },
  "Comment": {
    "module": "Default",
    "description": "Provides a place to write comments within the flow of the recipe. This operation has no computational effect.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "Compare CTPH hashes": {
    "module": "Crypto",
    "description": "Compares two Context Triggered Piecewise Hashing (CTPH) fuzzy hashes to determine the similarity between them on a scale of 0 to 100.",
    "infoUrl": "https://forensics.wiki/context_triggered_piecewise_hashing/",
    "inputType": "string",
    "outputType": "Number",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Line feed",
          "CRLF",
          "Space",
          "Comma"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Compare SSDEEP hashes": {
    "module": "Crypto",
    "description": "Compares two SSDEEP fuzzy hashes to determine the similarity between them on a scale of 0 to 100.",
    "infoUrl": "https://forensics.wiki/ssdeep/",
    "inputType": "string",
    "outputType": "Number",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Line feed",
          "CRLF",
          "Space",
          "Comma"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Conditional Jump": {
    "module": "Default",
    "description": "Conditionally jump forwards or backwards to the specified Label  based on whether the data matches the specified regular expression.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Match (regex)",
        "type": "string",
        "required": false
      },
      {
        "name": "Invert match",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Label name",
        "type": "string",
        "required": false
      },
      {
        "name": "Maximum jumps (if jumping backwards)",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "Contain Image": {
    "module": "Image",
    "description": "Scales an image to the specified width and height, maintaining the aspect ratio. The image may be letterboxed.",
    "infoUrl": "",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [],
    "checks": []
  },
  "Convert area": {
    "module": "Default",
    "description": "Converts a unit of area to another format.",
    "infoUrl": "https://wikipedia.org/wiki/Orders_of_magnitude_(area)",
    "inputType": "BigNumber",
    "outputType": "BigNumber",
    "args": [
      {
        "name": "Input units",
        "type": "enum",
        "required": false
      },
      {
        "name": "Output units",
        "type": "enum",
        "required": false
      }
    ],
    "checks": []
  },
  "Convert co-ordinate format": {
    "module": "Hashing",
    "description": "Converts geographical coordinates between different formats.<br><br>Supported formats:<ul><li>Degrees Minutes Seconds (DMS)</li><li>Degrees Decimal Minutes (DDM)</li><li>Decimal Degrees (DD)</li><li>Geohash</li><li>Military Grid Reference System (MGRS)</li><li>Ordnance Survey National Grid (OSNG)</li><li>Universal Transverse Mercator (UTM)</li></ul><br>The operation can try to detect the input co-ordinate format and delimiter automatically, but this may not always work correctly.",
    "infoUrl": "https://wikipedia.org/wiki/Geographic_coordinate_conversion",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Convert data units": {
    "module": "Default",
    "description": "Converts a unit of data to another format.",
    "infoUrl": "https://wikipedia.org/wiki/Orders_of_magnitude_(data)",
    "inputType": "BigNumber",
    "outputType": "BigNumber",
    "args": [
      {
        "name": "Input units",
        "type": "enum",
        "required": false
      },
      {
        "name": "Output units",
        "type": "enum",
        "required": false
      }
    ],
    "checks": []
  },
  "Convert distance": {
    "module": "Default",
    "description": "Converts a unit of distance to another format.",
    "infoUrl": "https://wikipedia.org/wiki/Orders_of_magnitude_(length)",
    "inputType": "BigNumber",
    "outputType": "BigNumber",
    "args": [
      {
        "name": "Input units",
        "type": "enum",
        "required": false
      },
      {
        "name": "Output units",
        "type": "enum",
        "required": false
      }
    ],
    "checks": []
  },
  "Convert Image Format": {
    "module": "Image",
    "description": "Converts an image between different formats. Supported formats:<br><ul><li>Joint Photographic Experts Group (JPEG)</li><li>Portable Network Graphics (PNG)</li><li>Bitmap (BMP)</li><li>Tagged Image File Format (TIFF)</li></ul><br>Note: GIF files are supported for input, but cannot be outputted.",
    "infoUrl": "https://wikipedia.org/wiki/Image_file_formats",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Output Format",
        "type": "enum",
        "options": [
          "JPEG",
          "PNG",
          "BMP",
          "TIFF"
        ],
        "required": false
      },
      {
        "name": "JPEG Quality",
        "type": "number",
        "min": 1,
        "max": 100,
        "required": false
      },
      {
        "name": "PNG Filter Type",
        "type": "enum",
        "options": [
          "Auto",
          "None",
          "Sub",
          "Up",
          "Average",
          "Paeth"
        ],
        "required": false
      },
      {
        "name": "PNG Deflate Level",
        "type": "number",
        "min": 0,
        "max": 9,
        "required": false
      }
    ],
    "checks": []
  },
  "Convert Leet Speak": {
    "module": "Default",
    "description": "Converts to and from Leet Speak.",
    "infoUrl": "https://wikipedia.org/wiki/Leet",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Convert mass": {
    "module": "Default",
    "description": "Converts a unit of mass to another format.",
    "infoUrl": "https://wikipedia.org/wiki/Orders_of_magnitude_(mass)",
    "inputType": "BigNumber",
    "outputType": "BigNumber",
    "args": [
      {
        "name": "Input units",
        "type": "enum",
        "required": false
      },
      {
        "name": "Output units",
        "type": "enum",
        "required": false
      }
    ],
    "checks": []
  },
  "Convert speed": {
    "module": "Default",
    "description": "Converts a unit of speed to another format.",
    "infoUrl": "https://wikipedia.org/wiki/Orders_of_magnitude_(speed)",
    "inputType": "BigNumber",
    "outputType": "BigNumber",
    "args": [
      {
        "name": "Input units",
        "type": "enum",
        "required": false
      },
      {
        "name": "Output units",
        "type": "enum",
        "required": false
      }
    ],
    "checks": []
  },
  "Convert to NATO alphabet": {
    "module": "Default",
    "description": "Converts characters to their representation in the NATO phonetic alphabet.",
    "infoUrl": "https://wikipedia.org/wiki/NATO_phonetic_alphabet",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Count occurrences": {
    "module": "Default",
    "description": "Counts the number of times the provided string occurs in the input.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "number",
    "args": [
      {
        "name": "Search string",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Cover Image": {
    "module": "Image",
    "description": "Scales the image to the given width and height, keeping the aspect ratio. The image may be clipped.",
    "infoUrl": "",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [],
    "checks": []
  },
  "Crop Image": {
    "module": "Image",
    "description": "Crops an image to the specified region, or automatically crops edges.<br><br><b><u>Autocrop</u></b><br>Automatically crops same-colour borders from the image.<br><br><u>Autocrop tolerance</u><br>A percentage value for the tolerance of colour difference between pixels.<br><br><u>Only autocrop frames</u><br>Only crop real frames (all sides must have the same border)<br><br><u>Symmetric autocrop</u><br>Force autocrop to be symmetric (top/bottom and left/right are cropped by the same amount)<br><br><u>Autocrop keep border</u><br>The number of pixels of border to leave around the image.",
    "infoUrl": "https://wikipedia.org/wiki/Cropping_(image)",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "X Position",
        "type": "number",
        "min": 0,
        "required": false
      },
      {
        "name": "Y Position",
        "type": "number",
        "min": 0,
        "required": false
      },
      {
        "name": "Width",
        "type": "number",
        "min": 1,
        "required": false
      },
      {
        "name": "Height",
        "type": "number",
        "min": 1,
        "required": false
      },
      {
        "name": "Autocrop",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Autocrop tolerance (%)",
        "type": "number",
        "min": 0,
        "max": 100,
        "required": false
      },
      {
        "name": "Only autocrop frames",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Symmetric autocrop",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Autocrop keep border (px)",
        "type": "number",
        "min": 0,
        "required": false
      }
    ],
    "checks": []
  },
  "DES Decrypt": {
    "module": "Ciphers",
    "description": "DES is a previously dominant algorithm for encryption, and was published as an official U.S. Federal Information Processing Standard (FIPS). It is now considered to be insecure due to its small key size.<br><br><b>Key:</b> DES uses a key length of 8 bytes (64 bits).<br><br><b>IV:</b> The Initialization Vector should be 8 bytes long. If not entered, it will default to 8 null bytes.<br><br><b>Padding:</b> In CBC and ECB mode, PKCS#7 padding will be used as a default.",
    "infoUrl": "https://wikipedia.org/wiki/Data_Encryption_Standard",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Key",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "IV",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Mode",
        "type": "enum",
        "options": [
          "CBC",
          "CFB",
          "OFB",
          "CTR",
          "ECB",
          "CBC/NoPadding",
          "ECB/NoPadding"
        ],
        "required": false
      },
      {
        "name": "Input",
        "type": "enum",
        "options": [
          "Hex",
          "Raw"
        ],
        "required": false
      },
      {
        "name": "Output",
        "type": "enum",
        "options": [
          "Raw",
          "Hex"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "DES Encrypt": {
    "module": "Ciphers",
    "description": "DES is a previously dominant algorithm for encryption, and was published as an official U.S. Federal Information Processing Standard (FIPS). It is now considered to be insecure due to its small key size.<br><br><b>Key:</b> DES uses a key length of 8 bytes (64 bits).<br><br>You can generate a password-based key using one of the KDF operations.<br><br><b>IV:</b> The Initialization Vector should be 8 bytes long. If not entered, it will default to 8 null bytes.<br><br><b>Padding:</b> In CBC and ECB mode, PKCS#7 padding will be used.",
    "infoUrl": "https://wikipedia.org/wiki/Data_Encryption_Standard",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Key",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "IV",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Mode",
        "type": "enum",
        "options": [
          "CBC",
          "CFB",
          "OFB",
          "CTR",
          "ECB"
        ],
        "required": false
      },
      {
        "name": "Input",
        "type": "enum",
        "options": [
          "Raw",
          "Hex"
        ],
        "required": false
      },
      {
        "name": "Output",
        "type": "enum",
        "options": [
          "Hex",
          "Raw"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "DNS over HTTPS": {
    "module": "Default",
    "description": null,
    "infoUrl": "https://wikipedia.org/wiki/DNS_over_HTTPS",
    "inputType": "string",
    "outputType": "JSON",
    "args": [],
    "checks": []
  },
  "DateTime Delta": {
    "module": "Default",
    "description": "Calculates a new DateTime value given an input DateTime value and a time difference (delta) from the input DateTime value.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "html",
    "args": [],
    "checks": []
  },
  "Dechunk HTTP response": {
    "module": "Default",
    "description": "Parses an HTTP response transferred using Transfer-Encoding: Chunked",
    "infoUrl": "https://wikipedia.org/wiki/Chunked_transfer_encoding",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": [
      {
        "pattern": "^[0-9A-F]+\r\n",
        "flags": "i",
        "args": []
      }
    ]
  },
  "Decode NetBIOS Name": {
    "module": "Default",
    "description": "NetBIOS names as seen across the client interface to NetBIOS are exactly 16 bytes long. Within the NetBIOS-over-TCP protocols, a longer representation is used.<br><br>There are two levels of encoding. The first level maps a NetBIOS name into a domain system name.  The second level maps the domain system name into the 'compressed' representation required for interaction with the domain name system.<br><br>This operation decodes the first level of encoding. See RFC 1001 for full details.",
    "infoUrl": "https://wikipedia.org/wiki/NetBIOS",
    "inputType": "byteArray",
    "outputType": "byteArray",
    "args": [
      {
        "name": "Offset",
        "type": "number",
        "required": false
      }
    ],
    "checks": [
      {
        "pattern": "^\\s*\\S{32}$",
        "flags": "",
        "args": [
          65
        ]
      }
    ]
  },
  "Decode text": {
    "module": "Encodings",
    "description": null,
    "infoUrl": "https://wikipedia.org/wiki/Character_encoding",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Defang IP Addresses": {
    "module": "Default",
    "description": "Takes a IPv4 or IPv6 address and 'Defangs' it, meaning the IP becomes invalid, removing the risk of accidentally utilising it as an IP address.",
    "infoUrl": "https://isc.sans.edu/forums/diary/Defang+all+the+things/22744/",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": [
      {
        "pattern": "^\\s*(([0-9]{1,3}\\.){3}[0-9]{1,3}|([0-9a-f]{4}:){7}[0-9a-f]{4})\\s*$",
        "flags": "i",
        "args": [],
        "output": {
          "pattern": "^\\s*(([0-9]{1,3}\\[\\.\\]){3}[0-9]{1,3}|([0-9a-f]{4}\\[\\:\\]){7}[0-9a-f]{4})\\s*$",
          "flags": "i"
        }
      }
    ]
  },
  "Defang URL": {
    "module": "Default",
    "description": "Takes a Universal Resource Locator (URL) and 'Defangs' it; meaning the URL becomes invalid, neutralising the risk of accidentally clicking on a malicious link.<br><br>This is often used when dealing with malicious links or IOCs.<br><br>Works well when combined with the 'Extract URLs' operation.",
    "infoUrl": "https://isc.sans.edu/forums/diary/Defang+all+the+things/22744/",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Derive EVP key": {
    "module": "Ciphers",
    "description": "This operation performs a password-based key derivation function (PBKDF) used extensively in OpenSSL. In many applications of cryptography, user security is ultimately dependent on a password, and because a password usually can't be used directly as a cryptographic key, some processing is required.<br><br>A salt provides a large set of keys for any given password, and an iteration count increases the cost of producing keys from a password, thereby also increasing the difficulty of attack.<br><br>If you leave the salt argument empty, a random salt will be generated.",
    "infoUrl": "https://wikipedia.org/wiki/Key_derivation_function",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Passphrase",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Key size",
        "type": "number",
        "required": false
      },
      {
        "name": "Iterations",
        "type": "number",
        "required": false
      },
      {
        "name": "Hashing function",
        "type": "enum",
        "options": [
          "SHA1",
          "SHA256",
          "SHA384",
          "SHA512",
          "MD5"
        ],
        "required": false
      },
      {
        "name": "Salt",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Derive HKDF key": {
    "module": "Crypto",
    "description": "A simple Hashed Message Authenticaton Code (HMAC)-based key derivation function (HKDF), defined in RFC5869.",
    "infoUrl": "https://wikipedia.org/wiki/HKDF",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Salt",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Info",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Hashing function",
        "type": "enum",
        "options": [
          "MD2",
          "MD4",
          "MD5",
          "SHA0",
          "SHA1",
          "SHA224",
          "SHA256",
          "SHA384",
          "SHA512",
          "SHA512/224",
          "SHA512/256",
          "RIPEMD128",
          "RIPEMD160",
          "RIPEMD256",
          "RIPEMD320",
          "HAS160",
          "Whirlpool",
          "Whirlpool-0",
          "Whirlpool-T",
          "Snefru"
        ],
        "required": false
      },
      {
        "name": "Extract mode",
        "type": "enum",
        "options": [
          "with salt",
          "no salt",
          "skip"
        ],
        "required": false
      },
      {
        "name": "L (number of output octets)",
        "type": "number",
        "min": 0,
        "required": false
      }
    ],
    "checks": []
  },
  "Derive PBKDF2 key": {
    "module": "Ciphers",
    "description": "PBKDF2 is a password-based key derivation function. It is part of RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, specifically PKCS #5 v2.0, also published as Internet Engineering Task Force's RFC 2898.<br><br>In many applications of cryptography, user security is ultimately dependent on a password, and because a password usually can't be used directly as a cryptographic key, some processing is required.<br><br>A salt provides a large set of keys for any given password, and an iteration count increases the cost of producing keys from a password, thereby also increasing the difficulty of attack.<br><br>If you leave the salt argument empty, a random salt will be generated.",
    "infoUrl": "https://wikipedia.org/wiki/PBKDF2",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Passphrase",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Key size",
        "type": "number",
        "required": false
      },
      {
        "name": "Iterations",
        "type": "number",
        "required": false
      },
      {
        "name": "Hashing function",
        "type": "enum",
        "options": [
          "SHA1",
          "SHA256",
          "SHA384",
          "SHA512",
          "MD5"
        ],
        "required": false
      },
      {
        "name": "Salt",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Detect File Type": {
    "module": "Default",
    "description": "Attempts to guess the MIME (Multipurpose Internet Mail Extensions) type of the data based on 'magic bytes'.<br><br>Currently supports the following file types: \" +\n            exts + \".",
    "infoUrl": "https://wikipedia.org/wiki/List_of_file_signatures",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Diff": {
    "module": "Diff",
    "description": "Compares two inputs (separated by the specified delimiter) and highlights the differences between them.",
    "infoUrl": "https://wikipedia.org/wiki/File_comparison",
    "inputType": "string",
    "outputType": "html",
    "args": [
      {
        "name": "Sample delimiter",
        "type": "string",
        "required": false
      },
      {
        "name": "Diff by",
        "type": "enum",
        "options": [
          "Character",
          "Word",
          "Line",
          "Sentence",
          "CSS",
          "JSON"
        ],
        "required": false
      },
      {
        "name": "Show added",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Show removed",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Show subtraction",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Ignore whitespace",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Disassemble x86": {
    "module": "Shellcode",
    "description": "Disassembly is the process of translating machine language into assembly language.<br><br>This operation supports 64-bit, 32-bit and 16-bit code written for Intel or AMD x86 processors. It is particularly useful for reverse engineering shellcode.<br><br>Input should be in hexadecimal.",
    "infoUrl": "https://wikipedia.org/wiki/X86",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Bit mode",
        "type": "enum",
        "options": [
          "64",
          "32",
          "16"
        ],
        "required": false
      },
      {
        "name": "Compatibility",
        "type": "enum",
        "options": [
          "Full x86 architecture",
          "Knights Corner",
          "Larrabee",
          "Cyrix",
          "Geode",
          "Centaur",
          "X86/486"
        ],
        "required": false
      },
      {
        "name": "Code Segment (CS)",
        "type": "number",
        "required": false
      },
      {
        "name": "Offset (IP)",
        "type": "number",
        "required": false
      },
      {
        "name": "Show instruction hex",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Show instruction position",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Dither Image": {
    "module": "Image",
    "description": "Apply a dither effect to an image.",
    "infoUrl": "https://wikipedia.org/wiki/Dither",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [],
    "checks": []
  },
  "Divide": {
    "module": "Default",
    "description": "Divides a list of numbers. If an item in the string is not a number it is excluded from the list.<br><br>e.g. <code>0x0a 8 .5</code> becomes <code>2.5</code>",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "BigNumber",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Line feed",
          "Space",
          "Comma",
          "Semi-colon",
          "Colon",
          "CRLF"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Drop bytes": {
    "module": "Default",
    "description": "Cuts a slice of the specified number of bytes out of the data. Negative values are allowed.",
    "infoUrl": null,
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Start",
        "type": "number",
        "required": false
      },
      {
        "name": "Length",
        "type": "number",
        "required": false
      },
      {
        "name": "Apply to each line",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Drop nth bytes": {
    "module": "Default",
    "description": "Drops every nth byte starting with a given byte.",
    "infoUrl": "",
    "inputType": "byteArray",
    "outputType": "byteArray",
    "args": [
      {
        "name": "Drop every",
        "type": "number",
        "required": false
      },
      {
        "name": "Starting at",
        "type": "number",
        "required": false
      },
      {
        "name": "Apply to each line",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "ECDSA Sign": {
    "module": "Ciphers",
    "description": "Sign a plaintext message with a PEM encoded EC key.",
    "infoUrl": "https://wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "ECDSA Private Key (PEM)",
        "type": "string",
        "required": false
      },
      {
        "name": "Message Digest Algorithm",
        "type": "enum",
        "options": [
          "SHA-256",
          "SHA-384",
          "SHA-512",
          "SHA-1",
          "MD5"
        ],
        "required": false
      },
      {
        "name": "Output Format",
        "type": "enum",
        "options": [
          "ASN.1 HEX",
          "P1363 HEX",
          "JSON Web Signature",
          "Raw JSON"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "ECDSA Signature Conversion": {
    "module": "Ciphers",
    "description": "Convert an ECDSA signature between hex, asn1 and json.",
    "infoUrl": "https://wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Input Format",
        "type": "enum",
        "options": [
          "Auto",
          "ASN.1 HEX",
          "P1363 HEX",
          "JSON Web Signature",
          "Raw JSON"
        ],
        "required": false
      },
      {
        "name": "Output Format",
        "type": "enum",
        "options": [
          "ASN.1 HEX",
          "P1363 HEX",
          "JSON Web Signature",
          "Raw JSON"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "ECDSA Verify": {
    "module": "Ciphers",
    "description": "Verify a message against a signature and a public PEM encoded EC key.",
    "infoUrl": "https://wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Input Format",
        "type": "enum",
        "options": [
          "Auto",
          "ASN.1 HEX",
          "P1363 HEX",
          "JSON Web Signature",
          "Raw JSON"
        ],
        "required": false
      },
      {
        "name": "Message Digest Algorithm",
        "type": "enum",
        "options": [
          "SHA-256",
          "SHA-384",
          "SHA-512",
          "SHA-1",
          "MD5"
        ],
        "required": false
      },
      {
        "name": "ECDSA Public Key (PEM)",
        "type": "string",
        "required": false
      },
      {
        "name": "Message",
        "type": "string",
        "required": false
      },
      {
        "name": "Message format",
        "type": "enum",
        "options": [
          "Raw",
          "Hex",
          "Base64"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "ELF Info": {
    "module": "Default",
    "description": "Implements readelf-like functionality. This operation will extract the ELF Header, Program Headers, Section Headers and Symbol Table for an ELF file.",
    "infoUrl": "https://www.wikipedia.org/wiki/Executable_and_Linkable_Format",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Encode NetBIOS Name": {
    "module": "Default",
    "description": "NetBIOS names as seen across the client interface to NetBIOS are exactly 16 bytes long. Within the NetBIOS-over-TCP protocols, a longer representation is used.<br><br>There are two levels of encoding. The first level maps a NetBIOS name into a domain system name.  The second level maps the domain system name into the 'compressed' representation required for interaction with the domain name system.<br><br>This operation carries out the first level of encoding. See RFC 1001 for full details.",
    "infoUrl": "https://wikipedia.org/wiki/NetBIOS",
    "inputType": "byteArray",
    "outputType": "byteArray",
    "args": [
      {
        "name": "Offset",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "Encode text": {
    "module": "Encodings",
    "description": null,
    "infoUrl": "https://wikipedia.org/wiki/Character_encoding",
    "inputType": "string",
    "outputType": "ArrayBuffer",
    "args": [],
    "checks": []
  },
  "Enigma": {
    "module": "Bletchley",
    "description": "Encipher/decipher with the WW2 Enigma machine.<br><br>Enigma was used by the German military, among others, around the WW2 era as a portable cipher machine to protect sensitive military, diplomatic and commercial communications.<br><br>The standard set of German military rotors and reflectors are provided. To configure the plugboard, enter a string of connected pairs of letters, e.g. <code>AB CD EF</code> connects A to B, C to D, and E to F. This is also used to create your own reflectors. To create your own rotor, enter the letters that the rotor maps A to Z to, in order, optionally followed by <code>&lt;</code> then a list of stepping points.<br>This is deliberately fairly permissive with rotor placements etc compared to a real Enigma (on which, for example, a four-rotor Enigma uses only the thin reflectors and the beta or gamma rotor in the 4th slot).<br><br>More detailed descriptions of the Enigma, Typex and Bombe operations <a href='https://github.com/gchq/CyberChef/wiki/Enigma,-the-Bombe,-and-Typex'>can be found here</a>.",
    "infoUrl": "https://wikipedia.org/wiki/Enigma_machine",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Entropy": {
    "module": "Charts",
    "description": "Shannon Entropy, in the context of information theory, is a measure of the rate at which information is produced by a source of data. It can be used, in a broad sense, to detect whether data is likely to be structured or unstructured. 8 is the maximum, representing highly unstructured, 'random' data. English language text usually falls somewhere between 3.5 and 5. Properly encrypted or compressed data should have an entropy of over 7.5.",
    "infoUrl": "https://wikipedia.org/wiki/Entropy_(information_theory)",
    "inputType": "ArrayBuffer",
    "outputType": "json",
    "args": [
      {
        "name": "Visualisation",
        "type": "enum",
        "options": [
          "Shannon scale",
          "Histogram (Bar)",
          "Histogram (Line)",
          "Curve",
          "Image"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Escape string": {
    "module": "Default",
    "description": "Escapes special characters in a string so that they do not cause conflicts. For example, <code>Don't stop me now</code> becomes <code>Don\\\\'t stop me now</code>.<br><br>Supports the following escape sequences:<ul><li><code>\\\\n</code> (Line feed/newline)</li><li><code>\\\\r</code> (Carriage return)</li><li><code>\\\\t</code> (Horizontal tab)</li><li><code>\\\\b</code> (Backspace)</li><li><code>\\\\f</code> (Form feed)</li><li><code>\\\\xnn</code> (Hex, where n is 0-f)</li><li><code>\\\\\\\\</code> (Backslash)</li><li><code>\\\\'</code> (Single quote)</li><li><code>\\\\&quot;</code> (Double quote)</li><li><code>\\\\unnnn</code> (Unicode character)</li><li><code>\\\\u{nnnnnn}</code> (Unicode code point)</li></ul>",
    "infoUrl": "https://wikipedia.org/wiki/Escape_sequence",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Escape level",
        "type": "enum",
        "options": [
          "Special chars",
          "Everything",
          "Minimal"
        ],
        "required": false
      },
      {
        "name": "Escape quote",
        "type": "enum",
        "options": [
          "Single",
          "Double",
          "Backtick"
        ],
        "required": false
      },
      {
        "name": "JSON compatible",
        "type": "boolean",
        "required": false
      },
      {
        "name": "ES6 compatible",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Uppercase hex",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Escape Unicode Characters": {
    "module": "Default",
    "description": "Converts characters to their unicode-escaped notations.<br><br>Supports the prefixes:<ul><li><code>\\\\u</code></li><li><code>%u</code></li><li><code>U+</code></li></ul>e.g. <code>σου</code> becomes <code>\\\\u03C3\\\\u03BF\\\\u03C5</code>",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Prefix",
        "type": "enum",
        "options": [
          "\\u",
          "%u",
          "U+"
        ],
        "required": false
      },
      {
        "name": "Encode all chars",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Padding",
        "type": "number",
        "required": false
      },
      {
        "name": "Uppercase hex",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": [
      {
        "pattern": "\\\\u(?:[\\da-f]{4,6})",
        "flags": "i",
        "args": [
          "\\u"
        ]
      },
      {
        "pattern": "%u(?:[\\da-f]{4,6})",
        "flags": "i",
        "args": [
          "%u"
        ]
      },
      {
        "pattern": "U\\+(?:[\\da-f]{4,6})",
        "flags": "i",
        "args": [
          "U+"
        ]
      }
    ]
  },
  "Expand alphabet range": {
    "module": "Default",
    "description": "Expand an alphabet range string into a list of the characters in that range.<br><br>e.g. <code>a-z</code> becomes <code>abcdefghijklmnopqrstuvwxyz</code>.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Delimiter",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "Extract dates": {
    "module": "Regex",
    "description": "Extracts dates in the following formats<ul><li><code>yyyy-mm-dd</code></li><li><code>dd/mm/yyyy</code></li><li><code>mm/dd/yyyy</code></li></ul>Dividers can be any of /, -, . or space",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Display total",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Extract domains": {
    "module": "Regex",
    "description": "Extracts fully qualified domain names.<br>Note that this will not include paths. Use <strong>Extract URLs</strong> to find entire URLs.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Display total",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Sort",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Unique",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Underscore (DMARC, DKIM, etc)",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Extract EXIF": {
    "module": "Image",
    "description": null,
    "infoUrl": "https://wikipedia.org/wiki/Exif",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Extract email addresses": {
    "module": "Regex",
    "description": "Extracts all email addresses from the input.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Display total",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Sort",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Unique",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Extract file paths": {
    "module": "Regex",
    "description": "Extracts anything that looks like a Windows or UNIX file path.<br><br>Note that if UNIX is selected, there will likely be a lot of false positives.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Windows",
        "type": "boolean",
        "required": false
      },
      {
        "name": "UNIX",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Display total",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Sort",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Unique",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Extract Files": {
    "module": "Default",
    "description": null,
    "infoUrl": "https://forensics.wiki/file_carving",
    "inputType": "ArrayBuffer",
    "outputType": "List<File>",
    "args": [
      {
        "name": "Ignore failed extractions",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Minimum File Size",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "Extract hashes": {
    "module": "Regex",
    "description": "Extracts potential hashes based on hash character length",
    "infoUrl": "https://wikipedia.org/wiki/Comparison_of_cryptographic_hash_functions",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Hash character length",
        "type": "number",
        "required": false
      },
      {
        "name": "All hashes",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Display Total",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Extract ID3": {
    "module": "Default",
    "description": "This operation extracts ID3 metadata from an MP3 file.<br><br>ID3 is a metadata container most often used in conjunction with the MP3 audio file format. It allows information such as the title, artist, album, track number, and other information about the file to be stored in the file itself.",
    "infoUrl": "https://wikipedia.org/wiki/ID3",
    "inputType": "ArrayBuffer",
    "outputType": "JSON",
    "args": [],
    "checks": []
  },
  "Extract IP addresses": {
    "module": "Regex",
    "description": "Extracts all IPv4 and IPv6 addresses.<br><br>Warning: Given a string <code>1.2.3.4.5.6.7.8</code>, this will match <code>1.2.3.4 and 5.6.7.8</code> so always check the original input!",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "IPv4",
        "type": "boolean",
        "required": false
      },
      {
        "name": "IPv6",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Remove local IPv4 addresses",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Display total",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Sort",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Unique",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Extract LSB": {
    "module": "Image",
    "description": "Extracts the Least Significant Bit data from each pixel in an image. This is a common way to hide data in Steganography.",
    "infoUrl": "https://wikipedia.org/wiki/Bit_numbering#Least_significant_bit_in_digital_steganography",
    "inputType": "ArrayBuffer",
    "outputType": "byteArray",
    "args": [],
    "checks": []
  },
  "Extract MAC addresses": {
    "module": "Regex",
    "description": "Extracts all Media Access Control (MAC) addresses from the input.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Display total",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Sort",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Unique",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Extract RGBA": {
    "module": "Image",
    "description": "Extracts each pixel's RGBA value in an image. These are sometimes used in Steganography to hide text or data.",
    "infoUrl": "https://wikipedia.org/wiki/RGBA_color_space",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Comma",
          "Space",
          "CRLF",
          "Line Feed"
        ],
        "required": false
      },
      {
        "name": "Include Alpha",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Extract URLs": {
    "module": "Regex",
    "description": "Extracts Uniform Resource Locators (URLs) from the input. The protocol (http, ftp etc.) is required otherwise there will be far too many false positives.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Display total",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Sort",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Unique",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Fang URL": {
    "module": "Default",
    "description": "Takes a 'Defanged' Universal Resource Locator (URL) and 'Fangs' it. Meaning, it removes the alterations (defanged) that render it useless so that it can be used again.",
    "infoUrl": "https://isc.sans.edu/forums/diary/Defang+all+the+things/22744/",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Fernet Decrypt": {
    "module": "Default",
    "description": "Fernet is a symmetric encryption method which makes sure that the message encrypted cannot be manipulated/read without the key. It uses URL safe encoding for the keys. Fernet uses 128-bit AES in CBC mode and PKCS7 padding, with HMAC using SHA256 for authentication. The IV is created from os.random().<br><br><b>Key:</b> The key must be 32 bytes (256 bits) encoded with Base64.",
    "infoUrl": "https://asecuritysite.com/encryption/fer",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Key",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "Fernet Encrypt": {
    "module": "Default",
    "description": "Fernet is a symmetric encryption method which makes sure that the message encrypted cannot be manipulated/read without the key. It uses URL safe encoding for the keys. Fernet uses 128-bit AES in CBC mode and PKCS7 padding, with HMAC using SHA256 for authentication. The IV is created from os.random().<br><br><b>Key:</b> The key must be 32 bytes (256 bits) encoded with Base64.",
    "infoUrl": "https://asecuritysite.com/encryption/fer",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Key",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "File Tree": {
    "module": "Default",
    "description": "Creates a file tree from a list of file paths (similar to the tree command in Linux)",
    "infoUrl": "https://wikipedia.org/wiki/Tree_(command)",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "File Path Delimiter",
        "type": "string",
        "required": false
      },
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Line feed",
          "CRLF",
          "Space",
          "Comma",
          "Semi-colon",
          "Colon",
          "Nothing (separate chars)"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Filter": {
    "module": "Regex",
    "description": "Splits up the input using the specified delimiter and then filters each branch based on a regular expression.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Line feed",
          "CRLF",
          "Space",
          "Comma",
          "Semi-colon",
          "Colon",
          "Nothing (separate chars)"
        ],
        "required": false
      },
      {
        "name": "Regex",
        "type": "string",
        "required": false
      },
      {
        "name": "Invert condition",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Find / Replace": {
    "module": "Regex",
    "description": "Replaces all occurrences of the first string with the second.<br><br>Includes support for regular expressions (regex), simple strings and extended strings (which support \\\\n, \\\\r, \\\\t, \\\\b, \\\\f and escaped hex bytes using \\\\x notation, e.g. \\\\x00 for a null byte).",
    "infoUrl": "https://wikipedia.org/wiki/Regular_expression",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Find",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Replace",
        "type": "string",
        "required": false
      },
      {
        "name": "Global match",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Case insensitive",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Multiline matching",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Dot matches all",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Fletcher-16 Checksum": {
    "module": "Crypto",
    "description": "The Fletcher checksum is an algorithm for computing a position-dependent checksum devised by John Gould Fletcher at Lawrence Livermore Labs in the late 1970s.<br><br>The objective of the Fletcher checksum was to provide error-detection properties approaching those of a cyclic redundancy check but with the lower computational effort associated with summation techniques.",
    "infoUrl": "https://wikipedia.org/wiki/Fletcher%27s_checksum#Fletcher-16",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Fletcher-32 Checksum": {
    "module": "Crypto",
    "description": "The Fletcher checksum is an algorithm for computing a position-dependent checksum devised by John Gould Fletcher at Lawrence Livermore Labs in the late 1970s.<br><br>The objective of the Fletcher checksum was to provide error-detection properties approaching those of a cyclic redundancy check but with the lower computational effort associated with summation techniques.",
    "infoUrl": "https://wikipedia.org/wiki/Fletcher%27s_checksum#Fletcher-32",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Fletcher-64 Checksum": {
    "module": "Crypto",
    "description": "The Fletcher checksum is an algorithm for computing a position-dependent checksum devised by John Gould Fletcher at Lawrence Livermore Labs in the late 1970s.<br><br>The objective of the Fletcher checksum was to provide error-detection properties approaching those of a cyclic redundancy check but with the lower computational effort associated with summation techniques.",
    "infoUrl": "https://wikipedia.org/wiki/Fletcher%27s_checksum#Fletcher-64",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Fletcher-8 Checksum": {
    "module": "Crypto",
    "description": "The Fletcher checksum is an algorithm for computing a position-dependent checksum devised by John Gould Fletcher at Lawrence Livermore Labs in the late 1970s.<br><br>The objective of the Fletcher checksum was to provide error-detection properties approaching those of a cyclic redundancy check but with the lower computational effort associated with summation techniques.",
    "infoUrl": "https://wikipedia.org/wiki/Fletcher%27s_checksum",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Flip Image": {
    "module": "Image",
    "description": "Flips an image along its X or Y axis.",
    "infoUrl": "",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Axis",
        "type": "enum",
        "options": [
          "Horizontal",
          "Vertical"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Fork": {
    "module": "Default",
    "description": "Split the input data up based on the specified delimiter and run all subsequent operations on each branch separately.<br><br>For example, to decode multiple Base64 strings, enter them all on separate lines then add the 'Fork' and 'From Base64' operations to the recipe. Each string will be decoded separately.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Split delimiter",
        "type": "string",
        "required": false
      },
      {
        "name": "Merge delimiter",
        "type": "string",
        "required": false
      },
      {
        "name": "Ignore errors",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Format MAC addresses": {
    "module": "Default",
    "description": "Displays given MAC addresses in multiple different formats.<br><br>Expects addresses in a list separated by newlines, spaces or commas.<br><br>WARNING: There are no validity checks.",
    "infoUrl": "https://wikipedia.org/wiki/MAC_address#Notational_conventions",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Output case",
        "type": "enum",
        "options": [
          "Both",
          "Upper only",
          "Lower only"
        ],
        "required": false
      },
      {
        "name": "No delimiter",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Dash delimiter",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Colon delimiter",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Cisco style",
        "type": "boolean",
        "required": false
      },
      {
        "name": "IPv6 interface ID",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Frequency distribution": {
    "module": "Default",
    "description": "Displays the distribution of bytes in the data as a graph.",
    "infoUrl": "https://wikipedia.org/wiki/Frequency_distribution",
    "inputType": "ArrayBuffer",
    "outputType": "json",
    "args": [
      {
        "name": "Show 0%s",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Show ASCII",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "From BCD": {
    "module": "Default",
    "description": "Binary-Coded Decimal (BCD) is a class of binary encodings of decimal numbers where each decimal digit is represented by a fixed number of bits, usually four or eight. Special bit patterns are sometimes used for a sign.",
    "infoUrl": "https://wikipedia.org/wiki/Binary-coded_decimal",
    "inputType": "string",
    "outputType": "BigNumber",
    "args": [
      {
        "name": "Scheme",
        "type": "enum",
        "options": [
          "8 4 2 1",
          "7 4 2 1",
          "4 2 2 1",
          "2 4 2 1",
          "8 4 -2 -1",
          "Excess-3",
          "IBM 8 4 2 1"
        ],
        "required": false
      },
      {
        "name": "Packed",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Signed",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Input format",
        "type": "enum",
        "options": [
          "Nibbles",
          "Bytes",
          "Raw"
        ],
        "required": false
      }
    ],
    "checks": [
      {
        "pattern": "^(?:\\d{4} ){3}\\d{4}$",
        "flags": "",
        "args": [
          "8 4 2 1",
          true,
          false,
          "Nibbles"
        ]
      }
    ]
  },
  "From Base": {
    "module": "Default",
    "description": "Converts a number to decimal from a given numerical base.",
    "infoUrl": "https://wikipedia.org/wiki/Radix",
    "inputType": "string",
    "outputType": "BigNumber",
    "args": [
      {
        "name": "Radix",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "From Base32": {
    "module": "Default",
    "description": "Base32 is a notation for encoding arbitrary byte data using a restricted set of symbols that can be conveniently used by humans and processed by computers. It uses a smaller set of characters than Base64, usually the uppercase alphabet and the numbers 2 to 7.",
    "infoUrl": "https://wikipedia.org/wiki/Base32",
    "inputType": "string",
    "outputType": "byteArray",
    "args": [
      {
        "name": "Alphabet",
        "type": "enum",
        "options": [
          "Standard",
          "Hex Extended"
        ],
        "required": false
      },
      {
        "name": "Remove non-alphabet chars",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": [
      {
        "pattern": "^(?:[A-Z2-7]{8})+(?:[A-Z2-7]{2}={6}|[A-Z2-7]{4}={4}|[A-Z2-7]{5}={3}|[A-Z2-7]{7}={1})?$",
        "flags": "",
        "args": [
          "A-Z2-7=",
          false
        ]
      },
      {
        "pattern": "^(?:[0-9A-V]{8})+(?:[0-9A-V]{2}={6}|[0-9A-V]{4}={4}|[0-9A-V]{5}={3}|[0-9A-V]{7}={1})?$",
        "flags": "",
        "args": [
          "0-9A-V=",
          false
        ]
      }
    ]
  },
  "From Base45": {
    "module": "Default",
    "description": "Base45 is a notation for encoding arbitrary byte data using a restricted set of symbols that can be conveniently used by humans and processed by computers. The high number base results in shorter strings than with the decimal or hexadecimal system. Base45 is optimized for usage with QR codes.",
    "infoUrl": "https://wikipedia.org/wiki/List_of_numeral_systems",
    "inputType": "string",
    "outputType": "byteArray",
    "args": [
      {
        "name": "Alphabet",
        "type": "string",
        "required": false
      },
      {
        "name": "Remove non-alphabet chars",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "From Base58": {
    "module": "Default",
    "description": "Base58 (similar to Base64) is a notation for encoding arbitrary byte data. It differs from Base64 by removing easily misread characters (i.e. l, I, 0 and O) to improve human readability.<br><br>This operation decodes data from an ASCII string (with an alphabet of your choosing, presets included) back into its raw form.<br><br>e.g. <code>StV1DL6CwTryKyV</code> becomes <code>hello world</code><br><br>Base58 is commonly used in cryptocurrencies (Bitcoin, Ripple, etc).",
    "infoUrl": "https://wikipedia.org/wiki/Base58",
    "inputType": "string",
    "outputType": "byteArray",
    "args": [
      {
        "name": "Alphabet",
        "type": "enum",
        "options": [
          "Bitcoin",
          "Ripple"
        ],
        "required": false
      },
      {
        "name": "Remove non-alphabet chars",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": [
      {
        "pattern": "^[1-9A-HJ-NP-Za-km-z]{20}$",
        "flags": "",
        "args": [
          "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",
          false
        ]
      },
      {
        "pattern": "^[1-9A-HJ-NP-Za-km-z]{20}$",
        "flags": "",
        "args": [
          "rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz",
          false
        ]
      }
    ]
  },
  "From Base62": {
    "module": "Default",
    "description": "Base62 is a notation for encoding arbitrary byte data using a restricted set of symbols that can be conveniently used by humans and processed by computers. The high number base results in shorter strings than with the decimal or hexadecimal system.",
    "infoUrl": "https://wikipedia.org/wiki/List_of_numeral_systems",
    "inputType": "string",
    "outputType": "byteArray",
    "args": [
      {
        "name": "Alphabet",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "From Base64": {
    "module": "Default",
    "description": "Base64 is a notation for encoding arbitrary byte data using a restricted set of symbols that can be conveniently used by humans and processed by computers.<br><br>This operation decodes data from an ASCII Base64 string back into its raw format.<br><br>e.g. <code>aGVsbG8=</code> becomes <code>hello</code>",
    "infoUrl": "https://wikipedia.org/wiki/Base64",
    "inputType": "string",
    "outputType": "byteArray",
    "args": [
      {
        "name": "Alphabet",
        "type": "enum",
        "options": [
          "Standard (RFC 4648): A-Za-z0-9+/=",
          "URL safe (RFC 4648 §5): A-Za-z0-9-_",
          "Filename safe: A-Za-z0-9+-=",
          "itoa64: ./0-9A-Za-z=",
          "XML: A-Za-z0-9_.",
          "y64: A-Za-z0-9._-",
          "z64: 0-9a-zA-Z+/=",
          "Radix-64 (RFC 4880): 0-9A-Za-z+/=",
          "Uuencoding: [space]-_",
          "Xxencoding: +-0-9A-Za-z",
          "BinHex: !-,-0-689@A-NP-VX-Z[`a-fh-mp-r",
          "ROT13: N-ZA-Mn-za-m0-9+/=",
          "UNIX crypt: ./0-9A-Za-z",
          "Atom128: /128GhIoPQROSTeUbADfgHijKLM+n0pFWXY456xyzB7=39VaqrstJklmNuZvwcdEC",
          "Megan35: 3GHIJKLMNOPQRSTUb=cdefghijklmnopWXYZ/12+406789VaqrstuvwxyzABCDEF5",
          "Zong22: ZKj9n+yf0wDVX1s/5YbdxSo=ILaUpPBCHg8uvNO4klm6iJGhQ7eFrWczAMEq3RTt2",
          "Hazz15: HNO4klm6ij9n+J2hyf0gzA8uvwDEq3X1Q7ZKeFrWcVTts/MRGYbdxSo=ILaUpPBC5"
        ],
        "required": false
      },
      {
        "name": "Remove non-alphabet chars",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Strict mode",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "From Base85": {
    "module": "Default",
    "description": "Base85 (also called Ascii85) is a notation for encoding arbitrary byte data. It is usually more efficient that Base64.<br><br>This operation decodes data from an ASCII string (with an alphabet of your choosing, presets included).<br><br>e.g. <code>BOu!rD]j7BEbo7</code> becomes <code>hello world</code><br><br>Base85 is commonly used in Adobe's PostScript and PDF file formats.",
    "infoUrl": "https://wikipedia.org/wiki/Ascii85",
    "inputType": "string",
    "outputType": "byteArray",
    "args": [],
    "checks": []
  },
  "From Base92": {
    "module": "Default",
    "description": "Base92 is a notation for encoding arbitrary byte data using a restricted set of symbols that can be conveniently used by humans and processed by computers.",
    "infoUrl": "https://wikipedia.org/wiki/List_of_numeral_systems",
    "inputType": "string",
    "outputType": "byteArray",
    "args": [],
    "checks": []
  },
  "From Binary": {
    "module": "Default",
    "description": "Converts a binary string back into its raw form.<br><br>e.g. <code>01001000 01101001</code> becomes <code>Hi</code>",
    "infoUrl": "https://wikipedia.org/wiki/Binary_code",
    "inputType": "string",
    "outputType": "byteArray",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Space",
          "Comma",
          "Semi-colon",
          "Colon",
          "Line feed",
          "CRLF",
          "None"
        ],
        "required": false
      },
      {
        "name": "Byte Length",
        "type": "number",
        "min": 1,
        "required": false
      }
    ],
    "checks": [
      {
        "pattern": "^(?:[01]{8})+$",
        "flags": "",
        "args": [
          "None"
        ]
      },
      {
        "pattern": "^(?:[01]{8})(?: [01]{8})*$",
        "flags": "",
        "args": [
          "Space"
        ]
      },
      {
        "pattern": "^(?:[01]{8})(?:,[01]{8})*$",
        "flags": "",
        "args": [
          "Comma"
        ]
      },
      {
        "pattern": "^(?:[01]{8})(?:;[01]{8})*$",
        "flags": "",
        "args": [
          "Semi-colon"
        ]
      },
      {
        "pattern": "^(?:[01]{8})(?::[01]{8})*$",
        "flags": "",
        "args": [
          "Colon"
        ]
      },
      {
        "pattern": "^(?:[01]{8})(?:\\n[01]{8})*$",
        "flags": "",
        "args": [
          "Line feed"
        ]
      },
      {
        "pattern": "^(?:[01]{8})(?:\\r\\n[01]{8})*$",
        "flags": "",
        "args": [
          "CRLF"
        ]
      }
    ]
  },
  "From Braille": {
    "module": "Default",
    "description": "Converts six-dot braille symbols to text.",
    "infoUrl": "https://wikipedia.org/wiki/Braille",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "From Case Insensitive Regex": {
    "module": "Default",
    "description": "Converts a case-insensitive regex string to a case sensitive regex string (no guarantee on it being the proper original casing) in case the i flag wasn't available at the time but now is, or you need it to be case-sensitive again.<br><br>e.g. <code>[mM][oO][zZ][iI][lL][lL][aA]/[0-9].[0-9] .*</code> becomes <code>Mozilla/[0-9].[0-9] .*</code>",
    "infoUrl": "https://wikipedia.org/wiki/Regular_expression",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "From Charcode": {
    "module": "Default",
    "description": "Converts unicode character codes back into text.<br><br>e.g. <code>0393 03b5 03b9 03ac 20 03c3 03bf 03c5</code> becomes <code>Γειά σου</code>",
    "infoUrl": "https://wikipedia.org/wiki/Plane_(Unicode)",
    "inputType": "string",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Space",
          "Comma",
          "Semi-colon",
          "Colon",
          "Line feed",
          "CRLF"
        ],
        "required": false
      },
      {
        "name": "Base",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "From Decimal": {
    "module": "Default",
    "description": "Converts the data from an ordinal integer array back into its raw form.<br><br>e.g. <code>72 101 108 108 111</code> becomes <code>Hello</code>",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "byteArray",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Space",
          "Comma",
          "Semi-colon",
          "Colon",
          "Line feed",
          "CRLF"
        ],
        "required": false
      },
      {
        "name": "Support signed values",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": [
      {
        "pattern": "^(?:\\d{1,2}|1\\d{2}|2[0-4]\\d|25[0-5])(?: (?:\\d{1,2}|1\\d{2}|2[0-4]\\d|25[0-5]))*$",
        "flags": "",
        "args": [
          "Space",
          false
        ]
      },
      {
        "pattern": "^(?:\\d{1,2}|1\\d{2}|2[0-4]\\d|25[0-5])(?:,(?:\\d{1,2}|1\\d{2}|2[0-4]\\d|25[0-5]))*$",
        "flags": "",
        "args": [
          "Comma",
          false
        ]
      },
      {
        "pattern": "^(?:\\d{1,2}|1\\d{2}|2[0-4]\\d|25[0-5])(?:;(?:\\d{1,2}|1\\d{2}|2[0-4]\\d|25[0-5]))*$",
        "flags": "",
        "args": [
          "Semi-colon",
          false
        ]
      },
      {
        "pattern": "^(?:\\d{1,2}|1\\d{2}|2[0-4]\\d|25[0-5])(?::(?:\\d{1,2}|1\\d{2}|2[0-4]\\d|25[0-5]))*$",
        "flags": "",
        "args": [
          "Colon",
          false
        ]
      },
      {
        "pattern": "^(?:\\d{1,2}|1\\d{2}|2[0-4]\\d|25[0-5])(?:\\n(?:\\d{1,2}|1\\d{2}|2[0-4]\\d|25[0-5]))*$",
        "flags": "",
        "args": [
          "Line feed",
          false
        ]
      },
      {
        "pattern": "^(?:\\d{1,2}|1\\d{2}|2[0-4]\\d|25[0-5])(?:\\r\\n(?:\\d{1,2}|1\\d{2}|2[0-4]\\d|25[0-5]))*$",
        "flags": "",
        "args": [
          "CRLF",
          false
        ]
      }
    ]
  },
  "From Float": {
    "module": "Default",
    "description": "Convert from IEEE754 Floating Point Numbers",
    "infoUrl": "https://wikipedia.org/wiki/IEEE_754",
    "inputType": "string",
    "outputType": "byteArray",
    "args": [
      {
        "name": "Endianness",
        "type": "enum",
        "options": [
          "Big Endian",
          "Little Endian"
        ],
        "required": false
      },
      {
        "name": "Size",
        "type": "enum",
        "options": [
          "Float (4 bytes)",
          "Double (8 bytes)"
        ],
        "required": false
      },
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Space",
          "Comma",
          "Semi-colon",
          "Colon",
          "Line feed",
          "CRLF"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "From HTML Entity": {
    "module": "Encodings",
    "description": "Converts HTML entities back to characters<br><br>e.g. <code>&amp;<span>amp;</span></code> becomes <code>&amp;</code>",
    "infoUrl": "https://wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": [
      {
        "pattern": "&(?:#\\d{2,3}|#x[\\da-f]{2}|[a-z]{2,6});",
        "flags": "i",
        "args": []
      }
    ]
  },
  "From Hex": {
    "module": "Default",
    "description": "Converts a hexadecimal byte string back into its raw value.<br><br>e.g. <code>ce 93 ce b5 ce b9 ce ac 20 cf 83 ce bf cf 85 0a</code> becomes the UTF-8 encoded string <code>Γειά σου</code>",
    "infoUrl": "https://wikipedia.org/wiki/Hexadecimal",
    "inputType": "string",
    "outputType": "byteArray",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Auto",
          "Space",
          "Percent",
          "Comma",
          "Semi-colon",
          "Colon",
          "Line feed",
          "CRLF",
          "0x",
          "0x with comma",
          "\\x",
          "None"
        ],
        "required": false
      }
    ],
    "checks": [
      {
        "pattern": "^(?:[\\dA-F]{2})+$",
        "flags": "i",
        "args": [
          "None"
        ]
      },
      {
        "pattern": "^[\\dA-F]{2}(?: [\\dA-F]{2})*$",
        "flags": "i",
        "args": [
          "Space"
        ]
      },
      {
        "pattern": "^[\\dA-F]{2}(?:,[\\dA-F]{2})*$",
        "flags": "i",
        "args": [
          "Comma"
        ]
      },
      {
        "pattern": "^[\\dA-F]{2}(?:;[\\dA-F]{2})*$",
        "flags": "i",
        "args": [
          "Semi-colon"
        ]
      },
      {
        "pattern": "^[\\dA-F]{2}(?::[\\dA-F]{2})*$",
        "flags": "i",
        "args": [
          "Colon"
        ]
      },
      {
        "pattern": "^[\\dA-F]{2}(?:\\n[\\dA-F]{2})*$",
        "flags": "i",
        "args": [
          "Line feed"
        ]
      },
      {
        "pattern": "^[\\dA-F]{2}(?:\\r\\n[\\dA-F]{2})*$",
        "flags": "i",
        "args": [
          "CRLF"
        ]
      },
      {
        "pattern": "^(?:0x[\\dA-F]{2})+$",
        "flags": "i",
        "args": [
          "0x"
        ]
      },
      {
        "pattern": "^0x[\\dA-F]{2}(?:,0x[\\dA-F]{2})*$",
        "flags": "i",
        "args": [
          "0x with comma"
        ]
      },
      {
        "pattern": "^(?:\\\\x[\\dA-F]{2})+$",
        "flags": "i",
        "args": [
          "\\x"
        ]
      }
    ]
  },
  "From Hex Content": {
    "module": "Default",
    "description": "Translates hexadecimal bytes in text back to raw bytes. This format is used by SNORT for representing hex within ASCII text.<br><br>e.g. <code>foo|3d|bar</code> becomes <code>foo=bar</code>.",
    "infoUrl": "http://manual-snort-org.s3-website-us-east-1.amazonaws.com/node32.html#SECTION00451000000000000000",
    "inputType": "string",
    "outputType": "byteArray",
    "args": [],
    "checks": [
      {
        "pattern": "\\|([\\da-f]{2} ?)+\\|",
        "flags": "i",
        "args": []
      }
    ]
  },
  "From Hexdump": {
    "module": "Default",
    "description": "Attempts to convert a hexdump back into raw data. This operation supports many different hexdump variations, but probably not all. Make sure you verify that the data it gives you is correct before continuing analysis.",
    "infoUrl": "https://wikipedia.org/wiki/Hex_dump",
    "inputType": "string",
    "outputType": "byteArray",
    "args": [],
    "checks": [
      {
        "pattern": "^(?:(?:[\\dA-F]{4,16}h?:?)?[ \\t]*((?:[\\dA-F]{2} ){1,8}(?:[ \\t]|[\\dA-F]{2}-)(?:[\\dA-F]{2} ){1,8}|(?:[\\dA-F]{4} )*[\\dA-F]{4}|(?:[\\dA-F]{2} )*[\\dA-F]{2})[^\\n]*\\n?){2}$",
        "flags": "i",
        "args": []
      }
    ]
  },
  "From MessagePack": {
    "module": "Code",
    "description": "Converts MessagePack encoded data to JSON. MessagePack is a computer data interchange format. It is a binary form for representing simple data structures like arrays and associative arrays.",
    "infoUrl": "https://wikipedia.org/wiki/MessagePack",
    "inputType": "ArrayBuffer",
    "outputType": "JSON",
    "args": [],
    "checks": []
  },
  "From Modhex": {
    "module": "Default",
    "description": "Converts a modhex byte string back into its raw value.",
    "infoUrl": "https://en.wikipedia.org/wiki/YubiKey#ModHex",
    "inputType": "string",
    "outputType": "byteArray",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Auto",
          "Space",
          "Percent",
          "Comma",
          "Semi-colon",
          "Colon",
          "Line feed",
          "CRLF",
          "None"
        ],
        "required": false
      }
    ],
    "checks": [
      {
        "pattern": "^(?:[cbdefghijklnrtuv]{2})+$",
        "flags": "i",
        "args": [
          "None"
        ]
      },
      {
        "pattern": "^[cbdefghijklnrtuv]{2}(?: [cbdefghijklnrtuv]{2})*$",
        "flags": "i",
        "args": [
          "Space"
        ]
      },
      {
        "pattern": "^[cbdefghijklnrtuv]{2}(?:,[cbdefghijklnrtuv]{2})*$",
        "flags": "i",
        "args": [
          "Comma"
        ]
      },
      {
        "pattern": "^[cbdefghijklnrtuv]{2}(?:;[cbdefghijklnrtuv]{2})*$",
        "flags": "i",
        "args": [
          "Semi-colon"
        ]
      },
      {
        "pattern": "^[cbdefghijklnrtuv]{2}(?::[cbdefghijklnrtuv]{2})*$",
        "flags": "i",
        "args": [
          "Colon"
        ]
      },
      {
        "pattern": "^[cbdefghijklnrtuv]{2}(?:\\n[cbdefghijklnrtuv]{2})*$",
        "flags": "i",
        "args": [
          "Line feed"
        ]
      },
      {
        "pattern": "^[cbdefghijklnrtuv]{2}(?:\\r\\n[cbdefghijklnrtuv]{2})*$",
        "flags": "i",
        "args": [
          "CRLF"
        ]
      }
    ]
  },
  "From Morse Code": {
    "module": "Default",
    "description": "Translates Morse Code into (upper case) alphanumeric characters.",
    "infoUrl": "https://wikipedia.org/wiki/Morse_code",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Letter delimiter",
        "type": "enum",
        "options": [
          "Space",
          "Line feed",
          "CRLF",
          "Forward slash",
          "Backslash",
          "Comma",
          "Semi-colon",
          "Colon"
        ],
        "required": false
      },
      {
        "name": "Word delimiter",
        "type": "enum",
        "options": [
          "Line feed",
          "CRLF",
          "Forward slash",
          "Backslash",
          "Comma",
          "Semi-colon",
          "Colon"
        ],
        "required": false
      }
    ],
    "checks": [
      {
        "pattern": "(?:^[-. \\n]{5}$|^[_. \\n]{5}$|^(?:dash|dot| |\\n){5}$)",
        "flags": "i",
        "args": [
          "Space",
          "Line feed"
        ]
      }
    ]
  },
  "From Octal": {
    "module": "Default",
    "description": "Converts an octal byte string back into its raw value.<br><br>e.g. <code>316 223 316 265 316 271 316 254 40 317 203 316 277 317 205</code> becomes the UTF-8 encoded string <code>Γειά σου</code>",
    "infoUrl": "https://wikipedia.org/wiki/Octal",
    "inputType": "string",
    "outputType": "byteArray",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Space",
          "Comma",
          "Semi-colon",
          "Colon",
          "Line feed",
          "CRLF"
        ],
        "required": false
      }
    ],
    "checks": [
      {
        "pattern": "^(?:[0-7]{1,2}|[123][0-7]{2})(?: (?:[0-7]{1,2}|[123][0-7]{2}))*$",
        "flags": "",
        "args": [
          "Space"
        ]
      },
      {
        "pattern": "^(?:[0-7]{1,2}|[123][0-7]{2})(?:,(?:[0-7]{1,2}|[123][0-7]{2}))*$",
        "flags": "",
        "args": [
          "Comma"
        ]
      },
      {
        "pattern": "^(?:[0-7]{1,2}|[123][0-7]{2})(?:;(?:[0-7]{1,2}|[123][0-7]{2}))*$",
        "flags": "",
        "args": [
          "Semi-colon"
        ]
      },
      {
        "pattern": "^(?:[0-7]{1,2}|[123][0-7]{2})(?::(?:[0-7]{1,2}|[123][0-7]{2}))*$",
        "flags": "",
        "args": [
          "Colon"
        ]
      },
      {
        "pattern": "^(?:[0-7]{1,2}|[123][0-7]{2})(?:\\n(?:[0-7]{1,2}|[123][0-7]{2}))*$",
        "flags": "",
        "args": [
          "Line feed"
        ]
      },
      {
        "pattern": "^(?:[0-7]{1,2}|[123][0-7]{2})(?:\\r\\n(?:[0-7]{1,2}|[123][0-7]{2}))*$",
        "flags": "",
        "args": [
          "CRLF"
        ]
      }
    ]
  },
  "From Punycode": {
    "module": "Encodings",
    "description": "Punycode is a way to represent Unicode with the limited character subset of ASCII supported by the Domain Name System.<br><br>e.g. <code>mnchen-3ya</code> decodes to <code>m\\xfcnchen</code>",
    "infoUrl": "https://wikipedia.org/wiki/Punycode",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Internationalised domain name",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "From Quoted Printable": {
    "module": "Default",
    "description": "Converts QP-encoded text back to standard text.<br><br>e.g. The quoted-printable encoded string <code>hello=20world</code> becomes <code>hello world</code>",
    "infoUrl": "https://wikipedia.org/wiki/Quoted-printable",
    "inputType": "string",
    "outputType": "byteArray",
    "args": [],
    "checks": [
      {
        "pattern": "^[\\x21-\\x3d\\x3f-\\x7e \\t]{0,76}(?:=[\\da-f]{2}|=\\r?\\n)(?:[\\x21-\\x3d\\x3f-\\x7e \\t]|=[\\da-f]{2}|=\\r?\\n)*$",
        "flags": "i",
        "args": []
      }
    ]
  },
  "From UNIX Timestamp": {
    "module": "Default",
    "description": "Converts a UNIX timestamp to a datetime string.<br><br>e.g. <code>978346800</code> becomes <code>Mon 1 January 2001 11:00:00 UTC</code><br><br>A UNIX timestamp is a 32-bit value representing the number of seconds since January 1, 1970 UTC (the UNIX epoch).",
    "infoUrl": "https://wikipedia.org/wiki/Unix_time",
    "inputType": "number",
    "outputType": "string",
    "args": [
      {
        "name": "Units",
        "type": "enum",
        "options": [
          "Seconds (s)",
          "Milliseconds (ms)",
          "Microseconds (μs)",
          "Nanoseconds (ns)"
        ],
        "required": false
      }
    ],
    "checks": [
      {
        "pattern": "^1?\\d{9}$",
        "flags": "",
        "args": [
          "Seconds (s)"
        ]
      },
      {
        "pattern": "^1?\\d{12}$",
        "flags": "",
        "args": [
          "Milliseconds (ms)"
        ]
      },
      {
        "pattern": "^1?\\d{15}$",
        "flags": "",
        "args": [
          "Microseconds (μs)"
        ]
      },
      {
        "pattern": "^1?\\d{18}$",
        "flags": "",
        "args": [
          "Nanoseconds (ns)"
        ]
      }
    ]
  },
  "Fuzzy Match": {
    "module": "Default",
    "description": "Conducts a fuzzy search to find a pattern within the input based on weighted criteria.<br><br>e.g. A search for <code>dpan</code> will match on <code><b>D</b>on't <b>Pan</b>ic</code>",
    "infoUrl": "https://wikipedia.org/wiki/Fuzzy_matching_(computer-assisted_translation)",
    "inputType": "string",
    "outputType": "html",
    "args": [],
    "checks": []
  },
  "GOST Decrypt": {
    "module": "Ciphers",
    "description": "The GOST block cipher (Magma), defined in the standard GOST 28147-89 (RFC 5830), is a Soviet and Russian government standard symmetric key block cipher with a block size of 64 bits. The original standard, published in 1989, did not give the cipher any name, but the most recent revision of the standard, GOST R 34.12-2015 (RFC 7801, RFC 8891), specifies that it may be referred to as Magma. The GOST hash function is based on this cipher. The new standard also specifies a new 128-bit block cipher called Kuznyechik.<br><br>Developed in the 1970s, the standard had been marked 'Top Secret' and then downgraded to 'Secret' in 1990. Shortly after the dissolution of the USSR, it was declassified and it was released to the public in 1994. GOST 28147 was a Soviet alternative to the United States standard algorithm, DES. Thus, the two are very similar in structure.",
    "infoUrl": "https://wikipedia.org/wiki/GOST_(block_cipher)",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "GOST Encrypt": {
    "module": "Ciphers",
    "description": "The GOST block cipher (Magma), defined in the standard GOST 28147-89 (RFC 5830), is a Soviet and Russian government standard symmetric key block cipher with a block size of 64 bits. The original standard, published in 1989, did not give the cipher any name, but the most recent revision of the standard, GOST R 34.12-2015 (RFC 7801, RFC 8891), specifies that it may be referred to as Magma. The GOST hash function is based on this cipher. The new standard also specifies a new 128-bit block cipher called Kuznyechik.<br><br>Developed in the 1970s, the standard had been marked 'Top Secret' and then downgraded to 'Secret' in 1990. Shortly after the dissolution of the USSR, it was declassified and it was released to the public in 1994. GOST 28147 was a Soviet alternative to the United States standard algorithm, DES. Thus, the two are very similar in structure.",
    "infoUrl": "https://wikipedia.org/wiki/GOST_(block_cipher)",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "GOST Hash": {
    "module": "Hashing",
    "description": "The GOST hash function, defined in the standards GOST R 34.11-94 and GOST 34.311-95 is a 256-bit cryptographic hash function. It was initially defined in the Russian national standard GOST R 34.11-94 <i>Information Technology – Cryptographic Information Security – Hash Function</i>. The equivalent standard used by other member-states of the CIS is GOST 34.311-95.<br><br>This function must not be confused with a different Streebog hash function, which is defined in the new revision of the standard GOST R 34.11-2012.<br><br>The GOST hash function is based on the GOST block cipher.",
    "infoUrl": "https://wikipedia.org/wiki/GOST_(hash_function)",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Algorithm",
        "type": "enum",
        "options": [
          "GOST 28147 (1994)",
          "GOST R 34.11 (Streebog, 2012)"
        ],
        "required": false
      },
      {
        "name": "Digest length",
        "type": "enum",
        "options": [
          "256",
          "512"
        ],
        "required": false
      },
      {
        "name": "sBox",
        "type": "enum",
        "options": [
          "E-TEST",
          "E-A",
          "E-B",
          "E-C",
          "E-D",
          "E-SC",
          "E-Z",
          "D-TEST",
          "D-A",
          "D-SC"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "GOST Key Unwrap": {
    "module": "Ciphers",
    "description": "A decryptor for keys wrapped using one of the GOST block ciphers.",
    "infoUrl": "https://wikipedia.org/wiki/GOST_(block_cipher)",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "GOST Key Wrap": {
    "module": "Ciphers",
    "description": "A key wrapping algorithm for protecting keys in untrusted storage using one of the GOST block cipers.",
    "infoUrl": "https://wikipedia.org/wiki/GOST_(block_cipher)",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "GOST Sign": {
    "module": "Ciphers",
    "description": "Sign a plaintext message using one of the GOST block ciphers.",
    "infoUrl": "https://wikipedia.org/wiki/GOST_(block_cipher)",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "GOST Verify": {
    "module": "Ciphers",
    "description": "Verify the signature of a plaintext message using one of the GOST block ciphers. Enter the signature in the MAC field.",
    "infoUrl": "https://wikipedia.org/wiki/GOST_(block_cipher)",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Generate all checksums": {
    "module": "Crypto",
    "description": "Generates all available checksums for the input.",
    "infoUrl": "https://wikipedia.org/wiki/Checksum",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Length (bits)",
        "type": "enum",
        "options": [
          "All",
          "3",
          "4",
          "5",
          "6",
          "7",
          "8",
          "10",
          "11",
          "12",
          "13",
          "14",
          "15",
          "16",
          "17",
          "21",
          "24",
          "30",
          "31",
          "32",
          "40",
          "64",
          "82"
        ],
        "required": false
      },
      {
        "name": "Include names",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Generate all hashes": {
    "module": "Crypto",
    "description": "Generates all available hashes and checksums for the input.",
    "infoUrl": "https://wikipedia.org/wiki/Comparison_of_cryptographic_hash_functions",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Length (bits)",
        "type": "enum",
        "options": [
          "All",
          "128",
          "160",
          "224",
          "256",
          "320",
          "384",
          "512"
        ],
        "required": false
      },
      {
        "name": "Include names",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Generate De Bruijn Sequence": {
    "module": "Default",
    "description": "Generates rolling keycode combinations given a certain alphabet size and key length.",
    "infoUrl": "https://wikipedia.org/wiki/De_Bruijn_sequence",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Alphabet size (k)",
        "type": "number",
        "required": false
      },
      {
        "name": "Key length (n)",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "Generate ECDSA Key Pair": {
    "module": "Ciphers",
    "description": null,
    "infoUrl": "https://wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Elliptic Curve",
        "type": "enum",
        "options": [
          "P-256",
          "P-384",
          "P-521"
        ],
        "required": false
      },
      {
        "name": "Output Format",
        "type": "enum",
        "options": [
          "PEM",
          "DER",
          "JWK"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Generate HOTP": {
    "module": "Default",
    "description": "The HMAC-based One-Time Password algorithm (HOTP) is an algorithm that computes a one-time password from a shared secret key and an incrementing counter. It has been adopted as Internet Engineering Task Force standard RFC 4226, is the cornerstone of Initiative For Open Authentication (OAUTH), and is used in a number of two-factor authentication systems.<br><br>Enter the secret as the input or leave it blank for a random secret to be generated.",
    "infoUrl": "https://wikipedia.org/wiki/HMAC-based_One-time_Password_algorithm",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Name",
        "type": "string",
        "required": false
      },
      {
        "name": "Code length",
        "type": "number",
        "required": false
      },
      {
        "name": "Counter",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "Generate Image": {
    "module": "Image",
    "description": "Generates an image using the input as pixel values.",
    "infoUrl": "",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Mode",
        "type": "enum",
        "options": [
          "Greyscale",
          "RG",
          "RGB",
          "RGBA",
          "Bits"
        ],
        "required": false
      },
      {
        "name": "Pixel Scale Factor",
        "type": "number",
        "required": false
      },
      {
        "name": "Pixels per row",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "Generate Lorem Ipsum": {
    "module": "Default",
    "description": "Generate varying length lorem ipsum placeholder text.",
    "infoUrl": "https://wikipedia.org/wiki/Lorem_ipsum",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Length",
        "type": "number",
        "required": false
      },
      {
        "name": "Length in",
        "type": "enum",
        "options": [
          "Paragraphs",
          "Sentences",
          "Words",
          "Bytes"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Generate PGP Key Pair": {
    "module": "PGP",
    "description": null,
    "infoUrl": "https://wikipedia.org/wiki/Pretty_Good_Privacy",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Key type",
        "type": "enum",
        "options": [
          "RSA-1024",
          "RSA-2048",
          "RSA-4096",
          "ECC-256",
          "ECC-384",
          "ECC-521"
        ],
        "required": false
      },
      {
        "name": "Password (optional)",
        "type": "string",
        "required": false
      },
      {
        "name": "Name (optional)",
        "type": "string",
        "required": false
      },
      {
        "name": "Email (optional)",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "Generate QR Code": {
    "module": "Image",
    "description": "Generates a Quick Response (QR) code from the input text.<br><br>A QR code is a type of matrix barcode (or two-dimensional barcode) first designed in 1994 for the automotive industry in Japan. A barcode is a machine-readable optical label that contains information about the item to which it is attached.",
    "infoUrl": "https://wikipedia.org/wiki/QR_code",
    "inputType": "string",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Image Format",
        "type": "enum",
        "options": [
          "PNG",
          "SVG",
          "EPS",
          "PDF"
        ],
        "required": false
      },
      {
        "name": "Module size (px)",
        "type": "number",
        "min": 1,
        "required": false
      },
      {
        "name": "Margin (num modules)",
        "type": "number",
        "min": 0,
        "required": false
      },
      {
        "name": "Error correction",
        "type": "enum",
        "options": [
          "Low",
          "Medium",
          "Quartile",
          "High"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Generate RSA Key Pair": {
    "module": "Ciphers",
    "description": null,
    "infoUrl": "https://wikipedia.org/wiki/RSA_(cryptosystem)",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "RSA Key Length",
        "type": "enum",
        "options": [
          "1024",
          "2048",
          "4096"
        ],
        "required": false
      },
      {
        "name": "Output Format",
        "type": "enum",
        "options": [
          "PEM",
          "JSON",
          "DER"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Generate TOTP": {
    "module": "Default",
    "description": "The Time-based One-Time Password algorithm (TOTP) is an algorithm that computes a one-time password from a shared secret key and the current time. It has been adopted as Internet Engineering Task Force standard RFC 6238, is the cornerstone of Initiative For Open Authentication (OAUTH), and is used in a number of two-factor authentication systems. A TOTP is an HOTP where the counter is the current time.<br><br>Enter the secret as the input or leave it blank for a random secret to be generated. T0 and T1 are in seconds.",
    "infoUrl": "https://wikipedia.org/wiki/Time-based_One-time_Password_algorithm",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Name",
        "type": "string",
        "required": false
      },
      {
        "name": "Code length",
        "type": "number",
        "required": false
      },
      {
        "name": "Epoch offset (T0)",
        "type": "number",
        "required": false
      },
      {
        "name": "Interval (T1)",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "Generate UUID": {
    "module": "Crypto",
    "description": "Generates an RFC 9562 (formerly RFC 4122) compliant Universally Unique Identifier (UUID), \" +\n            \"also known as a Globally Unique Identifier (GUID).<br>\" +\n            \"<br>\" +\n            \"We currently support generating the following UUID versions:<br>\" +\n            \"<ul>\" +\n            \"<li><strong>v1</strong>: Timestamp-based</li>\" +\n            \"<li><strong>v3</strong>: Namespace w/ MD5</li>\" +\n            \"<li><strong>v4</strong>: Random (default)</li>\" +\n            \"<li><strong>v5</strong>: Namespace w/ SHA-1</li>\" +\n            \"<li><strong>v6</strong>: Timestamp, reordered</li>\" +\n            \"<li><strong>v7</strong>: Unix Epoch time-based</li>\" +\n            \"</ul>\" +\n            \"UUIDs are generated using the <a href='https://npmjs.org/uuid/'><code>uuid</code><a> package.<br>",
    "infoUrl": "https://wikipedia.org/wiki/Universally_unique_identifier",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Generic Code Beautify": {
    "module": "Code",
    "description": "Attempts to pretty print C-style languages such as C, C++, C#, Java, PHP, JavaScript etc.<br><br>This will not do a perfect job, and the resulting code may not work any more. This operation is designed purely to make obfuscated or minified code more easy to read and understand.<br><br>Things which will not work properly:<ul><li>For loop formatting</li><li>Do-While loop formatting</li><li>Switch/Case indentation</li><li>Certain bit shift operators</li></ul>",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Get All Casings": {
    "module": "Default",
    "description": "Outputs all possible casing variations of a string.",
    "infoUrl": "",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Get Time": {
    "module": "Default",
    "description": "Generates a timestamp showing the amount of time since the UNIX epoch (1970-01-01 00:00:00 UTC). Uses the W3C High Resolution Time API.",
    "infoUrl": "https://wikipedia.org/wiki/Unix_time",
    "inputType": "string",
    "outputType": "number",
    "args": [
      {
        "name": "Granularity",
        "type": "enum",
        "options": [
          "Seconds (s)",
          "Milliseconds (ms)",
          "Microseconds (μs)",
          "Nanoseconds (ns)"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Group IP addresses": {
    "module": "Default",
    "description": "Groups a list of IP addresses into subnets. Supports both IPv4 and IPv6 addresses.",
    "infoUrl": "https://wikipedia.org/wiki/Subnetwork",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Line feed",
          "CRLF",
          "Space",
          "Comma",
          "Semi-colon"
        ],
        "required": false
      },
      {
        "name": "Subnet (CIDR)",
        "type": "number",
        "required": false
      },
      {
        "name": "Only show the subnets",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Gunzip": {
    "module": "Compression",
    "description": "Decompresses data which has been compressed using the deflate algorithm with gzip headers.",
    "infoUrl": "https://wikipedia.org/wiki/Gzip",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [],
    "checks": [
      {
        "pattern": "^\\x1f\\x8b\\x08",
        "flags": "",
        "args": []
      }
    ]
  },
  "Gzip": {
    "module": "Compression",
    "description": "Compresses data using the deflate algorithm with gzip headers.",
    "infoUrl": "https://wikipedia.org/wiki/Gzip",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Compression type",
        "type": "enum",
        "options": [
          "Dynamic Huffman Coding",
          "Fixed Huffman Coding",
          "None (Store)"
        ],
        "required": false
      },
      {
        "name": "Filename (optional)",
        "type": "string",
        "required": false
      },
      {
        "name": "Comment (optional)",
        "type": "string",
        "required": false
      },
      {
        "name": "Include file checksum",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "HAS-160": {
    "module": "Crypto",
    "description": "HAS-160 is a cryptographic hash function designed for use with the Korean KCDSA digital signature algorithm. It is derived from SHA-1, with assorted changes intended to increase its security. It produces a 160-bit output.<br><br>HAS-160 is used in the same way as SHA-1. First it divides input in blocks of 512 bits each and pads the final block. A digest function updates the intermediate hash value by processing the input blocks in turn.<br><br>The message digest algorithm consists, by default, of 80 rounds.",
    "infoUrl": "https://wikipedia.org/wiki/HAS-160",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Rounds",
        "type": "number",
        "min": 1,
        "max": 80,
        "required": false
      }
    ],
    "checks": []
  },
  "HASSH Client Fingerprint": {
    "module": "Crypto",
    "description": "Generates a HASSH fingerprint to help identify SSH clients based on hashing together values from the Client Key Exchange Init message.<br><br>Input: A hex stream of the SSH_MSG_KEXINIT packet application layer from Client to Server.",
    "infoUrl": "https://engineering.salesforce.com/open-sourcing-hassh-abed3ae5044c",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Input format",
        "type": "enum",
        "options": [
          "Hex",
          "Base64",
          "Raw"
        ],
        "required": false
      },
      {
        "name": "Output format",
        "type": "enum",
        "options": [
          "Hash digest",
          "HASSH algorithms string",
          "Full details"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "HASSH Server Fingerprint": {
    "module": "Crypto",
    "description": "Generates a HASSH fingerprint to help identify SSH servers based on hashing together values from the Server Key Exchange Init message.<br><br>Input: A hex stream of the SSH_MSG_KEXINIT packet application layer from Server to Client.",
    "infoUrl": "https://engineering.salesforce.com/open-sourcing-hassh-abed3ae5044c",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Input format",
        "type": "enum",
        "options": [
          "Hex",
          "Base64",
          "Raw"
        ],
        "required": false
      },
      {
        "name": "Output format",
        "type": "enum",
        "options": [
          "Hash digest",
          "HASSH algorithms string",
          "Full details"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "HMAC": {
    "module": "Crypto",
    "description": "Keyed-Hash Message Authentication Codes (HMAC) are a mechanism for message authentication using cryptographic hash functions.",
    "infoUrl": "https://wikipedia.org/wiki/HMAC",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Key",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Hashing function",
        "type": "enum",
        "options": [
          "MD2",
          "MD4",
          "MD5",
          "SHA0",
          "SHA1",
          "SHA224",
          "SHA256",
          "SHA384",
          "SHA512",
          "SHA512/224",
          "SHA512/256",
          "RIPEMD128",
          "RIPEMD160",
          "RIPEMD256",
          "RIPEMD320",
          "HAS160",
          "Whirlpool",
          "Whirlpool-0",
          "Whirlpool-T",
          "Snefru"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "HTML To Text": {
    "module": "Default",
    "description": "Converts an HTML output from an operation to a readable string instead of being rendered in the DOM.",
    "infoUrl": "",
    "inputType": "html",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "HTTP request": {
    "module": "Default",
    "description": null,
    "infoUrl": "https://wikipedia.org/wiki/List_of_HTTP_header_fields#Request_fields",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Method",
        "type": "enum",
        "options": [
          "GET",
          "POST",
          "HEAD",
          "PUT",
          "PATCH",
          "DELETE",
          "CONNECT",
          "TRACE",
          "OPTIONS"
        ],
        "required": false
      },
      {
        "name": "URL",
        "type": "string",
        "required": false
      },
      {
        "name": "Headers",
        "type": "string",
        "required": false
      },
      {
        "name": "Mode",
        "type": "enum",
        "options": [
          "Cross-Origin Resource Sharing",
          "No CORS (limited to HEAD, GET or POST)"
        ],
        "required": false
      },
      {
        "name": "Show response metadata",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Hamming Distance": {
    "module": "Default",
    "description": "In information theory, the Hamming distance between two strings of equal length is the number of positions at which the corresponding symbols are different. In other words, it measures the minimum number of substitutions required to change one string into the other, or the minimum number of errors that could have transformed one string into the other. In a more general context, the Hamming distance is one of several string metrics for measuring the edit distance between two sequences.",
    "infoUrl": "https://wikipedia.org/wiki/Hamming_distance",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Delimiter",
        "type": "string",
        "required": false
      },
      {
        "name": "Unit",
        "type": "enum",
        "options": [
          "Byte",
          "Bit"
        ],
        "required": false
      },
      {
        "name": "Input type",
        "type": "enum",
        "options": [
          "Raw string",
          "Hex"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Haversine distance": {
    "module": "Default",
    "description": "Returns the distance between two pairs of GPS latitude and longitude co-ordinates in metres.<br><br>e.g. <code>51.487263,-0.124323, 38.9517,-77.1467</code>",
    "infoUrl": "https://wikipedia.org/wiki/Haversine_formula",
    "inputType": "string",
    "outputType": "number",
    "args": [],
    "checks": []
  },
  "Head": {
    "module": "Default",
    "description": "Like the UNIX head utility.<br>Gets the first n lines.<br>You can select all but the last n lines by entering a negative value for n.<br>The delimiter can be changed so that instead of lines, fields (i.e. commas) are selected instead.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Line feed",
          "CRLF",
          "Space",
          "Comma",
          "Semi-colon",
          "Colon",
          "Nothing (separate chars)"
        ],
        "required": false
      },
      {
        "name": "Number",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "Heatmap chart": {
    "module": "Charts",
    "description": "A heatmap is a graphical representation of data where the individual values contained in a matrix are represented as colors.",
    "infoUrl": "https://wikipedia.org/wiki/Heat_map",
    "inputType": "string",
    "outputType": "html",
    "args": [],
    "checks": []
  },
  "Hex Density chart": {
    "module": "Charts",
    "description": "Hex density charts are used in a similar way to scatter charts, however rather than rendering tens of thousands of points, it groups the points into a few hundred hexagons to show the distribution.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "html",
    "args": [],
    "checks": []
  },
  "Hex to Object Identifier": {
    "module": "PublicKey",
    "description": "Converts a hexadecimal string into an object identifier (OID).",
    "infoUrl": "https://wikipedia.org/wiki/Object_identifier",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Hex to PEM": {
    "module": "PublicKey",
    "description": "Converts a hexadecimal DER (Distinguished Encoding Rules) string into PEM (Privacy Enhanced Mail) format.",
    "infoUrl": "https://wikipedia.org/wiki/Privacy-Enhanced_Mail",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Header string",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "IPv6 Transition Addresses": {
    "module": "Default",
    "description": "Converts IPv4 addresses to their IPv6 Transition addresses. IPv6 Transition addresses can also be converted back into their original IPv4 address. MAC addresses can also be converted into the EUI-64 format, this can them be appended to your IPv6 /64 range to obtain a full /128 address.<br><br>Transition technologies enable translation between IPv4 and IPv6 addresses or tunneling to allow traffic to pass through the incompatible network, allowing the two standards to coexist.<br><br>Only /24 ranges and currently handled. Remove headers to easily copy out results.",
    "infoUrl": "https://wikipedia.org/wiki/IPv6_transition_mechanism",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Ignore ranges",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Remove headers",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Image Brightness / Contrast": {
    "module": "Image",
    "description": "Adjust the brightness or contrast of an image.",
    "infoUrl": "",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Brightness",
        "type": "number",
        "min": -100,
        "max": 100,
        "required": false
      },
      {
        "name": "Contrast",
        "type": "number",
        "min": -100,
        "max": 100,
        "required": false
      }
    ],
    "checks": []
  },
  "Image Filter": {
    "module": "Image",
    "description": "Applies a greyscale or sepia filter to an image.",
    "infoUrl": "",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Filter type",
        "type": "enum",
        "options": [
          "Greyscale",
          "Sepia"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Image Hue/Saturation/Lightness": {
    "module": "Image",
    "description": "Adjusts the hue / saturation / lightness (HSL) values of an image.",
    "infoUrl": "",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Hue",
        "type": "number",
        "min": -360,
        "max": 360,
        "required": false
      },
      {
        "name": "Saturation",
        "type": "number",
        "min": -100,
        "max": 100,
        "required": false
      },
      {
        "name": "Lightness",
        "type": "number",
        "min": -100,
        "max": 100,
        "required": false
      }
    ],
    "checks": []
  },
  "Image Opacity": {
    "module": "Image",
    "description": "Adjust the opacity of an image.",
    "infoUrl": "",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Opacity (%)",
        "type": "number",
        "min": 0,
        "max": 100,
        "required": false
      }
    ],
    "checks": []
  },
  "Index of Coincidence": {
    "module": "Default",
    "description": "Index of Coincidence (IC) is the probability of two randomly selected characters being the same. This can be used to determine whether text is readable or random, with English text having an IC of around 0.066. IC can therefore be a sound method to automate frequency analysis.",
    "infoUrl": "https://wikipedia.org/wiki/Index_of_coincidence",
    "inputType": "string",
    "outputType": "number",
    "args": [],
    "checks": []
  },
  "Invert Image": {
    "module": "Image",
    "description": "Invert the colours of an image.",
    "infoUrl": "",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [],
    "checks": []
  },
  "JA3 Fingerprint": {
    "module": "Crypto",
    "description": "Generates a JA3 fingerprint to help identify TLS clients based on hashing together values from the Client Hello.<br><br>Input: A hex stream of the TLS Client Hello packet application layer.",
    "infoUrl": "https://engineering.salesforce.com/tls-fingerprinting-with-ja3-and-ja3s-247362855967",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Input format",
        "type": "enum",
        "options": [
          "Hex",
          "Base64",
          "Raw"
        ],
        "required": false
      },
      {
        "name": "Output format",
        "type": "enum",
        "options": [
          "Hash digest",
          "JA3 string",
          "Full details"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "JA3S Fingerprint": {
    "module": "Crypto",
    "description": "Generates a JA3S fingerprint to help identify TLS servers based on hashing together values from the Server Hello.<br><br>Input: A hex stream of the TLS Server Hello record application layer.",
    "infoUrl": "https://engineering.salesforce.com/tls-fingerprinting-with-ja3-and-ja3s-247362855967",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Input format",
        "type": "enum",
        "options": [
          "Hex",
          "Base64",
          "Raw"
        ],
        "required": false
      },
      {
        "name": "Output format",
        "type": "enum",
        "options": [
          "Hash digest",
          "JA3S string",
          "Full details"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "JA4 Fingerprint": {
    "module": "Crypto",
    "description": "Generates a JA4 fingerprint to help identify TLS clients based on hashing together values from the Client Hello.<br><br>Input: A hex stream of the TLS or QUIC Client Hello packet application layer.",
    "infoUrl": "https://medium.com/foxio/ja4-network-fingerprinting-9376fe9ca637",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Input format",
        "type": "enum",
        "options": [
          "Hex",
          "Base64",
          "Raw"
        ],
        "required": false
      },
      {
        "name": "Output format",
        "type": "enum",
        "options": [
          "JA4",
          "JA4 Original Rendering",
          "JA4 Raw",
          "JA4 Raw Original Rendering",
          "All"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "JA4Server Fingerprint": {
    "module": "Crypto",
    "description": "Generates a JA4Server Fingerprint (JA4S) to help identify TLS servers or sessions based on hashing together values from the Server Hello.<br><br>Input: A hex stream of the TLS or QUIC Server Hello packet application layer.",
    "infoUrl": "https://medium.com/foxio/ja4-network-fingerprinting-9376fe9ca637",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Input format",
        "type": "enum",
        "options": [
          "Hex",
          "Base64",
          "Raw"
        ],
        "required": false
      },
      {
        "name": "Output format",
        "type": "enum",
        "options": [
          "JA4S",
          "JA4S Raw",
          "Both"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "JPath expression": {
    "module": "Code",
    "description": "Extract information from a JSON object with a JPath query.",
    "infoUrl": "http://goessner.net/articles/JsonPath/",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Query",
        "type": "string",
        "required": false
      },
      {
        "name": "Result delimiter",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "JSON Beautify": {
    "module": "Code",
    "description": "Indents and pretty prints JavaScript Object Notation (JSON) code.<br><br>Tags: json viewer, prettify, syntax highlighting",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Indent string",
        "type": "string",
        "required": false
      },
      {
        "name": "Sort Object Keys",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Formatted",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "JSON Minify": {
    "module": "Code",
    "description": "Compresses JavaScript Object Notation (JSON) code.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "JSON to CSV": {
    "module": "Default",
    "description": "Converts JSON data to a CSV based on the definition in RFC 4180.",
    "infoUrl": "https://wikipedia.org/wiki/Comma-separated_values",
    "inputType": "JSON",
    "outputType": "string",
    "args": [
      {
        "name": "Cell delimiter",
        "type": "string",
        "required": false
      },
      {
        "name": "Row delimiter",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "JSON to YAML": {
    "module": "Default",
    "description": "Format a JSON object into YAML",
    "infoUrl": "https://en.wikipedia.org/wiki/YAML",
    "inputType": "JSON",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "JWK to PEM": {
    "module": "PublicKey",
    "description": "Converts Keys in JSON Web Key format to PEM format (PKCS#8).",
    "infoUrl": "https://datatracker.ietf.org/doc/html/rfc7517",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": [
      {
        "pattern": "\"kty\":\\s*\"(EC|RSA)\"",
        "flags": "gm",
        "args": []
      }
    ]
  },
  "JWT Decode": {
    "module": "Crypto",
    "description": "Decodes a JSON Web Token <b>without</b> checking whether the provided secret / private key is valid. Use 'JWT Verify' to check if the signature is valid as well.",
    "infoUrl": "https://wikipedia.org/wiki/JSON_Web_Token",
    "inputType": "string",
    "outputType": "JSON",
    "args": [],
    "checks": [
      {
        "pattern": "^ey([A-Za-z0-9_-]+)\\.ey([A-Za-z0-9_-]+)\\.([A-Za-z0-9_-]+)$",
        "flags": "",
        "args": []
      }
    ]
  },
  "JWT Sign": {
    "module": "Crypto",
    "description": "Signs a JSON object as a JSON Web Token using a provided secret / private key.<br><br>The key should be either the secret for HMAC algorithms or the PEM-encoded private key for RSA and ECDSA.",
    "infoUrl": "https://wikipedia.org/wiki/JSON_Web_Token",
    "inputType": "JSON",
    "outputType": "string",
    "args": [
      {
        "name": "Private/Secret Key",
        "type": "string",
        "required": false
      },
      {
        "name": "Signing algorithm",
        "type": "enum",
        "options": [
          "HS256",
          "HS384",
          "HS512",
          "RS256",
          "RS384",
          "RS512",
          "ES256",
          "ES384",
          "ES512",
          "None"
        ],
        "required": false
      },
      {
        "name": "Header",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "JWT Verify": {
    "module": "Crypto",
    "description": "Verifies that a JSON Web Token is valid and has been signed with the provided secret / private key.<br><br>The key should be either the secret for HMAC algorithms or the PEM-encoded public key for RSA and ECDSA.",
    "infoUrl": "https://wikipedia.org/wiki/JSON_Web_Token",
    "inputType": "string",
    "outputType": "JSON",
    "args": [
      {
        "name": "Public/Secret Key",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "JavaScript Beautify": {
    "module": "Code",
    "description": "Parses and pretty prints valid JavaScript code. Also works with JavaScript Object Notation (JSON).",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Indent string",
        "type": "string",
        "required": false
      },
      {
        "name": "Quotes",
        "type": "enum",
        "options": [
          "Auto",
          "Single",
          "Double"
        ],
        "required": false
      },
      {
        "name": "Semicolons before closing braces",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Include comments",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "JavaScript Minify": {
    "module": "Code",
    "description": "Compresses JavaScript code.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "JavaScript Parser": {
    "module": "Code",
    "description": "Returns an Abstract Syntax Tree for valid JavaScript code.",
    "infoUrl": "https://wikipedia.org/wiki/Abstract_syntax_tree",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Location info",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Range info",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Include tokens array",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Include comments array",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Report errors and try to continue",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Jq": {
    "module": "Jq",
    "description": "jq is a lightweight and flexible command-line JSON processor.",
    "infoUrl": "https://github.com/jqlang/jq",
    "inputType": "JSON",
    "outputType": "string",
    "args": [
      {
        "name": "Query",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "Jsonata Query": {
    "module": "Code",
    "description": "Query and transform JSON data with a jsonata query.",
    "infoUrl": "https://docs.jsonata.org/overview.html",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Query",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "Jump": {
    "module": "Default",
    "description": "Jump forwards or backwards to the specified Label",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Label name",
        "type": "string",
        "required": false
      },
      {
        "name": "Maximum jumps (if jumping backwards)",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "Keccak": {
    "module": "Crypto",
    "description": "The Keccak hash algorithm was designed by Guido Bertoni, Joan Daemen, Micha\\xebl Peeters, and Gilles Van Assche, building upon RadioGat\\xfan. It was selected as the winner of the SHA-3 design competition.<br><br>This version of the algorithm is Keccak[c=2d] and differs from the SHA-3 specification.",
    "infoUrl": "https://wikipedia.org/wiki/SHA-3",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Size",
        "type": "enum",
        "options": [
          "512",
          "384",
          "256",
          "224"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "LM Hash": {
    "module": "Crypto",
    "description": "An LM Hash, or LAN Manager Hash, is a deprecated way of storing passwords on old Microsoft operating systems. It is particularly weak and can be cracked in seconds on modern hardware using rainbow tables.",
    "infoUrl": "https://wikipedia.org/wiki/LAN_Manager#Password_hashing_algorithm",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "LS47 Decrypt": {
    "module": "Crypto",
    "description": "This is a slight improvement of the ElsieFour cipher as described by Alan Kaminsky. We use 7x7 characters instead of original (barely fitting) 6x6, to be able to encrypt some structured information. We also describe a simple key-expansion algorithm, because remembering passwords is popular. Similar security considerations as with ElsieFour hold.<br>The LS47 alphabet consists of following characters: <code>_abcdefghijklmnopqrstuvwxyz.0123456789,-+*/:?!'()</code><br>An LS47 key is a permutation of the alphabet that is then represented in a 7x7 grid used for the encryption or decryption.",
    "infoUrl": "https://github.com/exaexa/ls47",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Password",
        "type": "string",
        "required": false
      },
      {
        "name": "Padding",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "LS47 Encrypt": {
    "module": "Crypto",
    "description": "This is a slight improvement of the ElsieFour cipher as described by Alan Kaminsky. We use 7x7 characters instead of original (barely fitting) 6x6, to be able to encrypt some structured information. We also describe a simple key-expansion algorithm, because remembering passwords is popular. Similar security considerations as with ElsieFour hold.<br>The LS47 alphabet consists of following characters: <code>_abcdefghijklmnopqrstuvwxyz.0123456789,-+*/:?!'()</code><br>A LS47 key is a permutation of the alphabet that is then represented in a 7x7 grid used for the encryption or decryption.",
    "infoUrl": "https://github.com/exaexa/ls47",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Password",
        "type": "string",
        "required": false
      },
      {
        "name": "Padding",
        "type": "number",
        "required": false
      },
      {
        "name": "Signature",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "LZ4 Compress": {
    "module": "Compression",
    "description": "LZ4 is a lossless data compression algorithm that is focused on compression and decompression speed. It belongs to the LZ77 family of byte-oriented compression schemes.",
    "infoUrl": "https://wikipedia.org/wiki/LZ4_(compression_algorithm)",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [],
    "checks": []
  },
  "LZ4 Decompress": {
    "module": "Compression",
    "description": "LZ4 is a lossless data compression algorithm that is focused on compression and decompression speed. It belongs to the LZ77 family of byte-oriented compression schemes.",
    "infoUrl": "https://wikipedia.org/wiki/LZ4_(compression_algorithm)",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [],
    "checks": []
  },
  "LZMA Compress": {
    "module": "Compression",
    "description": "Compresses data using the Lempel\\u2013Ziv\\u2013Markov chain algorithm. Compression mode determines the speed and effectiveness of the compression: 1 is fastest and less effective, 9 is slowest and most effective",
    "infoUrl": "https://wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Markov_chain_algorithm",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Compression Mode",
        "type": "enum",
        "options": [
          "1",
          "2",
          "3",
          "4",
          "5",
          "6",
          "7",
          "8",
          "9"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "LZMA Decompress": {
    "module": "Compression",
    "description": "Decompresses data using the Lempel-Ziv-Markov chain Algorithm.",
    "infoUrl": "https://wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Markov_chain_algorithm",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [],
    "checks": []
  },
  "LZNT1 Decompress": {
    "module": "Compression",
    "description": "Decompresses data using the LZNT1 algorithm.<br><br>Similar to the Windows API <code>RtlDecompressBuffer</code>.",
    "infoUrl": "https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-xca/5655f4a3-6ba4-489b-959f-e1f407c52f15",
    "inputType": "byteArray",
    "outputType": "byteArray",
    "args": [],
    "checks": []
  },
  "LZString Compress": {
    "module": "Compression",
    "description": "Compress the input with lz-string.",
    "infoUrl": "https://pieroxy.net/blog/pages/lz-string/index.html",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "LZString Decompress": {
    "module": "Compression",
    "description": "Decompresses data that was compressed with lz-string.",
    "infoUrl": "https://pieroxy.net/blog/pages/lz-string/index.html",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Label": {
    "module": "Default",
    "description": "Provides a location for conditional and fixed jumps to redirect execution to.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Name",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "Levenshtein Distance": {
    "module": "Default",
    "description": "Levenshtein Distance (also known as Edit Distance) is a string metric to measure a difference between two strings that counts operations (insertions, deletions, and substitutions) on single character that are required to change one string to another.",
    "infoUrl": "https://wikipedia.org/wiki/Levenshtein_distance",
    "inputType": "string",
    "outputType": "number",
    "args": [
      {
        "name": "Sample delimiter",
        "type": "string",
        "required": false
      },
      {
        "name": "Insertion cost",
        "type": "number",
        "required": false
      },
      {
        "name": "Deletion cost",
        "type": "number",
        "required": false
      },
      {
        "name": "Substitution cost",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "Lorenz": {
    "module": "Bletchley",
    "description": "The Lorenz SZ40/42 cipher attachment was a WW2 German rotor cipher machine with twelve rotors which attached in-line between remote teleprinters.<br><br>It used the Vernam cipher with two groups of five rotors (named the psi(ψ) wheels and chi(χ) wheels at Bletchley Park) to create two pseudorandom streams of five bits, encoded in ITA2, which were XOR added to the plaintext. Two other rotors, dubbed the mu(μ) or motor wheels, could hold up the stepping of the psi wheels meaning they stepped intermittently.<br><br>Each rotor has a different number of cams/lugs around their circumference which could be set active or inactive changing the key stream.<br><br>Three models of the Lorenz are emulated, SZ40, SZ42a and SZ42b and three example wheel patterns (the lug settings) are included (KH, ZMUG & BREAM) with the option to set a custom set using the letter 'x' for active or '.' for an inactive lug.<br><br>The input can either be plaintext or ITA2 when sending and ITA2 when receiving.<br><br>To learn more, Virtual Lorenz, an online, browser based simulation of the Lorenz SZ40/42 is available at <a href='https://lorenz.virtualcolossus.co.uk' target='_blank'>lorenz.virtualcolossus.co.uk</a>.<br><br>A more detailed description of this operation can be found <a href='https://github.com/gchq/CyberChef/wiki/Lorenz-SZ' target='_blank'>here</a>.",
    "infoUrl": "https://wikipedia.org/wiki/Lorenz_cipher",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Model",
        "type": "enum",
        "options": [
          "SZ40",
          "SZ42a",
          "SZ42b"
        ],
        "required": false
      },
      {
        "name": "Wheel Pattern",
        "type": "enum",
        "options": [
          "KH Pattern",
          "ZMUG Pattern",
          "BREAM Pattern",
          "No Pattern",
          "Custom"
        ],
        "required": false
      },
      {
        "name": "KT-Schalter",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Mode",
        "type": "enum",
        "options": [
          "Send",
          "Receive"
        ],
        "required": false
      },
      {
        "name": "Input Type",
        "type": "enum",
        "options": [
          "Plaintext",
          "ITA2"
        ],
        "required": false
      },
      {
        "name": "Output Type",
        "type": "enum",
        "options": [
          "Plaintext",
          "ITA2"
        ],
        "required": false
      },
      {
        "name": "ITA2 Format",
        "type": "enum",
        "options": [
          "5/8/9",
          "+/-/."
        ],
        "required": false
      },
      {
        "name": "Ψ1 start (1-43)",
        "type": "number",
        "required": false
      },
      {
        "name": "Ψ2 start (1-47)",
        "type": "number",
        "required": false
      },
      {
        "name": "Ψ3 start (1-51)",
        "type": "number",
        "required": false
      },
      {
        "name": "Ψ4 start (1-53)",
        "type": "number",
        "required": false
      },
      {
        "name": "Ψ5 start (1-59)",
        "type": "number",
        "required": false
      },
      {
        "name": "Μ37 start (1-37)",
        "type": "number",
        "required": false
      },
      {
        "name": "Μ61 start (1-61)",
        "type": "number",
        "required": false
      },
      {
        "name": "Χ1 start (1-41)",
        "type": "number",
        "required": false
      },
      {
        "name": "Χ2 start (1-31)",
        "type": "number",
        "required": false
      },
      {
        "name": "Χ3 start (1-29)",
        "type": "number",
        "required": false
      },
      {
        "name": "Χ4 start (1-26)",
        "type": "number",
        "required": false
      },
      {
        "name": "Χ5 start (1-23)",
        "type": "number",
        "required": false
      },
      {
        "name": "Ψ1 lugs (43)",
        "type": "string",
        "required": false
      },
      {
        "name": "Ψ2 lugs (47)",
        "type": "string",
        "required": false
      },
      {
        "name": "Ψ3 lugs (51)",
        "type": "string",
        "required": false
      },
      {
        "name": "Ψ4 lugs (53)",
        "type": "string",
        "required": false
      },
      {
        "name": "Ψ5 lugs (59)",
        "type": "string",
        "required": false
      },
      {
        "name": "Μ37 lugs (37)",
        "type": "string",
        "required": false
      },
      {
        "name": "Μ61 lugs (61)",
        "type": "string",
        "required": false
      },
      {
        "name": "Χ1 lugs (41)",
        "type": "string",
        "required": false
      },
      {
        "name": "Χ2 lugs (31)",
        "type": "string",
        "required": false
      },
      {
        "name": "Χ3 lugs (29)",
        "type": "string",
        "required": false
      },
      {
        "name": "Χ4 lugs (26)",
        "type": "string",
        "required": false
      },
      {
        "name": "Χ5 lugs (23)",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "Luhn Checksum": {
    "module": "Default",
    "description": "The Luhn mod N algorithm using the english alphabet. The Luhn mod N algorithm is an extension to the Luhn algorithm (also known as mod 10 algorithm) that allows it to work with sequences of values in any even-numbered base. This can be useful when a check digit is required to validate an identification string composed of letters, a combination of letters and digits or any arbitrary set of N characters where N is divisible by 2.",
    "infoUrl": "https://en.wikipedia.org/wiki/Luhn_mod_N_algorithm",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Radix",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "MD2": {
    "module": "Crypto",
    "description": "The MD2 (Message-Digest 2) algorithm is a cryptographic hash function developed by Ronald Rivest in 1989. The algorithm is optimized for 8-bit computers.<br><br>Although MD2 is no longer considered secure, even as of 2014, it remains in use in public key infrastructures as part of certificates generated with MD2 and RSA. The message digest algorithm consists, by default, of 18 rounds.",
    "infoUrl": "https://wikipedia.org/wiki/MD2_(cryptography)",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Rounds",
        "type": "number",
        "min": 0,
        "required": false
      }
    ],
    "checks": []
  },
  "MD4": {
    "module": "Crypto",
    "description": "The MD4 (Message-Digest 4) algorithm is a cryptographic hash function developed by Ronald Rivest in 1990. The digest length is 128 bits. The algorithm has influenced later designs, such as the MD5, SHA-1 and RIPEMD algorithms.<br><br>The security of MD4 has been severely compromised.",
    "infoUrl": "https://wikipedia.org/wiki/MD4",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "MD5": {
    "module": "Crypto",
    "description": "MD5 (Message-Digest 5) is a widely used hash function. It has been used in a variety of security applications and is also commonly used to check the integrity of files.<br><br>However, MD5 is not collision resistant and it isn't suitable for applications like SSL/TLS certificates or digital signatures that rely on this property.",
    "infoUrl": "https://wikipedia.org/wiki/MD5",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "MD6": {
    "module": "Crypto",
    "description": "The MD6 (Message-Digest 6) algorithm is a cryptographic hash function. It uses a Merkle tree-like structure to allow for immense parallel computation of hashes for very long inputs.",
    "infoUrl": "https://wikipedia.org/wiki/MD6",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Size",
        "type": "number",
        "required": false
      },
      {
        "name": "Levels",
        "type": "number",
        "required": false
      },
      {
        "name": "Key",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "MIME Decoding": {
    "module": "Default",
    "description": "Enables the decoding of MIME message header extensions for non-ASCII text",
    "infoUrl": "https://tools.ietf.org/html/rfc2047",
    "inputType": "byteArray",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Magic": {
    "module": "Default",
    "description": "The Magic operation attempts to detect various properties of the input data and suggests which operations could help to make more sense of it.<br><br><b>Options</b><br><u>Depth:</u> If an operation appears to match the data, it will be run and the result will be analysed further. This argument controls the maximum number of levels of recursion.<br><br><u>Intensive mode:</u> When this is turned on, various operations like XOR, bit rotates, and character encodings are brute-forced to attempt to detect valid data underneath. To improve performance, only the first 100 bytes of the data is brute-forced.<br><br><u>Extensive language support:</u> At each stage, the relative byte frequencies of the data will be compared to average frequencies for a number of languages. The default set consists of ~40 of the most commonly used languages on the Internet. The extensive list consists of 284 languages and can result in many languages matching the data if their byte frequencies are similar.<br><br>Optionally enter a regular expression to match a string you expect to find to filter results (crib).",
    "infoUrl": "https://github.com/gchq/CyberChef/wiki/Automatic-detection-of-encoded-data-using-CyberChef-Magic",
    "inputType": "ArrayBuffer",
    "outputType": "JSON",
    "args": [
      {
        "name": "Depth",
        "type": "number",
        "required": false
      },
      {
        "name": "Intensive mode",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Extensive language support",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Crib (known plaintext string or regex)",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "Mean": {
    "module": "Default",
    "description": "Computes the mean (average) of a number list. If an item in the string is not a number it is excluded from the list.<br><br>e.g. <code>0x0a 8 .5 .5</code> becomes <code>4.75</code>",
    "infoUrl": "https://wikipedia.org/wiki/Arithmetic_mean",
    "inputType": "string",
    "outputType": "BigNumber",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Line feed",
          "Space",
          "Comma",
          "Semi-colon",
          "Colon",
          "CRLF"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Median": {
    "module": "Default",
    "description": "Computes the median of a number list. If an item in the string is not a number it is excluded from the list.<br><br>e.g. <code>0x0a 8 1 .5</code> becomes <code>4.5</code>",
    "infoUrl": "https://wikipedia.org/wiki/Median",
    "inputType": "string",
    "outputType": "BigNumber",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Line feed",
          "Space",
          "Comma",
          "Semi-colon",
          "Colon",
          "CRLF"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Merge": {
    "module": "Default",
    "description": "Consolidate all branches back into a single trunk. The opposite of Fork. Unticking the Merge All checkbox will only consolidate all branches up to the nearest Fork/Subsection.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Merge All",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Microsoft Script Decoder": {
    "module": "Default",
    "description": "Decodes Microsoft Encoded Script files that have been encoded with Microsoft's custom encoding. These are often VBS (Visual Basic Script) files that are encoded and renamed with a '.vbe' extention or JS (JScript) files renamed with a '.jse' extention.<br><br><b>Sample</b><br><br>Encoded:<br><code>#@~^RQAAAA==-mD~sX|:/TP{~J:+dYbxL~@!F@*@!+@*@!&amp;@*eEI@#@&amp;@#@&amp;.jm.raY 214Wv:zms/obI0xEAAA==^#~@</code><br><br>Decoded:<br><code>var my_msg = &#34;Testing <1><2><3>!&#34;;\\n\\nVScript.Echo(my_msg);</code>",
    "infoUrl": "https://wikipedia.org/wiki/JScript.Encode",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": [
      {
        "pattern": "#@~\\^.{6}==(.+).{6}==\\^#~@",
        "flags": "i",
        "args": []
      }
    ]
  },
  "Multiple Bombe": {
    "module": "Bletchley",
    "description": "Emulation of the Bombe machine used to attack Enigma. This version carries out multiple Bombe runs to handle unknown rotor configurations.<br><br>You should test your menu on the single Bombe operation before running it here. See the description of the Bombe operation for instructions on choosing a crib.<br><br>More detailed descriptions of the Enigma, Typex and Bombe operations <a href='https://github.com/gchq/CyberChef/wiki/Enigma,-the-Bombe,-and-Typex'>can be found here</a>.",
    "infoUrl": "https://wikipedia.org/wiki/Bombe",
    "inputType": "string",
    "outputType": "JSON",
    "args": [],
    "checks": []
  },
  "Multiply": {
    "module": "Default",
    "description": "Multiplies a list of numbers. If an item in the string is not a number it is excluded from the list.<br><br>e.g. <code>0x0a 8 .5</code> becomes <code>40</code>",
    "infoUrl": "https://wikipedia.org/wiki/Multiplication",
    "inputType": "string",
    "outputType": "BigNumber",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Line feed",
          "Space",
          "Comma",
          "Semi-colon",
          "Colon",
          "CRLF"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "MurmurHash3": {
    "module": "Hashing",
    "description": "Generates a MurmurHash v3 for a string input and an optional seed input",
    "infoUrl": "https://wikipedia.org/wiki/MurmurHash",
    "inputType": "string",
    "outputType": "number",
    "args": [
      {
        "name": "Seed",
        "type": "number",
        "required": false
      },
      {
        "name": "Convert to Signed",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "NOT": {
    "module": "Default",
    "description": "Returns the inverse of each byte.",
    "infoUrl": "https://wikipedia.org/wiki/Bitwise_operation#NOT",
    "inputType": "ArrayBuffer",
    "outputType": "byteArray",
    "args": [],
    "checks": []
  },
  "NT Hash": {
    "module": "Crypto",
    "description": "An NT Hash, sometimes referred to as an NTLM hash, is a method of storing passwords on Windows systems. It works by running MD4 on UTF-16LE encoded input. NTLM hashes are considered weak because they can be brute-forced very easily with modern hardware.",
    "infoUrl": "https://wikipedia.org/wiki/NT_LAN_Manager",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Normalise Image": {
    "module": "Image",
    "description": "Normalise the image colours.",
    "infoUrl": "",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [],
    "checks": []
  },
  "Normalise Unicode": {
    "module": "Encodings",
    "description": "Transform Unicode characters to one of the Normalisation Forms",
    "infoUrl": "https://wikipedia.org/wiki/Unicode_equivalence#Normal_forms",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Normal Form",
        "type": "enum",
        "options": [
          "NFD",
          "NFC",
          "NFKD",
          "NFKC"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Numberwang": {
    "module": "Default",
    "description": "Based on the popular gameshow by Mitchell and Webb.",
    "infoUrl": "https://wikipedia.org/wiki/That_Mitchell_and_Webb_Look#Recurring_sketches",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "OR": {
    "module": "Default",
    "description": "OR the input with the given key.<br>e.g. <code>fe023da5</code>",
    "infoUrl": "https://wikipedia.org/wiki/Bitwise_operation#OR",
    "inputType": "ArrayBuffer",
    "outputType": "byteArray",
    "args": [
      {
        "name": "Key",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Object Identifier to Hex": {
    "module": "PublicKey",
    "description": "Converts an object identifier (OID) into a hexadecimal string.",
    "infoUrl": "https://wikipedia.org/wiki/Object_identifier",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Offset checker": {
    "module": "Default",
    "description": "Compares multiple inputs (separated by the specified delimiter) and highlights matching characters which appear at the same position in all samples.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "html",
    "args": [
      {
        "name": "Sample delimiter",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "Optical Character Recognition": {
    "module": "OCR",
    "description": "Optical character recognition or optical character reader (OCR) is the mechanical or electronic conversion of images of typed, handwritten or printed text into machine-encoded text.<br><br>Supported image formats: png, jpg, bmp, pbm.",
    "infoUrl": "https://wikipedia.org/wiki/Optical_character_recognition",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "PEM to Hex": {
    "module": "Default",
    "description": "Converts PEM (Privacy Enhanced Mail) format to a hexadecimal DER (Distinguished Encoding Rules) string.",
    "infoUrl": "https://wikipedia.org/wiki/Privacy-Enhanced_Mail#Format",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": [
      {
        "pattern": "----BEGIN ([A-Z][A-Z ]+[A-Z])-----",
        "args": []
      }
    ]
  },
  "PEM to JWK": {
    "module": "PublicKey",
    "description": "Converts Keys in PEM format to a JSON Web Key format.",
    "infoUrl": "https://datatracker.ietf.org/doc/html/rfc7517",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": [
      {
        "pattern": "-----BEGIN ((RSA |EC )?(PRIVATE|PUBLIC) KEY|CERTIFICATE)-----",
        "args": []
      }
    ]
  },
  "PGP Decrypt": {
    "module": "PGP",
    "description": null,
    "infoUrl": "https://wikipedia.org/wiki/Pretty_Good_Privacy",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Private key of recipient",
        "type": "string",
        "required": false
      },
      {
        "name": "Private key passphrase",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "PGP Decrypt and Verify": {
    "module": "PGP",
    "description": null,
    "infoUrl": "https://wikipedia.org/wiki/Pretty_Good_Privacy",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Public key of signer",
        "type": "string",
        "required": false
      },
      {
        "name": "Private key of recipient",
        "type": "string",
        "required": false
      },
      {
        "name": "Private key password",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "PGP Encrypt": {
    "module": "PGP",
    "description": null,
    "infoUrl": "https://wikipedia.org/wiki/Pretty_Good_Privacy",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Public key of recipient",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "PGP Encrypt and Sign": {
    "module": "PGP",
    "description": null,
    "infoUrl": "https://wikipedia.org/wiki/Pretty_Good_Privacy",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Private key of signer",
        "type": "string",
        "required": false
      },
      {
        "name": "Private key passphrase",
        "type": "string",
        "required": false
      },
      {
        "name": "Public key of recipient",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "PGP Verify": {
    "module": "PGP",
    "description": null,
    "infoUrl": "https://wikipedia.org/wiki/Pretty_Good_Privacy",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Public key of signer",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "PHP Deserialize": {
    "module": "Default",
    "description": "Deserializes PHP serialized data, outputting keyed arrays as JSON.<br><br>This function does not support <code>object</code> tags.<br><br>Example:<br><code>a:2:{s:1:&quot;a&quot;;i:10;i:0;a:1:{s:2:&quot;ab&quot;;b:1;}}</code><br>becomes<br><code>{&quot;a&quot;: 10,0: {&quot;ab&quot;: true}}</code><br><br><u>Output valid JSON:</u> JSON doesn't support integers as keys, whereas PHP serialization does. Enabling this will cast these integers to strings. This will also escape backslashes.",
    "infoUrl": "http://www.phpinternalsbook.com/classes_objects/serialization.html",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Output valid JSON",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "PHP Serialize": {
    "module": "Default",
    "description": "Performs PHP serialization on JSON data.<br><br>This function does not support <code>object</code> tags.<br><br>Since PHP doesn't distinguish dicts and arrays, this operation is not always symmetric to <code>PHP Deserialize</code>.<br><br>Example:<br><code>[5,&quot;abc&quot;,true]</code><br>becomes<br><code>a:3:{i:0;i:5;i:1;s:3:&quot;abc&quot;;i:2;b:1;}<code>",
    "infoUrl": "https://www.phpinternalsbook.com/php5/classes_objects/serialization.html",
    "inputType": "JSON",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "P-list Viewer": {
    "module": "Default",
    "description": "In the macOS, iOS, NeXTSTEP, and GNUstep programming frameworks, property list files are files that store serialized objects. Property list files use the filename extension .plist, and thus are often referred to as p-list files.<br><br>This operation displays plist files in a human readable format.",
    "infoUrl": "https://wikipedia.org/wiki/Property_list",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Pad lines": {
    "module": "Default",
    "description": "Add the specified number of the specified character to the beginning or end of each line",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Position",
        "type": "enum",
        "options": [
          "Start",
          "End"
        ],
        "required": false
      },
      {
        "name": "Length",
        "type": "number",
        "required": false
      },
      {
        "name": "Character",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "Parse ASN.1 hex string": {
    "module": "PublicKey",
    "description": "Abstract Syntax Notation One (ASN.1) is a standard and notation that describes rules and structures for representing, encoding, transmitting, and decoding data in telecommunications and computer networking.<br><br>This operation parses arbitrary ASN.1 data (encoded as an hex string: use the 'To Hex' operation if necessary) and presents the resulting tree.",
    "infoUrl": "https://wikipedia.org/wiki/Abstract_Syntax_Notation_One",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Starting index",
        "type": "number",
        "required": false
      },
      {
        "name": "Truncate octet strings longer than",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "Parse CSR": {
    "module": "PublicKey",
    "description": "Parse Certificate Signing Request (CSR) for an X.509 certificate",
    "infoUrl": "https://wikipedia.org/wiki/Certificate_signing_request",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Input format",
        "type": "enum",
        "options": [
          "PEM"
        ],
        "required": false
      }
    ],
    "checks": [
      {
        "pattern": "^-+BEGIN CERTIFICATE REQUEST-+\\r?\\n[\\da-z+/\\n\\r]+-+END CERTIFICATE REQUEST-+\\r?\\n?$",
        "flags": "i",
        "args": [
          "PEM"
        ]
      }
    ]
  },
  "Parse colour code": {
    "module": "Default",
    "description": "Converts a colour code in a standard format to other standard formats and displays the colour itself.<br><br><strong>Example inputs</strong><ul><li><code>#d9edf7</code></li><li><code>rgba(217,237,247,1)</code></li><li><code>hsla(200,65%,91%,1)</code></li><li><code>cmyk(0.12, 0.04, 0.00, 0.03)</code></li></ul>",
    "infoUrl": "https://wikipedia.org/wiki/Web_colors",
    "inputType": "string",
    "outputType": "html",
    "args": [],
    "checks": []
  },
  "Parse DateTime": {
    "module": "Default",
    "description": "Parses a DateTime string in your specified format and displays it in whichever timezone you choose with the following information:<ul><li>Date</li><li>Time</li><li>Period (AM/PM)</li><li>Timezone</li><li>UTC offset</li><li>Daylight Saving Time</li><li>Leap year</li><li>Days in this month</li><li>Day of year</li><li>Week number</li><li>Quarter</li></ul>Run with no input to see format string examples if required.",
    "infoUrl": "https://momentjs.com/docs/#/parsing/string-format/",
    "inputType": "string",
    "outputType": "html",
    "args": [],
    "checks": []
  },
  "Parse IP range": {
    "module": "Default",
    "description": "Given a CIDR range (e.g. <code>10.0.0.0/24</code>), hyphenated range (e.g. <code>10.0.0.0 - 10.0.1.0</code>), or a list of IPs and/or CIDR ranges (separated by a new line), this operation provides network information and enumerates all IP addresses in the range.<br><br>IPv6 is supported but will not be enumerated.",
    "infoUrl": "https://wikipedia.org/wiki/Subnetwork",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Include network info",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Enumerate IP addresses",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Allow large queries",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Parse IPv4 header": {
    "module": "Default",
    "description": "Given an IPv4 header, this operations parses and displays each field in an easily readable format.",
    "infoUrl": "https://wikipedia.org/wiki/IPv4#Header",
    "inputType": "string",
    "outputType": "html",
    "args": [
      {
        "name": "Input format",
        "type": "enum",
        "options": [
          "Hex",
          "Raw"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Parse IPv6 address": {
    "module": "Default",
    "description": "Displays the longhand and shorthand versions of a valid IPv6 address.<br><br>Recognises all reserved ranges and parses encapsulated or tunnelled addresses including Teredo and 6to4.",
    "infoUrl": "https://wikipedia.org/wiki/IPv6_address",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Parse ObjectID timestamp": {
    "module": "Serialise",
    "description": "Parse timestamp from MongoDB/BSON ObjectID hex string.",
    "infoUrl": "https://docs.mongodb.com/manual/reference/method/ObjectId.getTimestamp/",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Parse QR Code": {
    "module": "Image",
    "description": "Reads an image file and attempts to detect and read a Quick Response (QR) code from the image.<br><br><u>Normalise Image</u><br>Attempts to normalise the image before parsing it to improve detection of a QR code.",
    "infoUrl": "https://wikipedia.org/wiki/QR_code",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Normalise image",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": [
      {
        "pattern": "^(?:\\xff\\xd8\\xff|\\x89\\x50\\x4e\\x47|\\x47\\x49\\x46|.{8}\\x57\\x45\\x42\\x50|\\x42\\x4d)",
        "flags": "",
        "args": [
          false
        ],
        "useful": true
      }
    ]
  },
  "Parse SSH Host Key": {
    "module": "Default",
    "description": "Parses a SSH host key and extracts fields from it.<br>The key type can be:<ul><li>ssh-rsa</li><li>ssh-dss</li><li>ecdsa-sha2</li><li>ssh-ed25519</li></ul>The key format can be either Hex or Base64.",
    "infoUrl": "https://wikipedia.org/wiki/Secure_Shell",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Input Format",
        "type": "enum",
        "options": [
          "Auto",
          "Base64",
          "Hex"
        ],
        "required": false
      }
    ],
    "checks": [
      {
        "pattern": "^\\s*([A-F\\d]{2}[,;:]){15}[A-F\\d]{2}\\s*$",
        "flags": "i",
        "args": [
          "Hex"
        ]
      }
    ]
  },
  "Parse TCP": {
    "module": "Default",
    "description": "Parses a TCP header and payload (if present).",
    "infoUrl": "https://wikipedia.org/wiki/Transmission_Control_Protocol",
    "inputType": "string",
    "outputType": "json",
    "args": [
      {
        "name": "Input format",
        "type": "enum",
        "options": [
          "Hex",
          "Raw"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Parse TLS record": {
    "module": "Default",
    "description": "Parses one or more TLS records",
    "infoUrl": "https://wikipedia.org/wiki/Transport_Layer_Security",
    "inputType": "ArrayBuffer",
    "outputType": "json",
    "args": [],
    "checks": []
  },
  "Parse TLV": {
    "module": "Default",
    "description": "Converts a Type-Length-Value (TLV) encoded string into a JSON object.  Can optionally include a <code>Key</code> / <code>Type</code> entry. <br><br>Tags: Key-Length-Value, KLV, Length-Value, LV",
    "infoUrl": "https://wikipedia.org/wiki/Type-length-value",
    "inputType": "ArrayBuffer",
    "outputType": "JSON",
    "args": [
      {
        "name": "Type/Key size",
        "type": "number",
        "required": false
      },
      {
        "name": "Length size",
        "type": "number",
        "required": false
      },
      {
        "name": "Use BER",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Parse UDP": {
    "module": "Default",
    "description": "Parses a UDP header and payload (if present).",
    "infoUrl": "https://wikipedia.org/wiki/User_Datagram_Protocol",
    "inputType": "string",
    "outputType": "json",
    "args": [
      {
        "name": "Input format",
        "type": "enum",
        "options": [
          "Hex",
          "Raw"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Parse UNIX file permissions": {
    "module": "Default",
    "description": "Given a UNIX/Linux file permission string in octal or textual format, this operation explains which permissions are granted to which user groups.<br><br>Input should be in either octal (e.g. <code>755</code>) or textual (e.g. <code>drwxr-xr-x</code>) format.",
    "infoUrl": "https://wikipedia.org/wiki/File_system_permissions#Traditional_Unix_permissions",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": [
      {
        "pattern": "^\\s*d[rxw-]{9}\\s*$",
        "flags": "",
        "args": []
      }
    ]
  },
  "Parse URI": {
    "module": "URL",
    "description": "Pretty prints complicated Uniform Resource Identifier (URI) strings for ease of reading. Particularly useful for Uniform Resource Locators (URLs) with a lot of arguments.",
    "infoUrl": "https://wikipedia.org/wiki/Uniform_Resource_Identifier",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Parse User Agent": {
    "module": "UserAgent",
    "description": "Attempts to identify and categorise information contained in a user-agent string.",
    "infoUrl": "https://wikipedia.org/wiki/User_agent",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Parse X.509 CRL": {
    "module": "PublicKey",
    "description": "Parse Certificate Revocation List (CRL)",
    "infoUrl": "https://wikipedia.org/wiki/Certificate_revocation_list",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Input format",
        "type": "enum",
        "options": [
          "PEM",
          "DER Hex",
          "Base64",
          "Raw"
        ],
        "required": false
      }
    ],
    "checks": [
      {
        "pattern": "^-+BEGIN X509 CRL-+\\r?\\n[\\da-z+/\\n\\r]+-+END X509 CRL-+\\r?\\n?$",
        "flags": "i",
        "args": [
          "PEM"
        ]
      }
    ]
  },
  "Parse X.509 certificate": {
    "module": "PublicKey",
    "description": "X.509 is an ITU-T standard for a public key infrastructure (PKI) and Privilege Management Infrastructure (PMI). It is commonly involved with SSL/TLS security.<br><br>This operation displays the contents of a certificate in a human readable format, similar to the openssl command line tool.<br><br>Tags: X509, server hello, handshake",
    "infoUrl": "https://wikipedia.org/wiki/X.509",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Input format",
        "type": "enum",
        "options": [
          "PEM",
          "DER Hex",
          "Base64",
          "Raw"
        ],
        "required": false
      }
    ],
    "checks": [
      {
        "pattern": "^-+BEGIN CERTIFICATE-+\\r?\\n[\\da-z+/\\n\\r]+-+END CERTIFICATE-+\\r?\\n?$",
        "flags": "i",
        "args": [
          "PEM"
        ]
      }
    ]
  },
  "Play Media": {
    "module": "Default",
    "description": "Plays the input as audio or video depending on the type.<br><br>Tags: sound, movie, mp3, mp4, mov, webm, wav, ogg",
    "infoUrl": "",
    "inputType": "string",
    "outputType": "byteArray",
    "args": [
      {
        "name": "Input format",
        "type": "enum",
        "options": [
          "Raw",
          "Base64",
          "Hex"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Power Set": {
    "module": "Default",
    "description": "Calculates all the subsets of a set.",
    "infoUrl": "https://wikipedia.org/wiki/Power_set",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Item delimiter",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "Protobuf Decode": {
    "module": "Protobuf",
    "description": "Decodes any Protobuf encoded data to a JSON representation of the data using the field number as the field key.<br><br>If a .proto schema is defined, the encoded data will be decoded with reference to the schema. Only one message instance will be decoded. <br><br><u>Show Unknown Fields</u><br>When a schema is used, this option shows fields that are present in the input data but not defined in the schema.<br><br><u>Show Types</u><br>Show the type of a field next to its name. For undefined fields, the wiretype and example types are shown instead.",
    "infoUrl": "https://wikipedia.org/wiki/Protocol_Buffers",
    "inputType": "ArrayBuffer",
    "outputType": "JSON",
    "args": [
      {
        "name": "Schema (.proto text)",
        "type": "string",
        "required": false
      },
      {
        "name": "Show Unknown Fields",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Show Types",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Protobuf Encode": {
    "module": "Protobuf",
    "description": "Encodes a valid JSON object into a protobuf byte array using the input .proto schema.",
    "infoUrl": "https://developers.google.com/protocol-buffers/docs/encoding",
    "inputType": "JSON",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Schema (.proto text)",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "Pseudo-Random Number Generator": {
    "module": "Ciphers",
    "description": "A cryptographically-secure pseudo-random number generator (PRNG).<br><br>This operation uses the browser's built-in <code>crypto.getRandomValues()</code> method if available. If this cannot be found, it falls back to a Fortuna-based PRNG algorithm.",
    "infoUrl": "https://wikipedia.org/wiki/Pseudorandom_number_generator",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Number of bytes",
        "type": "number",
        "required": false
      },
      {
        "name": "Output as",
        "type": "enum",
        "options": [
          "Hex",
          "Integer",
          "Byte array",
          "Raw"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Public Key from Certificate": {
    "module": "PublicKey",
    "description": "Extracts the Public Key from a Certificate.",
    "infoUrl": "https://en.wikipedia.org/wiki/X.509",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Public Key from Private Key": {
    "module": "PublicKey",
    "description": "Extracts the Public Key from a Private Key.",
    "infoUrl": "https://en.wikipedia.org/wiki/PKCS_8",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "RAKE": {
    "module": "Default",
    "description": null,
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "RC2 Decrypt": {
    "module": "Ciphers",
    "description": "RC2 (also known as ARC2) is a symmetric-key block cipher designed by Ron Rivest in 1987. 'RC' stands for 'Rivest Cipher'.<br><br><b>Key:</b> RC2 uses a variable size key.<br><br><b>IV:</b> To run the cipher in CBC mode, the Initialization Vector should be 8 bytes long. If the IV is left blank, the cipher will run in ECB mode.<br><br><b>Padding:</b> In both CBC and ECB mode, PKCS#7 padding will be used.",
    "infoUrl": "https://wikipedia.org/wiki/RC2",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Key",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "IV",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Input",
        "type": "enum",
        "options": [
          "Hex",
          "Raw"
        ],
        "required": false
      },
      {
        "name": "Output",
        "type": "enum",
        "options": [
          "Raw",
          "Hex"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "RC2 Encrypt": {
    "module": "Ciphers",
    "description": "RC2 (also known as ARC2) is a symmetric-key block cipher designed by Ron Rivest in 1987. 'RC' stands for 'Rivest Cipher'.<br><br><b>Key:</b> RC2 uses a variable size key.<br><br>You can generate a password-based key using one of the KDF operations.<br><br><b>IV:</b> To run the cipher in CBC mode, the Initialization Vector should be 8 bytes long. If the IV is left blank, the cipher will run in ECB mode.<br><br><b>Padding:</b> In both CBC and ECB mode, PKCS#7 padding will be used.",
    "infoUrl": "https://wikipedia.org/wiki/RC2",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Key",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "IV",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Input",
        "type": "enum",
        "options": [
          "Raw",
          "Hex"
        ],
        "required": false
      },
      {
        "name": "Output",
        "type": "enum",
        "options": [
          "Hex",
          "Raw"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "RC4": {
    "module": "Ciphers",
    "description": "RC4 (also known as ARC4) is a widely-used stream cipher designed by Ron Rivest. It is used in popular protocols such as SSL and WEP. Although remarkable for its simplicity and speed, the algorithm's history doesn't inspire confidence in its security.",
    "infoUrl": "https://wikipedia.org/wiki/RC4",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Passphrase",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Input format",
        "type": "enum",
        "options": [
          "Latin1",
          "UTF8",
          "UTF16",
          "UTF16LE",
          "UTF16BE",
          "Hex",
          "Base64"
        ],
        "required": false
      },
      {
        "name": "Output format",
        "type": "enum",
        "options": [
          "Latin1",
          "UTF8",
          "UTF16",
          "UTF16LE",
          "UTF16BE",
          "Hex",
          "Base64"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "RC4 Drop": {
    "module": "Ciphers",
    "description": "It was discovered that the first few bytes of the RC4 keystream are strongly non-random and leak information about the key. We can defend against this attack by discarding the initial portion of the keystream. This modified algorithm is traditionally called RC4-drop.",
    "infoUrl": "https://wikipedia.org/wiki/RC4#Fluhrer,_Mantin_and_Shamir_attack",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Passphrase",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Input format",
        "type": "enum",
        "options": [
          "Latin1",
          "UTF8",
          "UTF16",
          "UTF16LE",
          "UTF16BE",
          "Hex",
          "Base64"
        ],
        "required": false
      },
      {
        "name": "Output format",
        "type": "enum",
        "options": [
          "Latin1",
          "UTF8",
          "UTF16",
          "UTF16LE",
          "UTF16BE",
          "Hex",
          "Base64"
        ],
        "required": false
      },
      {
        "name": "Number of dwords to drop",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "RIPEMD": {
    "module": "Crypto",
    "description": "RIPEMD (RACE Integrity Primitives Evaluation Message Digest) is a family of cryptographic hash functions developed in Leuven, Belgium, by Hans Dobbertin, Antoon Bosselaers and Bart Preneel at the COSIC research group at the Katholieke Universiteit Leuven, and first published in 1996.<br><br>RIPEMD was based upon the design principles used in MD4, and is similar in performance to the more popular SHA-1.<br><br>",
    "infoUrl": "https://wikipedia.org/wiki/RIPEMD",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Size",
        "type": "enum",
        "options": [
          "320",
          "256",
          "160",
          "128"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "ROT13": {
    "module": "Default",
    "description": "A simple caesar substitution cipher which rotates alphabet characters by the specified amount (default 13).",
    "infoUrl": "https://wikipedia.org/wiki/ROT13",
    "inputType": "byteArray",
    "outputType": "byteArray",
    "args": [
      {
        "name": "Rotate lower case chars",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Rotate upper case chars",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Rotate numbers",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Amount",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "ROT13 Brute Force": {
    "module": "Default",
    "description": "Try all meaningful amounts for ROT13.<br><br>Optionally you can enter your known plaintext (crib) to filter the result.",
    "infoUrl": "https://wikipedia.org/wiki/ROT13",
    "inputType": "byteArray",
    "outputType": "string",
    "args": [
      {
        "name": "Rotate lower case chars",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Rotate upper case chars",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Rotate numbers",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Sample length",
        "type": "number",
        "required": false
      },
      {
        "name": "Sample offset",
        "type": "number",
        "required": false
      },
      {
        "name": "Print amount",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Crib (known plaintext string)",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "ROT47": {
    "module": "Default",
    "description": "A slightly more complex variation of a caesar cipher, which includes ASCII characters from 33 '!' to 126 '~'. Default rotation: 47.",
    "infoUrl": "https://wikipedia.org/wiki/ROT13#Variants",
    "inputType": "byteArray",
    "outputType": "byteArray",
    "args": [
      {
        "name": "Amount",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "ROT47 Brute Force": {
    "module": "Default",
    "description": "Try all meaningful amounts for ROT47.<br><br>Optionally you can enter your known plaintext (crib) to filter the result.",
    "infoUrl": "https://wikipedia.org/wiki/ROT13#Variants",
    "inputType": "byteArray",
    "outputType": "string",
    "args": [
      {
        "name": "Sample length",
        "type": "number",
        "required": false
      },
      {
        "name": "Sample offset",
        "type": "number",
        "required": false
      },
      {
        "name": "Print amount",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Crib (known plaintext string)",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "ROT8000": {
    "module": "Default",
    "description": "The simple Caesar-cypher encryption that replaces each Unicode character with the one 0x8000 places forward or back along the alphabet.",
    "infoUrl": "https://rot8000.com/info",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "RSA Decrypt": {
    "module": "Ciphers",
    "description": "Decrypt an RSA encrypted message with a PEM encoded private key.",
    "infoUrl": "https://wikipedia.org/wiki/RSA_(cryptosystem)",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "RSA Encrypt": {
    "module": "Ciphers",
    "description": "Encrypt a message with a PEM encoded RSA public key.",
    "infoUrl": "https://wikipedia.org/wiki/RSA_(cryptosystem)",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "RSA Sign": {
    "module": "Ciphers",
    "description": "Sign a plaintext message with a PEM encoded RSA key.",
    "infoUrl": "https://wikipedia.org/wiki/RSA_(cryptosystem)",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "RSA Verify": {
    "module": "Ciphers",
    "description": "Verify a message against a signature and a public PEM encoded RSA key.",
    "infoUrl": "https://wikipedia.org/wiki/RSA_(cryptosystem)",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Rabbit": {
    "module": "Ciphers",
    "description": "Rabbit is a high-speed stream cipher introduced in 2003 and defined in RFC 4503.<br><br>The cipher uses a 128-bit key and an optional 64-bit initialization vector (IV).<br><br>big-endian: based on RFC4503 and RFC3447<br>little-endian: compatible with Crypto++",
    "infoUrl": "https://wikipedia.org/wiki/Rabbit_(cipher)",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Key",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "IV",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Endianness",
        "type": "enum",
        "options": [
          "Big",
          "Little"
        ],
        "required": false
      },
      {
        "name": "Input",
        "type": "enum",
        "options": [
          "Raw",
          "Hex"
        ],
        "required": false
      },
      {
        "name": "Output",
        "type": "enum",
        "options": [
          "Raw",
          "Hex"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Rail Fence Cipher Decode": {
    "module": "Ciphers",
    "description": "Decodes Strings that were created using the Rail fence Cipher provided a key and an offset",
    "infoUrl": "https://wikipedia.org/wiki/Rail_fence_cipher",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Key",
        "type": "number",
        "required": false
      },
      {
        "name": "Offset",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "Rail Fence Cipher Encode": {
    "module": "Ciphers",
    "description": "Encodes Strings using the Rail fence Cipher provided a key and an offset",
    "infoUrl": "https://wikipedia.org/wiki/Rail_fence_cipher",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Key",
        "type": "number",
        "required": false
      },
      {
        "name": "Offset",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "Randomize Colour Palette": {
    "module": "Image",
    "description": "Randomizes each colour in an image's colour palette. This can often reveal text or symbols that were previously a very similar colour to their surroundings, a technique sometimes used in Steganography.",
    "infoUrl": "https://wikipedia.org/wiki/Indexed_color",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Seed",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "Raw Deflate": {
    "module": "Compression",
    "description": "Compresses data using the deflate algorithm with no headers.",
    "infoUrl": "https://wikipedia.org/wiki/DEFLATE",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Compression type",
        "type": "enum",
        "options": [
          "Dynamic Huffman Coding",
          "Fixed Huffman Coding",
          "None (Store)"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Raw Inflate": {
    "module": "Compression",
    "description": "Decompresses data which has been compressed using the deflate algorithm with no headers.",
    "infoUrl": "https://wikipedia.org/wiki/DEFLATE",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Start index",
        "type": "number",
        "required": false
      },
      {
        "name": "Initial output buffer size",
        "type": "number",
        "required": false
      },
      {
        "name": "Buffer expansion type",
        "type": "enum",
        "options": [
          "Adaptive",
          "Block"
        ],
        "required": false
      },
      {
        "name": "Resize buffer after decompression",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Verify result",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Register": {
    "module": "Regex",
    "description": "Extract data from the input and store it in registers which can then be passed into subsequent operations as arguments. Regular expression capture groups are used to select the data to extract.<br><br>To use registers in arguments, refer to them using the notation <code>$Rn</code> where n is the register number, starting at 0.<br><br>For example:<br>Input: <code>Test</code><br>Extractor: <code>(.*)</code><br>Argument: <code>$R0</code> becomes <code>Test</code><br><br>Registers can be escaped in arguments using a backslash. e.g. <code>\\\\$R0</code> would become <code>$R0</code> rather than <code>Test</code>.",
    "infoUrl": "https://wikipedia.org/wiki/Regular_expression#Syntax",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Extractor",
        "type": "string",
        "required": false
      },
      {
        "name": "Case insensitive",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Multiline matching",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Dot matches all",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Regular expression": {
    "module": "Regex",
    "description": "Define your own regular expression (regex) to search the input data with, optionally choosing from a list of pre-defined patterns.<br><br>Supports extended regex syntax including the 'dot matches all' flag, named capture groups, full unicode coverage (including <code>\\\\p{}</code> categories and scripts as well as astral codes) and recursive matching.",
    "infoUrl": "https://wikipedia.org/wiki/Regular_expression",
    "inputType": "string",
    "outputType": "html",
    "args": [],
    "checks": []
  },
  "Remove Diacritics": {
    "module": "Default",
    "description": "Replaces accented characters with their latin character equivalent. Accented characters are made up of Unicode combining characters, so unicode text formatting such as strikethroughs and underlines will also be removed.",
    "infoUrl": "https://wikipedia.org/wiki/Diacritic",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Remove EXIF": {
    "module": "Image",
    "description": null,
    "infoUrl": "https://wikipedia.org/wiki/Exif",
    "inputType": "ArrayBuffer",
    "outputType": "byteArray",
    "args": [],
    "checks": []
  },
  "Remove line numbers": {
    "module": "Default",
    "description": "Removes line numbers from the output if they can be trivially detected.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Remove null bytes": {
    "module": "Default",
    "description": "Removes all null bytes (<code>0x00</code>) from the input.",
    "infoUrl": null,
    "inputType": "ArrayBuffer",
    "outputType": "byteArray",
    "args": [],
    "checks": []
  },
  "Remove whitespace": {
    "module": "Default",
    "description": "Optionally removes all spaces, carriage returns, line feeds, tabs and form feeds from the input data.<br><br>This operation also supports the removal of full stops which are sometimes used to represent non-printable bytes in ASCII output.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Spaces",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Carriage returns (\\r)",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Line feeds (\\n)",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Tabs",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Form feeds (\\f)",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Full stops",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Render Image": {
    "module": "Image",
    "description": "Displays the input as an image. Supports the following formats:<br><br><ul><li>jpg/jpeg</li><li>png</li><li>gif</li><li>webp</li><li>bmp</li><li>ico</li></ul>",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "byteArray",
    "args": [
      {
        "name": "Input format",
        "type": "enum",
        "options": [
          "Raw",
          "Base64",
          "Hex"
        ],
        "required": false
      }
    ],
    "checks": [
      {
        "pattern": "^(?:\\xff\\xd8\\xff|\\x89\\x50\\x4e\\x47|\\x47\\x49\\x46|.{8}\\x57\\x45\\x42\\x50|\\x42\\x4d)",
        "flags": "",
        "args": [
          "Raw"
        ],
        "useful": true,
        "output": {
          "mime": "image"
        }
      }
    ]
  },
  "Render Markdown": {
    "module": "Code",
    "description": "Renders input Markdown as HTML. HTML rendering is disabled to avoid XSS.",
    "infoUrl": "https://wikipedia.org/wiki/Markdown",
    "inputType": "string",
    "outputType": "html",
    "args": [
      {
        "name": "Autoconvert URLs to links",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Enable syntax highlighting",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Resize Image": {
    "module": "Image",
    "description": "Resizes an image to the specified width and height values.",
    "infoUrl": "https://wikipedia.org/wiki/Image_scaling",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [],
    "checks": []
  },
  "Return": {
    "module": "Default",
    "description": "End execution of operations at this point in the recipe.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Reverse": {
    "module": "Default",
    "description": "Reverses the input string.",
    "infoUrl": null,
    "inputType": "byteArray",
    "outputType": "byteArray",
    "args": [
      {
        "name": "By",
        "type": "enum",
        "options": [
          "Byte",
          "Character",
          "Line"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Rison Decode": {
    "module": "Encodings",
    "description": "Rison, a data serialization format optimized for compactness in URIs. Rison is a slight variation of JSON that looks vastly superior after URI encoding. Rison still expresses exactly the same set of data structures as JSON, so data can be translated back and forth without loss or guesswork.",
    "infoUrl": "https://github.com/Nanonid/rison",
    "inputType": "string",
    "outputType": "Object",
    "args": [
      {
        "name": "Decode Option",
        "type": "enum",
        "options": [
          "Decode",
          "Decode Object",
          "Decode Array"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Rison Encode": {
    "module": "Encodings",
    "description": "Rison, a data serialization format optimized for compactness in URIs. Rison is a slight variation of JSON that looks vastly superior after URI encoding. Rison still expresses exactly the same set of data structures as JSON, so data can be translated back and forth without loss or guesswork.",
    "infoUrl": "https://github.com/Nanonid/rison",
    "inputType": "Object",
    "outputType": "string",
    "args": [
      {
        "name": "Encode Option",
        "type": "enum",
        "options": [
          "Encode",
          "Encode Object",
          "Encode Array",
          "Encode URI"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Rotate Image": {
    "module": "Image",
    "description": "Rotates an image by the specified number of degrees.",
    "infoUrl": "",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Rotation amount (degrees)",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "Rotate left": {
    "module": "Default",
    "description": "Rotates each byte to the left by the number of bits specified, optionally carrying the excess bits over to the next byte. Currently only supports 8-bit values.",
    "infoUrl": "https://wikipedia.org/wiki/Bitwise_operation#Bit_shifts",
    "inputType": "byteArray",
    "outputType": "byteArray",
    "args": [
      {
        "name": "Amount",
        "type": "number",
        "required": false
      },
      {
        "name": "Carry through",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Rotate right": {
    "module": "Default",
    "description": "Rotates each byte to the right by the number of bits specified, optionally carrying the excess bits over to the next byte. Currently only supports 8-bit values.",
    "infoUrl": "https://wikipedia.org/wiki/Bitwise_operation#Bit_shifts",
    "inputType": "byteArray",
    "outputType": "byteArray",
    "args": [
      {
        "name": "Amount",
        "type": "number",
        "required": false
      },
      {
        "name": "Carry through",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "SHA0": {
    "module": "Crypto",
    "description": "SHA-0 is a retronym applied to the original version of the 160-bit hash function published in 1993 under the name 'SHA'. It was withdrawn shortly after publication due to an undisclosed 'significant flaw' and replaced by the slightly revised version SHA-1. The message digest algorithm consists, by default, of 80 rounds.",
    "infoUrl": "https://wikipedia.org/wiki/SHA-1#SHA-0",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Rounds",
        "type": "number",
        "min": 16,
        "required": false
      }
    ],
    "checks": []
  },
  "SHA1": {
    "module": "Crypto",
    "description": "The SHA (Secure Hash Algorithm) hash functions were designed by the NSA. SHA-1 is the most established of the existing SHA hash functions and it is used in a variety of security applications and protocols.<br><br>However, SHA-1's collision resistance has been weakening as new attacks are discovered or improved. The message digest algorithm consists, by default, of 80 rounds.",
    "infoUrl": "https://wikipedia.org/wiki/SHA-1",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Rounds",
        "type": "number",
        "min": 16,
        "required": false
      }
    ],
    "checks": []
  },
  "SHA2": {
    "module": "Crypto",
    "description": "The SHA-2 (Secure Hash Algorithm 2) hash functions were designed by the NSA. SHA-2 includes significant changes from its predecessor, SHA-1. The SHA-2 family consists of hash functions with digests (hash values) that are 224, 256, 384 or 512 bits: SHA224, SHA256, SHA384, SHA512.<br><br><ul><li>SHA-512 operates on 64-bit words.</li><li>SHA-256 operates on 32-bit words.</li><li>SHA-384 is largely identical to SHA-512 but is truncated to 384 bytes.</li><li>SHA-224 is largely identical to SHA-256 but is truncated to 224 bytes.</li><li>SHA-512/224 and SHA-512/256 are truncated versions of SHA-512, but the initial values are generated using the method described in Federal Information Processing Standards (FIPS) PUB 180-4.</li></ul> The message digest algorithm for SHA256 variants consists, by default, of 64 rounds, and for SHA512 variants, it is, by default, 160.",
    "infoUrl": "https://wikipedia.org/wiki/SHA-2",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "SHA3": {
    "module": "Crypto",
    "description": "The SHA-3 (Secure Hash Algorithm 3) hash functions were released by NIST on August 5, 2015. Although part of the same series of standards, SHA-3 is internally quite different from the MD5-like structure of SHA-1 and SHA-2.<br><br>SHA-3 is a subset of the broader cryptographic primitive family Keccak designed by Guido Bertoni, Joan Daemen, Micha\\xebl Peeters, and Gilles Van Assche, building upon RadioGat\\xfan.",
    "infoUrl": "https://wikipedia.org/wiki/SHA-3",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Size",
        "type": "enum",
        "options": [
          "512",
          "384",
          "256",
          "224"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "SIGABA": {
    "module": "Bletchley",
    "description": "Encipher/decipher with the WW2 SIGABA machine. <br><br>SIGABA, otherwise known as ECM Mark II, was used by the United States for message encryption during WW2 up to the 1950s. It was developed in the 1930s by the US Army and Navy, and has up to this day never been broken. Consisting of 15 rotors: 5 cipher rotors and 10 rotors (5 control rotors and 5 index rotors) controlling the stepping of the cipher rotors, the rotor stepping for SIGABA is much more complex than other rotor machines of its time, such as Enigma. All example rotor wirings are random example sets.<br><br>To configure rotor wirings, for the cipher and control rotors enter a string of letters which map from A to Z, and for the index rotors enter a sequence of numbers which map from 0 to 9. Note that encryption is not the same as decryption, so first choose the desired mode. <br><br> Note: Whilst this has been tested against other software emulators, it has not been tested against hardware.",
    "infoUrl": "https://wikipedia.org/wiki/SIGABA",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "SM2 Decrypt": {
    "module": "Crypto",
    "description": "Decrypts a message utilizing the SM2 standard",
    "infoUrl": "",
    "inputType": "string",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Private Key",
        "type": "string",
        "required": false
      },
      {
        "name": "Input Format",
        "type": "enum",
        "options": [
          "C1C3C2",
          "C1C2C3"
        ],
        "required": false
      },
      {
        "name": "Curve",
        "type": "enum",
        "options": [
          "sm2p256v1"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "SM2 Encrypt": {
    "module": "Crypto",
    "description": "Encrypts a message utilizing the SM2 standard",
    "infoUrl": "",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Public Key X",
        "type": "string",
        "required": false
      },
      {
        "name": "Public Key Y",
        "type": "string",
        "required": false
      },
      {
        "name": "Output Format",
        "type": "enum",
        "options": [
          "C1C3C2",
          "C1C2C3"
        ],
        "required": false
      },
      {
        "name": "Curve",
        "type": "enum",
        "options": [
          "sm2p256v1"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "SM3": {
    "module": "Crypto",
    "description": "SM3 is a cryptographic hash function used in the Chinese National Standard. SM3 is mainly used in digital signatures, message authentication codes, and pseudorandom number generators. The message digest algorithm consists, by default, of 64 rounds and length of 256.",
    "infoUrl": "https://wikipedia.org/wiki/SM3_(hash_function)",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Length",
        "type": "number",
        "required": false
      },
      {
        "name": "Rounds",
        "type": "number",
        "min": 16,
        "required": false
      }
    ],
    "checks": []
  },
  "SM4 Decrypt": {
    "module": "Ciphers",
    "description": "SM4 is a 128-bit block cipher, currently established as a national standard (GB/T 32907-2016) of China.",
    "infoUrl": "https://wikipedia.org/wiki/SM4_(cipher)",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Key",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "IV",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Mode",
        "type": "enum",
        "options": [
          "CBC",
          "CFB",
          "OFB",
          "CTR",
          "ECB",
          "CBC/NoPadding",
          "ECB/NoPadding"
        ],
        "required": false
      },
      {
        "name": "Input",
        "type": "enum",
        "options": [
          "Raw",
          "Hex"
        ],
        "required": false
      },
      {
        "name": "Output",
        "type": "enum",
        "options": [
          "Hex",
          "Raw"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "SM4 Encrypt": {
    "module": "Ciphers",
    "description": "SM4 is a 128-bit block cipher, currently established as a national standard (GB/T 32907-2016) of China. Multiple block cipher modes are supported. When using CBC or ECB mode, the PKCS#7 padding scheme is used.",
    "infoUrl": "https://wikipedia.org/wiki/SM4_(cipher)",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Key",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "IV",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Mode",
        "type": "enum",
        "options": [
          "CBC",
          "CFB",
          "OFB",
          "CTR",
          "ECB"
        ],
        "required": false
      },
      {
        "name": "Input",
        "type": "enum",
        "options": [
          "Raw",
          "Hex"
        ],
        "required": false
      },
      {
        "name": "Output",
        "type": "enum",
        "options": [
          "Hex",
          "Raw"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "SQL Beautify": {
    "module": "Code",
    "description": "Indents and prettifies Structured Query Language (SQL) code.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Indent string",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "SQL Minify": {
    "module": "Code",
    "description": "Compresses Structured Query Language (SQL) code.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "SSDEEP": {
    "module": "Crypto",
    "description": "SSDEEP is a program for computing context triggered piecewise hashes (CTPH). Also called fuzzy hashes, CTPH can match inputs that have homologies. Such inputs have sequences of identical bytes in the same order, although bytes in between these sequences may be different in both content and length.<br><br>SSDEEP hashes are now widely used for simple identification purposes (e.g. the 'Basic Properties' section in VirusTotal). Although 'better' fuzzy hashes are available, SSDEEP is still one of the primary choices because of its speed and being a de facto standard.<br><br>This operation is fundamentally the same as the CTPH operation, however their outputs differ in format.",
    "infoUrl": "https://forensics.wiki/ssdeep",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "SUB": {
    "module": "Default",
    "description": "SUB the input with the given key (e.g. <code>fe023da5</code>), MOD 255",
    "infoUrl": "https://wikipedia.org/wiki/Bitwise_operation#Bitwise_operators",
    "inputType": "byteArray",
    "outputType": "byteArray",
    "args": [
      {
        "name": "Key",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Salsa20": {
    "module": "Ciphers",
    "description": "Salsa20 is a stream cipher designed by Daniel J. Bernstein and submitted to the eSTREAM project; Salsa20/8 and Salsa20/12 are round-reduced variants. It is closely related to the ChaCha stream cipher.<br><br><b>Key:</b> Salsa20 uses a key of 16 or 32 bytes (128 or 256 bits).<br><br><b>Nonce:</b> Salsa20 uses a nonce of 8 bytes (64 bits).<br><br><b>Counter:</b> Salsa uses a counter of 8 bytes (64 bits). The counter starts at zero at the start of the keystream, and is incremented at every 64 bytes.",
    "infoUrl": "https://wikipedia.org/wiki/Salsa20",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Key",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Nonce",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Counter",
        "type": "number",
        "min": 0,
        "required": false
      },
      {
        "name": "Rounds",
        "type": "enum",
        "options": [
          "20",
          "12",
          "8"
        ],
        "required": false
      },
      {
        "name": "Input",
        "type": "enum",
        "options": [
          "Hex",
          "Raw"
        ],
        "required": false
      },
      {
        "name": "Output",
        "type": "enum",
        "options": [
          "Raw",
          "Hex"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Scan for Embedded Files": {
    "module": "Default",
    "description": "Scans the data for potential embedded files by looking for magic bytes at all offsets. This operation is prone to false positives.<br><br>WARNING: Files over about 100KB in size will take a VERY long time to process.",
    "infoUrl": "https://wikipedia.org/wiki/List_of_file_signatures",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Scatter chart": {
    "module": "Charts",
    "description": "Plots two-variable data as single points on a graph.",
    "infoUrl": "https://wikipedia.org/wiki/Scatter_plot",
    "inputType": "string",
    "outputType": "html",
    "args": [],
    "checks": []
  },
  "Scrypt": {
    "module": "Crypto",
    "description": "scrypt is a password-based key derivation function (PBKDF) created by Colin Percival. The algorithm was specifically designed to make it costly to perform large-scale custom hardware attacks by requiring large amounts of memory. In 2016, the scrypt algorithm was published by IETF as RFC 7914.<br><br>Enter the password in the input to generate its hash.",
    "infoUrl": "https://wikipedia.org/wiki/Scrypt",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Salt",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Iterations (N)",
        "type": "number",
        "required": false
      },
      {
        "name": "Memory factor (r)",
        "type": "number",
        "required": false
      },
      {
        "name": "Parallelization factor (p)",
        "type": "number",
        "required": false
      },
      {
        "name": "Key length",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "Series chart": {
    "module": "Charts",
    "description": "A time series graph is a line graph of repeated measurements taken over regular time intervals.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "html",
    "args": [
      {
        "name": "Record delimiter",
        "type": "enum",
        "options": [
          "Line feed",
          "CRLF"
        ],
        "required": false
      },
      {
        "name": "Field delimiter",
        "type": "enum",
        "options": [
          "Space",
          "Comma",
          "Semi-colon",
          "Colon",
          "Tab"
        ],
        "required": false
      },
      {
        "name": "X label",
        "type": "string",
        "required": false
      },
      {
        "name": "Point radius",
        "type": "number",
        "required": false
      },
      {
        "name": "Series colours",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "Set Difference": {
    "module": "Default",
    "description": "Calculates the difference, or relative complement, of two sets.",
    "infoUrl": "https://wikipedia.org/wiki/Complement_(set_theory)#Relative_complement",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Sample delimiter",
        "type": "string",
        "required": false
      },
      {
        "name": "Item delimiter",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "Set Intersection": {
    "module": "Default",
    "description": "Calculates the intersection of two sets.",
    "infoUrl": "https://wikipedia.org/wiki/Intersection_(set_theory)",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Sample delimiter",
        "type": "string",
        "required": false
      },
      {
        "name": "Item delimiter",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "Set Union": {
    "module": "Default",
    "description": "Calculates the union of two sets.",
    "infoUrl": "https://wikipedia.org/wiki/Union_(set_theory)",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Sample delimiter",
        "type": "string",
        "required": false
      },
      {
        "name": "Item delimiter",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "Shake": {
    "module": "Crypto",
    "description": "Shake is an Extendable Output Function (XOF) of the SHA-3 hash algorithm, part of the Keccak family, allowing for variable output length/size.",
    "infoUrl": "https://wikipedia.org/wiki/SHA-3#Instances",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Capacity",
        "type": "enum",
        "options": [
          "256",
          "128"
        ],
        "required": false
      },
      {
        "name": "Size",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "Sharpen Image": {
    "module": "Image",
    "description": "Sharpens an image (Unsharp mask)",
    "infoUrl": "https://wikipedia.org/wiki/Unsharp_masking",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Radius",
        "type": "number",
        "min": 1,
        "required": false
      },
      {
        "name": "Amount",
        "type": "number",
        "min": 0,
        "required": false
      },
      {
        "name": "Threshold",
        "type": "number",
        "min": 0,
        "max": 100,
        "required": false
      }
    ],
    "checks": []
  },
  "Show Base64 offsets": {
    "module": "Default",
    "description": "When a string is within a block of data and the whole block is Base64'd, the string itself could be represented in Base64 in three distinct ways depending on its offset within the block.<br><br>This operation shows all possible offsets for a given string so that each possible encoding can be considered.",
    "infoUrl": "https://wikipedia.org/wiki/Base64#Output_padding",
    "inputType": "byteArray",
    "outputType": "html",
    "args": [
      {
        "name": "Alphabet",
        "type": "string",
        "required": false
      },
      {
        "name": "Show variable chars and padding",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Input format",
        "type": "enum",
        "options": [
          "Raw",
          "Base64"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Show on map": {
    "module": "Hashing",
    "description": "Displays co-ordinates on a slippy map.<br><br>Co-ordinates will be converted to decimal degrees before being shown on the map.<br><br>Supported formats:<ul><li>Degrees Minutes Seconds (DMS)</li><li>Degrees Decimal Minutes (DDM)</li><li>Decimal Degrees (DD)</li><li>Geohash</li><li>Military Grid Reference System (MGRS)</li><li>Ordnance Survey National Grid (OSNG)</li><li>Universal Transverse Mercator (UTM)</li></ul><br>This operation will not work offline.",
    "infoUrl": "https://osmfoundation.org/wiki/Terms_of_Use",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Shuffle": {
    "module": "Default",
    "description": "Randomly reorders input elements.",
    "infoUrl": "https://wikipedia.org/wiki/Shuffling",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Line feed",
          "CRLF",
          "Space",
          "Comma",
          "Semi-colon",
          "Colon",
          "Nothing (separate chars)"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Sleep": {
    "module": "Default",
    "description": "Sleep causes the recipe to wait for a specified number of milliseconds before continuing execution.",
    "infoUrl": null,
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Time (ms)",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "Snefru": {
    "module": "Crypto",
    "description": "Snefru is a cryptographic hash function invented by Ralph Merkle in 1990 while working at Xerox PARC. The function supports 128-bit and 256-bit output. It was named after the Egyptian Pharaoh Sneferu, continuing the tradition of the Khufu and Khafre block ciphers.<br><br>The original design of Snefru was shown to be insecure by Eli Biham and Adi Shamir who were able to use differential cryptanalysis to find hash collisions. The design was then modified by increasing the number of iterations of the main pass of the algorithm from two to eight.",
    "infoUrl": "https://wikipedia.org/wiki/Snefru",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Size",
        "type": "number",
        "min": 32,
        "max": 480,
        "required": false
      },
      {
        "name": "Rounds",
        "type": "enum",
        "options": [
          "8",
          "4",
          "2"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Sort": {
    "module": "Default",
    "description": "Alphabetically sorts strings separated by the specified delimiter.<br><br>The IP address option supports IPv4 only.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Line feed",
          "CRLF",
          "Space",
          "Comma",
          "Semi-colon",
          "Colon",
          "Nothing (separate chars)"
        ],
        "required": false
      },
      {
        "name": "Reverse",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Order",
        "type": "enum",
        "options": [
          "Alphabetical (case sensitive)",
          "Alphabetical (case insensitive)",
          "IP address",
          "Numeric",
          "Numeric (hexadecimal)",
          "Length"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Split": {
    "module": "Default",
    "description": "Splits a string into sections around a given delimiter.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Split delimiter",
        "type": "enum",
        "options": [
          "Comma",
          "Space",
          "Line feed",
          "CRLF",
          "Semi-colon",
          "Colon",
          "Nothing (separate chars)"
        ],
        "required": false
      },
      {
        "name": "Join delimiter",
        "type": "enum",
        "options": [
          "Line feed",
          "CRLF",
          "Space",
          "Comma",
          "Semi-colon",
          "Colon",
          "Nothing (join chars)"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Split Colour Channels": {
    "module": "Image",
    "description": "Splits the given image into its red, green and blue colour channels.",
    "infoUrl": "https://wikipedia.org/wiki/Channel_(digital_image)",
    "inputType": "ArrayBuffer",
    "outputType": "List<File>",
    "args": [],
    "checks": []
  },
  "Standard Deviation": {
    "module": "Default",
    "description": "Computes the standard deviation of a number list. If an item in the string is not a number it is excluded from the list.<br><br>e.g. <code>0x0a 8 .5</code> becomes <code>4.089281382128433</code>",
    "infoUrl": "https://wikipedia.org/wiki/Standard_deviation",
    "inputType": "string",
    "outputType": "BigNumber",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Line feed",
          "Space",
          "Comma",
          "Semi-colon",
          "Colon",
          "CRLF"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Streebog": {
    "module": "Hashing",
    "description": "Streebog is a cryptographic hash function defined in the Russian national standard GOST R 34.11-2012 <i>Information Technology \\u2013 Cryptographic Information Security \\u2013 Hash Function</i>. It was created to replace an obsolete GOST hash function defined in the old standard GOST R 34.11-94, and as an asymmetric reply to SHA-3 competition by the US National Institute of Standards and Technology.",
    "infoUrl": "https://wikipedia.org/wiki/Streebog",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Digest length",
        "type": "enum",
        "options": [
          "256",
          "512"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Strings": {
    "module": "Regex",
    "description": "Extracts all strings from the input.",
    "infoUrl": "https://wikipedia.org/wiki/Strings_(Unix)",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Encoding",
        "type": "enum",
        "options": [
          "Single byte",
          "16-bit littleendian",
          "16-bit bigendian",
          "All"
        ],
        "required": false
      },
      {
        "name": "Minimum length",
        "type": "number",
        "required": false
      },
      {
        "name": "Match",
        "type": "enum",
        "options": [
          "[ASCII]",
          "Alphanumeric + punctuation (A)",
          "All printable chars (A)",
          "Null-terminated strings (A)",
          "[Unicode]",
          "Alphanumeric + punctuation (U)",
          "All printable chars (U)",
          "Null-terminated strings (U)"
        ],
        "required": false
      },
      {
        "name": "Display total",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Sort",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Unique",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Strip HTML tags": {
    "module": "Default",
    "description": "Removes all HTML tags from the input.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Remove indentation",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Remove excess line breaks",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": [
      {
        "pattern": "(</html>|</div>|</body>)",
        "flags": "i",
        "args": [
          true,
          true
        ]
      }
    ]
  },
  "Strip HTTP headers": {
    "module": "Default",
    "description": "Removes HTTP headers from a request or response by looking for the first instance of a double newline.",
    "infoUrl": "https://wikipedia.org/wiki/Hypertext_Transfer_Protocol#Message_format",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": [
      {
        "pattern": "^HTTP(.|\\s)+?(\\r?\\n){2}",
        "flags": "",
        "args": []
      }
    ]
  },
  "Strip IPv4 header": {
    "module": "Default",
    "description": "Strips the IPv4 header from an IPv4 packet, outputting the payload.",
    "infoUrl": "https://wikipedia.org/wiki/IPv4",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [],
    "checks": []
  },
  "Strip TCP header": {
    "module": "Default",
    "description": "Strips the TCP header from a TCP segment, outputting the payload.",
    "infoUrl": "https://wikipedia.org/wiki/Transmission_Control_Protocol",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [],
    "checks": []
  },
  "Strip UDP header": {
    "module": "Default",
    "description": "Strips the UDP header from a UDP datagram, outputting the payload.",
    "infoUrl": "https://wikipedia.org/wiki/User_Datagram_Protocol",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [],
    "checks": []
  },
  "Subsection": {
    "module": "Default",
    "description": "Select a part of the input data using a regular expression (regex), and run all subsequent operations on each match separately.<br><br>You can use up to one capture group, where the recipe will only be run on the data in the capture group. If there's more than one capture group, only the first one will be operated on.<br><br>Use the Merge operation to reset the effects of subsection.",
    "infoUrl": "",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Section (regex)",
        "type": "string",
        "required": false
      },
      {
        "name": "Case sensitive matching",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Global matching",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Ignore errors",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Substitute": {
    "module": "Default",
    "description": "A substitution cipher allowing you to specify bytes to replace with other byte values. This can be used to create Caesar ciphers but is more powerful as any byte value can be substituted, not just letters, and the substitution values need not be in order.<br><br>Enter the bytes you want to replace in the Plaintext field and the bytes to replace them with in the Ciphertext field.<br><br>Non-printable bytes can be specified using string escape notation. For example, a line feed character can be written as either <code>\\\\n</code> or <code>\\\\x0a</code>.<br><br>Byte ranges can be specified using a hyphen. For example, the sequence <code>0123456789</code> can be written as <code>0-9</code>.<br><br>Note that blackslash characters are used to escape special characters, so will need to be escaped themselves if you want to use them on their own (e.g.<code>\\\\\\\\</code>).",
    "infoUrl": "https://wikipedia.org/wiki/Substitution_cipher",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Plaintext",
        "type": "string",
        "required": false
      },
      {
        "name": "Ciphertext",
        "type": "string",
        "required": false
      },
      {
        "name": "Ignore case",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Subtract": {
    "module": "Default",
    "description": "Subtracts a list of numbers. If an item in the string is not a number it is excluded from the list.<br><br>e.g. <code>0x0a 8 .5</code> becomes <code>1.5</code>",
    "infoUrl": "https://wikipedia.org/wiki/Subtraction",
    "inputType": "string",
    "outputType": "BigNumber",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Line feed",
          "Space",
          "Comma",
          "Semi-colon",
          "Colon",
          "CRLF"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Sum": {
    "module": "Default",
    "description": "Adds together a list of numbers. If an item in the string is not a number it is excluded from the list.<br><br>e.g. <code>0x0a 8 .5</code> becomes <code>18.5</code>",
    "infoUrl": "https://wikipedia.org/wiki/Summation",
    "inputType": "string",
    "outputType": "BigNumber",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Line feed",
          "Space",
          "Comma",
          "Semi-colon",
          "Colon",
          "CRLF"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Swap case": {
    "module": "Default",
    "description": "Converts uppercase letters to lowercase ones, and lowercase ones to uppercase ones.",
    "infoUrl": "",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Swap endianness": {
    "module": "Default",
    "description": "Switches the data from big-endian to little-endian or vice-versa. Data can be read in as hexadecimal or raw bytes. It will be returned in the same format as it is entered.",
    "infoUrl": "https://wikipedia.org/wiki/Endianness",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Data format",
        "type": "enum",
        "options": [
          "Hex",
          "Raw"
        ],
        "required": false
      },
      {
        "name": "Word length (bytes)",
        "type": "number",
        "required": false
      },
      {
        "name": "Pad incomplete words",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Symmetric Difference": {
    "module": "Default",
    "description": "Calculates the symmetric difference of two sets.",
    "infoUrl": "https://wikipedia.org/wiki/Symmetric_difference",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Syntax highlighter": {
    "module": "Code",
    "description": "Adds syntax highlighting to a range of source code languages. Note that this will not indent the code. Use one of the 'Beautify' operations for that.",
    "infoUrl": "https://wikipedia.org/wiki/Syntax_highlighting",
    "inputType": "string",
    "outputType": "html",
    "args": [],
    "checks": []
  },
  "TCP/IP Checksum": {
    "module": "Crypto",
    "description": "Calculates the checksum for a TCP (Transport Control Protocol) or IP (Internet Protocol) header from an input of raw bytes.",
    "infoUrl": "https://wikipedia.org/wiki/IPv4_header_checksum",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Tail": {
    "module": "Default",
    "description": "Like the UNIX tail utility.<br>Gets the last n lines.<br>Optionally you can select all lines after line n by entering a negative value for n.<br>The delimiter can be changed so that instead of lines, fields (i.e. commas) are selected instead.",
    "infoUrl": "https://wikipedia.org/wiki/Tail_(Unix)",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Line feed",
          "CRLF",
          "Space",
          "Comma",
          "Semi-colon",
          "Colon",
          "Nothing (separate chars)"
        ],
        "required": false
      },
      {
        "name": "Number",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "Take bytes": {
    "module": "Default",
    "description": "Takes a slice of the specified number of bytes from the data. Negative values are allowed.",
    "infoUrl": null,
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Start",
        "type": "number",
        "required": false
      },
      {
        "name": "Length",
        "type": "number",
        "required": false
      },
      {
        "name": "Apply to each line",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Take nth bytes": {
    "module": "Default",
    "description": "Takes every nth byte starting with a given byte.",
    "infoUrl": "",
    "inputType": "byteArray",
    "outputType": "byteArray",
    "args": [
      {
        "name": "Take every",
        "type": "number",
        "required": false
      },
      {
        "name": "Starting at",
        "type": "number",
        "required": false
      },
      {
        "name": "Apply to each line",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Tar": {
    "module": "Compression",
    "description": "Packs the input into a tarball.<br><br>No support for multiple files at this time.",
    "infoUrl": "https://wikipedia.org/wiki/Tar_(computing)",
    "inputType": "ArrayBuffer",
    "outputType": "File",
    "args": [
      {
        "name": "Filename",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "Template": {
    "module": "Handlebars",
    "description": "Render a template with Handlebars/Mustache substituting variables using JSON input. Templates will be rendered to plain-text only, to prevent XSS.",
    "infoUrl": "https://handlebarsjs.com/",
    "inputType": "JSON",
    "outputType": "string",
    "args": [
      {
        "name": "Template definition (.handlebars)",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "Text Encoding Brute Force": {
    "module": "Encodings",
    "description": null,
    "infoUrl": "https://wikipedia.org/wiki/Character_encoding",
    "inputType": "string",
    "outputType": "json",
    "args": [
      {
        "name": "Mode",
        "type": "enum",
        "options": [
          "Encode",
          "Decode"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "To BCD": {
    "module": "Default",
    "description": "Binary-Coded Decimal (BCD) is a class of binary encodings of decimal numbers where each decimal digit is represented by a fixed number of bits, usually four or eight. Special bit patterns are sometimes used for a sign",
    "infoUrl": "https://wikipedia.org/wiki/Binary-coded_decimal",
    "inputType": "BigNumber",
    "outputType": "string",
    "args": [
      {
        "name": "Scheme",
        "type": "enum",
        "options": [
          "8 4 2 1",
          "7 4 2 1",
          "4 2 2 1",
          "2 4 2 1",
          "8 4 -2 -1",
          "Excess-3",
          "IBM 8 4 2 1"
        ],
        "required": false
      },
      {
        "name": "Packed",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Signed",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Output format",
        "type": "enum",
        "options": [
          "Nibbles",
          "Bytes",
          "Raw"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "To Base": {
    "module": "Default",
    "description": "Converts a decimal number to a given numerical base.",
    "infoUrl": "https://wikipedia.org/wiki/Radix",
    "inputType": "BigNumber",
    "outputType": "string",
    "args": [
      {
        "name": "Radix",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "To Base32": {
    "module": "Default",
    "description": "Base32 is a notation for encoding arbitrary byte data using a restricted set of symbols that can be conveniently used by humans and processed by computers. It uses a smaller set of characters than Base64, usually the uppercase alphabet and the numbers 2 to 7.",
    "infoUrl": "https://wikipedia.org/wiki/Base32",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Alphabet",
        "type": "enum",
        "options": [
          "Standard",
          "Hex Extended"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "To Base45": {
    "module": "Default",
    "description": "Base45 is a notation for encoding arbitrary byte data using a restricted set of symbols that can be conveniently used by humans and processed by computers. The high number base results in shorter strings than with the decimal or hexadecimal system. Base45 is optimized for usage with QR codes.",
    "infoUrl": "https://wikipedia.org/wiki/List_of_numeral_systems",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Alphabet",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "To Base58": {
    "module": "Default",
    "description": "Base58 (similar to Base64) is a notation for encoding arbitrary byte data. It differs from Base64 by removing easily misread characters (i.e. l, I, 0 and O) to improve human readability.<br><br>This operation encodes data in an ASCII string (with an alphabet of your choosing, presets included).<br><br>e.g. <code>hello world</code> becomes <code>StV1DL6CwTryKyV</code><br><br>Base58 is commonly used in cryptocurrencies (Bitcoin, Ripple, etc).",
    "infoUrl": "https://wikipedia.org/wiki/Base58",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Alphabet",
        "type": "enum",
        "options": [
          "Bitcoin",
          "Ripple"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "To Base62": {
    "module": "Default",
    "description": "Base62 is a notation for encoding arbitrary byte data using a restricted set of symbols that can be conveniently used by humans and processed by computers. The high number base results in shorter strings than with the decimal or hexadecimal system.",
    "infoUrl": "https://wikipedia.org/wiki/List_of_numeral_systems",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Alphabet",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "To Base64": {
    "module": "Default",
    "description": "Base64 is a notation for encoding arbitrary byte data using a restricted set of symbols that can be conveniently used by humans and processed by computers.<br><br>This operation encodes raw data into an ASCII Base64 string.<br><br>e.g. <code>hello</code> becomes <code>aGVsbG8=</code>",
    "infoUrl": "https://wikipedia.org/wiki/Base64",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Alphabet",
        "type": "enum",
        "options": [
          "Standard (RFC 4648): A-Za-z0-9+/=",
          "URL safe (RFC 4648 §5): A-Za-z0-9-_",
          "Filename safe: A-Za-z0-9+-=",
          "itoa64: ./0-9A-Za-z=",
          "XML: A-Za-z0-9_.",
          "y64: A-Za-z0-9._-",
          "z64: 0-9a-zA-Z+/=",
          "Radix-64 (RFC 4880): 0-9A-Za-z+/=",
          "Uuencoding: [space]-_",
          "Xxencoding: +-0-9A-Za-z",
          "BinHex: !-,-0-689@A-NP-VX-Z[`a-fh-mp-r",
          "ROT13: N-ZA-Mn-za-m0-9+/=",
          "UNIX crypt: ./0-9A-Za-z",
          "Atom128: /128GhIoPQROSTeUbADfgHijKLM+n0pFWXY456xyzB7=39VaqrstJklmNuZvwcdEC",
          "Megan35: 3GHIJKLMNOPQRSTUb=cdefghijklmnopWXYZ/12+406789VaqrstuvwxyzABCDEF5",
          "Zong22: ZKj9n+yf0wDVX1s/5YbdxSo=ILaUpPBCHg8uvNO4klm6iJGhQ7eFrWczAMEq3RTt2",
          "Hazz15: HNO4klm6ij9n+J2hyf0gzA8uvwDEq3X1Q7ZKeFrWcVTts/MRGYbdxSo=ILaUpPBC5"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "To Base85": {
    "module": "Default",
    "description": "Base85 (also called Ascii85) is a notation for encoding arbitrary byte data. It is usually more efficient that Base64.<br><br>This operation encodes data in an ASCII string (with an alphabet of your choosing, presets included).<br><br>e.g. <code>hello world</code> becomes <code>BOu!rD]j7BEbo7</code><br><br>Base85 is commonly used in Adobe's PostScript and PDF file formats.<br><br><strong>Options</strong><br><u>Alphabet</u><ul><li>Standard - The standard alphabet, referred to as Ascii85</li><li>Z85 (ZeroMQ) - A string-safe variant of Base85, which avoids quote marks and backslash characters</li><li>IPv6 - A variant of Base85 suitable for encoding IPv6 addresses (RFC 1924)</li></ul><u>Include delimiter</u><br>Adds a '<~' and '~>' delimiter to the start and end of the data. This is standard for Adobe's implementation of Base85.",
    "infoUrl": "https://wikipedia.org/wiki/Ascii85",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Alphabet",
        "type": "enum",
        "options": [
          "Standard",
          "Z85 (ZeroMQ)",
          "IPv6"
        ],
        "required": false
      },
      {
        "name": "Include delimeter",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "To Base92": {
    "module": "Default",
    "description": "Base92 is a notation for encoding arbitrary byte data using a restricted set of symbols that can be conveniently used by humans and processed by computers.",
    "infoUrl": "https://wikipedia.org/wiki/List_of_numeral_systems",
    "inputType": "string",
    "outputType": "byteArray",
    "args": [],
    "checks": []
  },
  "To Binary": {
    "module": "Default",
    "description": "Displays the input data as a binary string.<br><br>e.g. <code>Hi</code> becomes <code>01001000 01101001</code>",
    "infoUrl": "https://wikipedia.org/wiki/Binary_code",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Space",
          "Comma",
          "Semi-colon",
          "Colon",
          "Line feed",
          "CRLF",
          "None"
        ],
        "required": false
      },
      {
        "name": "Byte Length",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "To Braille": {
    "module": "Default",
    "description": "Converts text to six-dot braille symbols.",
    "infoUrl": "https://wikipedia.org/wiki/Braille",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "To Camel case": {
    "module": "Code",
    "description": "Converts the input string to camel case.\\n<br><br>\\nCamel case is all lower case except letters after word boundaries which are uppercase.\\n<br><br>\\ne.g. thisIsCamelCase\\n<br><br>\\n'Attempt to be context aware' will make the operation attempt to nicely transform variable and function names.",
    "infoUrl": "https://wikipedia.org/wiki/Camel_case",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Attempt to be context aware",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "To Case Insensitive Regex": {
    "module": "Default",
    "description": "Converts a case-sensitive regex string into a case-insensitive regex string in case the i flag is unavailable to you.<br><br>e.g. <code>Mozilla/[0-9].[0-9] .*</code> becomes <code>[mM][oO][zZ][iI][lL][lL][aA]/[0-9].[0-9] .*</code>",
    "infoUrl": "https://wikipedia.org/wiki/Regular_expression",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "To Charcode": {
    "module": "Default",
    "description": "Converts text to its unicode character code equivalent.<br><br>e.g. <code>Γειά σου</code> becomes <code>0393 03b5 03b9 03ac 20 03c3 03bf 03c5</code>",
    "infoUrl": "https://wikipedia.org/wiki/Plane_(Unicode)",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Space",
          "Comma",
          "Semi-colon",
          "Colon",
          "Line feed",
          "CRLF"
        ],
        "required": false
      },
      {
        "name": "Base",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "To Decimal": {
    "module": "Default",
    "description": "Converts the input data to an ordinal integer array.<br><br>e.g. <code>Hello</code> becomes <code>72 101 108 108 111</code>",
    "infoUrl": null,
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Space",
          "Comma",
          "Semi-colon",
          "Colon",
          "Line feed",
          "CRLF"
        ],
        "required": false
      },
      {
        "name": "Support signed values",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "To Float": {
    "module": "Default",
    "description": "Convert to IEEE754 Floating Point Numbers",
    "infoUrl": "https://wikipedia.org/wiki/IEEE_754",
    "inputType": "byteArray",
    "outputType": "string",
    "args": [
      {
        "name": "Endianness",
        "type": "enum",
        "options": [
          "Big Endian",
          "Little Endian"
        ],
        "required": false
      },
      {
        "name": "Size",
        "type": "enum",
        "options": [
          "Float (4 bytes)",
          "Double (8 bytes)"
        ],
        "required": false
      },
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Space",
          "Comma",
          "Semi-colon",
          "Colon",
          "Line feed",
          "CRLF"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "To HTML Entity": {
    "module": "Encodings",
    "description": "Converts characters to HTML entities<br><br>e.g. <code>&amp;</code> becomes <code>&amp;<span>amp;</span></code>",
    "infoUrl": "https://wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Convert all characters",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Convert to",
        "type": "enum",
        "options": [
          "Named entities",
          "Numeric entities",
          "Hex entities"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "To Hex": {
    "module": "Default",
    "description": "Converts the input string to hexadecimal bytes separated by the specified delimiter.<br><br>e.g. The UTF-8 encoded string <code>Γειά σου</code> becomes <code>ce 93 ce b5 ce b9 ce ac 20 cf 83 ce bf cf 85 0a</code>",
    "infoUrl": "https://wikipedia.org/wiki/Hexadecimal",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Space",
          "Percent",
          "Comma",
          "Semi-colon",
          "Colon",
          "Line feed",
          "CRLF",
          "0x",
          "0x with comma",
          "\\x",
          "None"
        ],
        "required": false
      },
      {
        "name": "Bytes per line",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "To Hex Content": {
    "module": "Default",
    "description": "Converts special characters in a string to hexadecimal. This format is used by SNORT for representing hex within ASCII text.<br><br>e.g. <code>foo=bar</code> becomes <code>foo|3d|bar</code>.",
    "infoUrl": "http://manual-snort-org.s3-website-us-east-1.amazonaws.com/node32.html#SECTION00451000000000000000",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Convert",
        "type": "enum",
        "options": [
          "Only special chars",
          "Only special chars including spaces",
          "All chars"
        ],
        "required": false
      },
      {
        "name": "Print spaces between bytes",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "To Hexdump": {
    "module": "Default",
    "description": "Creates a hexdump of the input data, displaying both the hexadecimal values of each byte and an ASCII representation alongside.<br><br>The 'UNIX format' argument defines which subset of printable characters are displayed in the preview column.",
    "infoUrl": "https://wikipedia.org/wiki/Hex_dump",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Width",
        "type": "number",
        "min": 1,
        "required": false
      },
      {
        "name": "Upper case hex",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Include final length",
        "type": "boolean",
        "required": false
      },
      {
        "name": "UNIX format",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "To Kebab case": {
    "module": "Code",
    "description": "Converts the input string to kebab case.\\n<br><br>\\nKebab case is all lower case with dashes as word boundaries.\\n<br><br>\\ne.g. this-is-kebab-case\\n<br><br>\\n'Attempt to be context aware' will make the operation attempt to nicely transform variable and function names.",
    "infoUrl": "https://wikipedia.org/wiki/Kebab_case",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Attempt to be context aware",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "To Lower case": {
    "module": "Default",
    "description": "Converts every character in the input to lower case.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "To MessagePack": {
    "module": "Code",
    "description": "Converts JSON to MessagePack encoded byte buffer. MessagePack is a computer data interchange format. It is a binary form for representing simple data structures like arrays and associative arrays.",
    "infoUrl": "https://wikipedia.org/wiki/MessagePack",
    "inputType": "JSON",
    "outputType": "ArrayBuffer",
    "args": [],
    "checks": []
  },
  "To Modhex": {
    "module": "Default",
    "description": "Converts the input string to modhex bytes separated by the specified delimiter.",
    "infoUrl": "https://en.wikipedia.org/wiki/YubiKey#ModHex",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Space",
          "Percent",
          "Comma",
          "Semi-colon",
          "Colon",
          "Line feed",
          "CRLF",
          "None"
        ],
        "required": false
      },
      {
        "name": "Bytes per line",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "To Morse Code": {
    "module": "Default",
    "description": "Translates alphanumeric characters into International Morse Code.<br><br>Ignores non-Morse characters.<br><br>e.g. <code>SOS</code> becomes <code>... --- ...</code>",
    "infoUrl": "https://wikipedia.org/wiki/Morse_code",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Format options",
        "type": "enum",
        "options": [
          "-/.",
          "_/.",
          "Dash/Dot",
          "DASH/DOT",
          "dash/dot"
        ],
        "required": false
      },
      {
        "name": "Letter delimiter",
        "type": "enum",
        "options": [
          "Space",
          "Line feed",
          "CRLF",
          "Forward slash",
          "Backslash",
          "Comma",
          "Semi-colon",
          "Colon"
        ],
        "required": false
      },
      {
        "name": "Word delimiter",
        "type": "enum",
        "options": [
          "Line feed",
          "CRLF",
          "Forward slash",
          "Backslash",
          "Comma",
          "Semi-colon",
          "Colon"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "To Octal": {
    "module": "Default",
    "description": "Converts the input string to octal bytes separated by the specified delimiter.<br><br>e.g. The UTF-8 encoded string <code>Γειά σου</code> becomes <code>316 223 316 265 316 271 316 254 40 317 203 316 277 317 205</code>",
    "infoUrl": "https://wikipedia.org/wiki/Octal",
    "inputType": "byteArray",
    "outputType": "string",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Space",
          "Comma",
          "Semi-colon",
          "Colon",
          "Line feed",
          "CRLF"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "To Punycode": {
    "module": "Encodings",
    "description": "Punycode is a way to represent Unicode with the limited character subset of ASCII supported by the Domain Name System.<br><br>e.g. <code>m\\xfcnchen</code> encodes to <code>mnchen-3ya</code>",
    "infoUrl": "https://wikipedia.org/wiki/Punycode",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Internationalised domain name",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "To Quoted Printable": {
    "module": "Default",
    "description": "Quoted-Printable, or QP encoding, is an encoding using printable ASCII characters (alphanumeric and the equals sign '=') to transmit 8-bit data over a 7-bit data path or, generally, over a medium which is not 8-bit clean. It is defined as a MIME content transfer encoding for use in e-mail.<br><br>QP works by using the equals sign '=' as an escape character. It also limits line length to 76, as some software has limits on line length.",
    "infoUrl": "https://wikipedia.org/wiki/Quoted-printable",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "To Snake case": {
    "module": "Code",
    "description": "Converts the input string to snake case.\\n<br><br>\\nSnake case is all lower case with underscores as word boundaries.\\n<br><br>\\ne.g. this_is_snake_case\\n<br><br>\\n'Attempt to be context aware' will make the operation attempt to nicely transform variable and function names.",
    "infoUrl": "https://wikipedia.org/wiki/Snake_case",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Attempt to be context aware",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "To Table": {
    "module": "Default",
    "description": "Data can be split on different characters and rendered as an HTML, ASCII or Markdown table with an optional header row.<br><br>Supports the CSV (Comma Separated Values) file format by default. Change the cell delimiter argument to <code>\\\\t</code> to support TSV (Tab Separated Values) or <code>|</code> for PSV (Pipe Separated Values).<br><br>You can enter as many delimiters as you like. Each character will be treat as a separate possible delimiter.",
    "infoUrl": "https://wikipedia.org/wiki/Comma-separated_values",
    "inputType": "string",
    "outputType": "html",
    "args": [
      {
        "name": "Cell delimiters",
        "type": "string",
        "required": false
      },
      {
        "name": "Row delimiters",
        "type": "string",
        "required": false
      },
      {
        "name": "Make first row header",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Format",
        "type": "enum",
        "options": [
          "ASCII",
          "HTML",
          "Markdown"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "To UNIX Timestamp": {
    "module": "Default",
    "description": "Parses a datetime string in UTC and returns the corresponding UNIX timestamp.<br><br>e.g. <code>Mon 1 January 2001 11:00:00</code> becomes <code>978346800</code><br><br>A UNIX timestamp is a 32-bit value representing the number of seconds since January 1, 1970 UTC (the UNIX epoch).",
    "infoUrl": "https://wikipedia.org/wiki/Unix_time",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Units",
        "type": "enum",
        "options": [
          "Seconds (s)",
          "Milliseconds (ms)",
          "Microseconds (μs)",
          "Nanoseconds (ns)"
        ],
        "required": false
      },
      {
        "name": "Treat as UTC",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Show parsed datetime",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "To Upper case": {
    "module": "Default",
    "description": "Converts the input string to upper case, optionally limiting scope to only the first character in each word, sentence or paragraph.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Scope",
        "type": "enum",
        "options": [
          "All",
          "Word",
          "Sentence",
          "Paragraph"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Translate DateTime Format": {
    "module": "Default",
    "description": "Parses a datetime string in one format and re-writes it in another.<br><br>Run with no input to see the relevant format string examples.",
    "infoUrl": "https://momentjs.com/docs/#/parsing/string-format/",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Triple DES Decrypt": {
    "module": "Ciphers",
    "description": "Triple DES applies DES three times to each block to increase key size.<br><br><b>Key:</b> Triple DES uses a key length of 24 bytes (192 bits).<br><br><b>IV:</b> The Initialization Vector should be 8 bytes long. If not entered, it will default to 8 null bytes.<br><br><b>Padding:</b> In CBC and ECB mode, PKCS#7 padding will be used as a default.",
    "infoUrl": "https://wikipedia.org/wiki/Triple_DES",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Key",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "IV",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Mode",
        "type": "enum",
        "options": [
          "CBC",
          "CFB",
          "OFB",
          "CTR",
          "ECB",
          "CBC/NoPadding",
          "ECB/NoPadding"
        ],
        "required": false
      },
      {
        "name": "Input",
        "type": "enum",
        "options": [
          "Hex",
          "Raw"
        ],
        "required": false
      },
      {
        "name": "Output",
        "type": "enum",
        "options": [
          "Raw",
          "Hex"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Triple DES Encrypt": {
    "module": "Ciphers",
    "description": "Triple DES applies DES three times to each block to increase key size.<br><br><b>Key:</b> Triple DES uses a key length of 24 bytes (192 bits).<br><br>You can generate a password-based key using one of the KDF operations.<br><br><b>IV:</b> The Initialization Vector should be 8 bytes long. If not entered, it will default to 8 null bytes.<br><br><b>Padding:</b> In CBC and ECB mode, PKCS#7 padding will be used.",
    "infoUrl": "https://wikipedia.org/wiki/Triple_DES",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Key",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "IV",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Mode",
        "type": "enum",
        "options": [
          "CBC",
          "CFB",
          "OFB",
          "CTR",
          "ECB"
        ],
        "required": false
      },
      {
        "name": "Input",
        "type": "enum",
        "options": [
          "Raw",
          "Hex"
        ],
        "required": false
      },
      {
        "name": "Output",
        "type": "enum",
        "options": [
          "Hex",
          "Raw"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Typex": {
    "module": "Bletchley",
    "description": "Encipher/decipher with the WW2 Typex machine.<br><br>Typex was originally built by the British Royal Air Force prior to WW2, and is based on the Enigma machine with some improvements made, including using five rotors with more stepping points and interchangeable wiring cores. It was used across the British and Commonwealth militaries. A number of later variants were produced; here we simulate a WW2 era Mark 22 Typex with plugboards for the reflector and input. Typex rotors were changed regularly and none are public: a random example set are provided.<br><br>To configure the reflector plugboard, enter a string of connected pairs of letters in the reflector box, e.g. <code>AB CD EF</code> connects A to B, C to D, and E to F (you'll need to connect every letter). There is also an input plugboard: unlike Enigma's plugboard, it's not restricted to pairs, so it's entered like a rotor (without stepping). To create your own rotor, enter the letters that the rotor maps A to Z to, in order, optionally followed by <code>&lt;</code> then a list of stepping points.<br><br>More detailed descriptions of the Enigma, Typex and Bombe operations <a href='https://github.com/gchq/CyberChef/wiki/Enigma,-the-Bombe,-and-Typex'>can be found here</a>.",
    "infoUrl": "https://wikipedia.org/wiki/Typex",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "UNIX Timestamp to Windows Filetime": {
    "module": "Default",
    "description": "Converts a UNIX timestamp to a Windows Filetime value.<br><br>A Windows Filetime is a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 UTC.<br><br>A UNIX timestamp is a 32-bit value representing the number of seconds since January 1, 1970 UTC (the UNIX epoch).<br><br>This operation also supports UNIX timestamps in milliseconds, microseconds and nanoseconds.",
    "infoUrl": "https://msdn.microsoft.com/en-us/library/windows/desktop/ms724284(v=vs.85).aspx",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Input units",
        "type": "enum",
        "options": [
          "Seconds (s)",
          "Milliseconds (ms)",
          "Microseconds (μs)",
          "Nanoseconds (ns)"
        ],
        "required": false
      },
      {
        "name": "Output format",
        "type": "enum",
        "options": [
          "Decimal",
          "Hex (big endian)",
          "Hex (little endian)"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "URL Decode": {
    "module": "URL",
    "description": "Converts URI/URL percent-encoded characters back to their raw values.<br><br>e.g. <code>%3d</code> becomes <code>=</code>",
    "infoUrl": "https://wikipedia.org/wiki/Percent-encoding",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Treat \"+\" as space",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": [
      {
        "pattern": ".*(?:%[\\da-f]{2}.*){4}",
        "flags": "i",
        "args": []
      }
    ]
  },
  "URL Encode": {
    "module": "URL",
    "description": "Encodes problematic characters into percent-encoding, a format supported by URIs/URLs.<br><br>e.g. <code>=</code> becomes <code>%3d</code>",
    "infoUrl": "https://wikipedia.org/wiki/Percent-encoding",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Encode all special chars",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Unescape string": {
    "module": "Default",
    "description": "Unescapes characters in a string that have been escaped. For example, <code>Don\\\\'t stop me now</code> becomes <code>Don't stop me now</code>.<br><br>Supports the following escape sequences:<ul><li><code>\\\\n</code> (Line feed/newline)</li><li><code>\\\\r</code> (Carriage return)</li><li><code>\\\\t</code> (Horizontal tab)</li><li><code>\\\\b</code> (Backspace)</li><li><code>\\\\f</code> (Form feed)</li><li><code>\\\\nnn</code> (Octal, where n is 0-7)</li><li><code>\\\\xnn</code> (Hex, where n is 0-f)</li><li><code>\\\\\\\\</code> (Backslash)</li><li><code>\\\\'</code> (Single quote)</li><li><code>\\\\&quot;</code> (Double quote)</li><li><code>\\\\unnnn</code> (Unicode character)</li><li><code>\\\\u{nnnnnn}</code> (Unicode code point)</li></ul>",
    "infoUrl": "https://wikipedia.org/wiki/Escape_sequence",
    "inputType": "string",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "Unescape Unicode Characters": {
    "module": "Default",
    "description": "Converts unicode-escaped character notation back into raw characters.<br><br>Supports the prefixes:<ul><li><code>\\\\u</code></li><li><code>%u</code></li><li><code>U+</code></li></ul>e.g. <code>\\\\u03c3\\\\u03bf\\\\u03c5</code> becomes <code>σου</code>",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Prefix",
        "type": "enum",
        "options": [
          "\\u",
          "%u",
          "U+"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Unicode Text Format": {
    "module": "Default",
    "description": "Adds Unicode combining characters to change formatting of plaintext.",
    "infoUrl": "https://wikipedia.org/wiki/Combining_character",
    "inputType": "byteArray",
    "outputType": "byteArray",
    "args": [
      {
        "name": "Underline",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Strikethrough",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Unique": {
    "module": "Default",
    "description": "Removes duplicate strings from the input.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Delimiter",
        "type": "enum",
        "options": [
          "Line feed",
          "CRLF",
          "Space",
          "Comma",
          "Semi-colon",
          "Colon",
          "Nothing (separate chars)"
        ],
        "required": false
      },
      {
        "name": "Display count",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Untar": {
    "module": "Compression",
    "description": "Unpacks a tarball and displays it per file.",
    "infoUrl": "https://wikipedia.org/wiki/Tar_(computing)",
    "inputType": "ArrayBuffer",
    "outputType": "List<File>",
    "args": [],
    "checks": [
      {
        "pattern": "^.{257}\\x75\\x73\\x74\\x61\\x72",
        "flags": "",
        "args": []
      }
    ]
  },
  "Unzip": {
    "module": "Compression",
    "description": "Decompresses data using the PKZIP algorithm and displays it per file, with support for passwords.",
    "infoUrl": "https://wikipedia.org/wiki/Zip_(file_format)",
    "inputType": "ArrayBuffer",
    "outputType": "List<File>",
    "args": [
      {
        "name": "Password",
        "type": "string",
        "required": false
      },
      {
        "name": "Verify result",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": [
      {
        "pattern": "^\\x50\\x4b(?:\\x03|\\x05|\\x07)(?:\\x04|\\x06|\\x08)",
        "flags": "",
        "args": [
          "",
          false
        ]
      }
    ]
  },
  "VarInt Decode": {
    "module": "Default",
    "description": "Decodes a VarInt encoded integer. VarInt is an efficient way of encoding variable length integers and is commonly used with Protobuf.",
    "infoUrl": "https://developers.google.com/protocol-buffers/docs/encoding#varints",
    "inputType": "byteArray",
    "outputType": "string",
    "args": [],
    "checks": []
  },
  "VarInt Encode": {
    "module": "Default",
    "description": "Encodes a Vn integer as a VarInt. VarInt is an efficient way of encoding variable length integers and is commonly used with Protobuf.",
    "infoUrl": "https://developers.google.com/protocol-buffers/docs/encoding#varints",
    "inputType": "string",
    "outputType": "byteArray",
    "args": [],
    "checks": []
  },
  "View Bit Plane": {
    "module": "Image",
    "description": "Extracts and displays a bit plane of any given image. These show only a single bit from each pixel, and can be used to hide messages in Steganography.",
    "infoUrl": "https://wikipedia.org/wiki/Bit_plane",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Colour",
        "type": "enum",
        "required": false
      },
      {
        "name": "Bit",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "Vigenère Decode": {
    "module": "Ciphers",
    "description": "The Vigenere cipher is a method of encrypting alphabetic text by using a series of different Caesar ciphers based on the letters of a keyword. It is a simple form of polyalphabetic substitution.",
    "infoUrl": "https://wikipedia.org/wiki/Vigenère_cipher",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Key",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "Vigenère Encode": {
    "module": "Ciphers",
    "description": "The Vigenere cipher is a method of encrypting alphabetic text by using a series of different Caesar ciphers based on the letters of a keyword. It is a simple form of polyalphabetic substitution.",
    "infoUrl": "https://wikipedia.org/wiki/Vigenère_cipher",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Key",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "Whirlpool": {
    "module": "Crypto",
    "description": "Whirlpool is a cryptographic hash function designed by Vincent Rijmen (co-creator of AES) and Paulo S. L. M. Barreto, who first described it in 2000.<br><br>Several variants exist:<ul><li>Whirlpool-0 is the original version released in 2000.</li><li>Whirlpool-T is the first revision, released in 2001, improving the generation of the s-box.</li><li>Whirlpool is the latest revision, released in 2003, fixing a flaw in the diffusion matrix.</li></ul>",
    "infoUrl": "https://wikipedia.org/wiki/Whirlpool_(cryptography)",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Variant",
        "type": "enum",
        "options": [
          "Whirlpool",
          "Whirlpool-T",
          "Whirlpool-0"
        ],
        "required": false
      },
      {
        "name": "Rounds",
        "type": "number",
        "min": 1,
        "max": 10,
        "required": false
      }
    ],
    "checks": []
  },
  "Windows Filetime to UNIX Timestamp": {
    "module": "Default",
    "description": "Converts a Windows Filetime value to a UNIX timestamp.<br><br>A Windows Filetime is a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 UTC.<br><br>A UNIX timestamp is a 32-bit value representing the number of seconds since January 1, 1970 UTC (the UNIX epoch).<br><br>This operation also supports UNIX timestamps in milliseconds, microseconds and nanoseconds.",
    "infoUrl": "https://msdn.microsoft.com/en-us/library/windows/desktop/ms724284(v=vs.85).aspx",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Output units",
        "type": "enum",
        "options": [
          "Seconds (s)",
          "Milliseconds (ms)",
          "Microseconds (μs)",
          "Nanoseconds (ns)"
        ],
        "required": false
      },
      {
        "name": "Input format",
        "type": "enum",
        "options": [
          "Decimal",
          "Hex (big endian)",
          "Hex (little endian)"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "XKCD Random Number": {
    "module": "Default",
    "description": "RFC 1149.5 specifies 4 as the standard IEEE-vetted random number.",
    "infoUrl": "https://xkcd.com/221/",
    "inputType": "string",
    "outputType": "number",
    "args": [],
    "checks": []
  },
  "XML Beautify": {
    "module": "Code",
    "description": "Indents and prettifies eXtensible Markup Language (XML) code.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Indent string",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "XML Minify": {
    "module": "Code",
    "description": "Compresses eXtensible Markup Language (XML) code.",
    "infoUrl": null,
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Preserve comments",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "XOR": {
    "module": "Default",
    "description": "XOR the input with the given key.<br>e.g. <code>fe023da5</code><br><br><strong>Options</strong><br><u>Null preserving:</u> If the current byte is 0x00 or the same as the key, skip it.<br><br><u>Scheme:</u><ul><li>Standard - key is unchanged after each round</li><li>Input differential - key is set to the value of the previous unprocessed byte</li><li>Output differential - key is set to the value of the previous processed byte</li><li>Cascade - key is set to the input byte shifted by one</li></ul>",
    "infoUrl": "https://wikipedia.org/wiki/XOR",
    "inputType": "ArrayBuffer",
    "outputType": "byteArray",
    "args": [
      {
        "name": "Key",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Scheme",
        "type": "enum",
        "options": [
          "Standard",
          "Input differential",
          "Output differential",
          "Cascade"
        ],
        "required": false
      },
      {
        "name": "Null preserving",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "XOR Brute Force": {
    "module": "Default",
    "description": "Enumerate all possible XOR solutions. Current maximum key length is 2 due to browser performance.<br><br>Optionally enter a string that you expect to find in the plaintext to filter results (crib).",
    "infoUrl": "https://wikipedia.org/wiki/Exclusive_or",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Key length",
        "type": "number",
        "required": false
      },
      {
        "name": "Sample length",
        "type": "number",
        "required": false
      },
      {
        "name": "Sample offset",
        "type": "number",
        "required": false
      },
      {
        "name": "Scheme",
        "type": "enum",
        "options": [
          "Standard",
          "Input differential",
          "Output differential"
        ],
        "required": false
      },
      {
        "name": "Null preserving",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Print key",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Output as hex",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Crib (known plaintext string)",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "XOR Checksum": {
    "module": "Crypto",
    "description": "XOR Checksum splits the input into blocks of a configurable size and performs the XOR operation on these blocks.",
    "infoUrl": "https://wikipedia.org/wiki/XOR",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Blocksize",
        "type": "number",
        "required": false
      }
    ],
    "checks": []
  },
  "XPath expression": {
    "module": "Code",
    "description": "Extract information from an XML document with an XPath query",
    "infoUrl": "https://wikipedia.org/wiki/XPath",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "XPath",
        "type": "string",
        "required": false
      },
      {
        "name": "Result delimiter",
        "type": "string",
        "required": false
      }
    ],
    "checks": []
  },
  "XSalsa20": {
    "module": "Ciphers",
    "description": "XSalsa20 is a variant of the Salsa20 stream cipher designed by Daniel J. Bernstein; XSalsa uses longer nonces.<br><br><b>Key:</b> XSalsa20 uses a key of 16 or 32 bytes (128 or 256 bits).<br><br><b>Nonce:</b> XSalsa20 uses a nonce of 24 bytes (192 bits).<br><br><b>Counter:</b> XSalsa uses a counter of 8 bytes (64 bits). The counter starts at zero at the start of the keystream, and is incremented at every 64 bytes.",
    "infoUrl": "https://en.wikipedia.org/wiki/Salsa20#XSalsa20_with_192-bit_nonce",
    "inputType": "string",
    "outputType": "string",
    "args": [
      {
        "name": "Key",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Nonce",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      },
      {
        "name": "Counter",
        "type": "number",
        "min": 0,
        "required": false
      },
      {
        "name": "Rounds",
        "type": "enum",
        "options": [
          "20",
          "12",
          "8"
        ],
        "required": false
      },
      {
        "name": "Input",
        "type": "enum",
        "options": [
          "Hex",
          "Raw"
        ],
        "required": false
      },
      {
        "name": "Output",
        "type": "enum",
        "options": [
          "Raw",
          "Hex"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "XXTEA Decrypt": {
    "module": "Ciphers",
    "description": "Corrected Block TEA (often referred to as XXTEA) is a block cipher designed to correct weaknesses in the original Block TEA. XXTEA operates on variable-length blocks that are some arbitrary multiple of 32 bits in size (minimum 64 bits). The number of full cycles depends on the block size, but there are at least six (rising to 32 for small block sizes). The original Block TEA applies the XTEA round function to each word in the block and combines it additively with its leftmost neighbour. Slow diffusion rate of the decryption process was immediately exploited to break the cipher. Corrected Block TEA uses a more involved round function which makes use of both immediate neighbours in processing each word in the block.",
    "infoUrl": "https://wikipedia.org/wiki/XXTEA",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Key",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "XXTEA Encrypt": {
    "module": "Ciphers",
    "description": "Corrected Block TEA (often referred to as XXTEA) is a block cipher designed to correct weaknesses in the original Block TEA. XXTEA operates on variable-length blocks that are some arbitrary multiple of 32 bits in size (minimum 64 bits). The number of full cycles depends on the block size, but there are at least six (rising to 32 for small block sizes). The original Block TEA applies the XTEA round function to each word in the block and combines it additively with its leftmost neighbour. Slow diffusion rate of the decryption process was immediately exploited to break the cipher. Corrected Block TEA uses a more involved round function which makes use of both immediate neighbours in processing each word in the block.",
    "infoUrl": "https://wikipedia.org/wiki/XXTEA",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Key",
        "type": "bytes",
        "encodings": [
          "hex",
          "utf8",
          "latin1",
          "base64"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "YAML to JSON": {
    "module": "Default",
    "description": "Convert YAML to JSON",
    "infoUrl": "https://en.wikipedia.org/wiki/YAML",
    "inputType": "string",
    "outputType": "JSON",
    "args": [],
    "checks": []
  },
  "YARA Rules": {
    "module": "Yara",
    "description": "YARA is a tool developed at VirusTotal, primarily aimed at helping malware researchers to identify and classify malware samples. It matches based on rules specified by the user containing textual or binary patterns and a boolean expression. For help on writing rules, see the <a href='https://yara.readthedocs.io/en/latest/writingrules.html'>YARA documentation.</a>",
    "infoUrl": "https://wikipedia.org/wiki/YARA",
    "inputType": "ArrayBuffer",
    "outputType": "string",
    "args": [
      {
        "name": "Rules",
        "type": "string",
        "required": false
      },
      {
        "name": "Show strings",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Show string lengths",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Show metadata",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Show counts",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Show rule warnings",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Show console module messages",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": []
  },
  "Zip": {
    "module": "Compression",
    "description": "Compresses data using the PKZIP algorithm with the given filename.<br><br>No support for multiple files at this time.",
    "infoUrl": "https://wikipedia.org/wiki/Zip_(file_format)",
    "inputType": "ArrayBuffer",
    "outputType": "File",
    "args": [
      {
        "name": "Filename",
        "type": "string",
        "required": false
      },
      {
        "name": "Comment",
        "type": "string",
        "required": false
      },
      {
        "name": "Password",
        "type": "string",
        "required": false
      },
      {
        "name": "Compression method",
        "type": "enum",
        "options": [
          "Deflate",
          "None (Store)"
        ],
        "required": false
      },
      {
        "name": "Operating system",
        "type": "enum",
        "options": [
          "MSDOS",
          "Unix",
          "Macintosh"
        ],
        "required": false
      },
      {
        "name": "Compression type",
        "type": "enum",
        "options": [
          "Dynamic Huffman Coding",
          "Fixed Huffman Coding",
          "None (Store)"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Zlib Deflate": {
    "module": "Compression",
    "description": "Compresses data using the deflate algorithm adding zlib headers.",
    "infoUrl": "https://wikipedia.org/wiki/Zlib",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Compression type",
        "type": "enum",
        "options": [
          "Dynamic Huffman Coding",
          "Fixed Huffman Coding",
          "None (Store)"
        ],
        "required": false
      }
    ],
    "checks": []
  },
  "Zlib Inflate": {
    "module": "Compression",
    "description": "Decompresses data which has been compressed using the deflate algorithm with zlib headers.",
    "infoUrl": "https://wikipedia.org/wiki/Zlib",
    "inputType": "ArrayBuffer",
    "outputType": "ArrayBuffer",
    "args": [
      {
        "name": "Start index",
        "type": "number",
        "required": false
      },
      {
        "name": "Initial output buffer size",
        "type": "number",
        "required": false
      },
      {
        "name": "Buffer expansion type",
        "type": "enum",
        "options": [
          "Adaptive",
          "Block"
        ],
        "required": false
      },
      {
        "name": "Resize buffer after decompression",
        "type": "boolean",
        "required": false
      },
      {
        "name": "Verify result",
        "type": "boolean",
        "required": false
      }
    ],
    "checks": [
      {
        "pattern": "^\\x78(\\x01|\\x9c|\\xda|\\x5e)",
        "flags": "",
        "args": [
          0,
          0,
          "Adaptive",
          false,
          false
        ]
      }
    ]
  }
}